/*
Oceanengine Open Api

巨量引擎开放平台 Open Api


*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"context"
	"net/http"
	"net/url"

	"github.com/oceanengine/ad_open_sdk_go/config"
	. "github.com/oceanengine/ad_open_sdk_go/models"
)

// BrandMaterialListV30ApiService BrandMaterialListV30Api service
type BrandMaterialListV30ApiService service

type ApiOpenApiV30BrandMaterialListGetRequest struct {
	ctx            context.Context
	ApiService     *BrandMaterialListV30ApiService
	advertiserId   *int64
	materialIds    *[]int64
	materialName   *string
	materialStatus *[]*BrandMaterialListV30MaterialStatus
	iesCoreUserId  *string
	orderFilter    *BrandMaterialListV30OrderFilter
	startTime      *string
	endTime        *string
	campaignFilter *BrandMaterialListV30CampaignFilter
	pageInfo       *BrandMaterialListV30PageInfo
}

// 广告主id
func (r *ApiOpenApiV30BrandMaterialListGetRequest) AdvertiserId(advertiserId int64) *ApiOpenApiV30BrandMaterialListGetRequest {
	r.advertiserId = &advertiserId
	return r
}

// 素材ID
func (r *ApiOpenApiV30BrandMaterialListGetRequest) MaterialIds(materialIds []int64) *ApiOpenApiV30BrandMaterialListGetRequest {
	r.materialIds = &materialIds
	return r
}

// 素材名称
func (r *ApiOpenApiV30BrandMaterialListGetRequest) MaterialName(materialName string) *ApiOpenApiV30BrandMaterialListGetRequest {
	r.materialName = &materialName
	return r
}

// 素材状态
func (r *ApiOpenApiV30BrandMaterialListGetRequest) MaterialStatus(materialStatus []*BrandMaterialListV30MaterialStatus) *ApiOpenApiV30BrandMaterialListGetRequest {
	r.materialStatus = &materialStatus
	return r
}

// 抖音号ID
func (r *ApiOpenApiV30BrandMaterialListGetRequest) IesCoreUserId(iesCoreUserId string) *ApiOpenApiV30BrandMaterialListGetRequest {
	r.iesCoreUserId = &iesCoreUserId
	return r
}

// 预订单过滤条件
func (r *ApiOpenApiV30BrandMaterialListGetRequest) OrderFilter(orderFilter BrandMaterialListV30OrderFilter) *ApiOpenApiV30BrandMaterialListGetRequest {
	r.orderFilter = &orderFilter
	return r
}

// 投放起始时间
func (r *ApiOpenApiV30BrandMaterialListGetRequest) StartTime(startTime string) *ApiOpenApiV30BrandMaterialListGetRequest {
	r.startTime = &startTime
	return r
}

// 投放截止时间
func (r *ApiOpenApiV30BrandMaterialListGetRequest) EndTime(endTime string) *ApiOpenApiV30BrandMaterialListGetRequest {
	r.endTime = &endTime
	return r
}

// 广告组过滤条件
func (r *ApiOpenApiV30BrandMaterialListGetRequest) CampaignFilter(campaignFilter BrandMaterialListV30CampaignFilter) *ApiOpenApiV30BrandMaterialListGetRequest {
	r.campaignFilter = &campaignFilter
	return r
}

// 分页信息
func (r *ApiOpenApiV30BrandMaterialListGetRequest) PageInfo(pageInfo BrandMaterialListV30PageInfo) *ApiOpenApiV30BrandMaterialListGetRequest {
	r.pageInfo = &pageInfo
	return r
}

func (r *ApiOpenApiV30BrandMaterialListGetRequest) Execute() (*BrandMaterialListV30Response, *http.Response, error) {
	return r.ApiService.getExecute(r)
}

func (r *ApiOpenApiV30BrandMaterialListGetRequest) AccessToken(accessToken string) *ApiOpenApiV30BrandMaterialListGetRequest {
	r.ctx = context.WithValue(r.ctx, config.ContextAccessToken, accessToken)
	return r
}

func (r *ApiOpenApiV30BrandMaterialListGetRequest) WithLog(enable bool) *ApiOpenApiV30BrandMaterialListGetRequest {
	if enable {
		r.ctx = context.WithValue(r.ctx, config.ContextEnableLog, true)
	}
	return r
}

/*
OpenApiV30BrandMaterialListGet Method for OpenApiV30BrandMaterialListGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOpenApiV30BrandMaterialListGetRequest
*/
func (a *BrandMaterialListV30ApiService) Get(ctx context.Context) *ApiOpenApiV30BrandMaterialListGetRequest {
	return &ApiOpenApiV30BrandMaterialListGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return BrandMaterialListV30Response
func (a *BrandMaterialListV30ApiService) getExecute(r *ApiOpenApiV30BrandMaterialListGetRequest) (*BrandMaterialListV30Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           map[string]*FormFileInfo
		localVarReturnValue *BrandMaterialListV30Response
	)

	r.ctx = a.client.prepareCtx(r.ctx)

	localBasePath := a.client.Cfg.GetBasePath()

	localVarPath := localBasePath + "/open_api/v3.0/brand/material/list/"

	localVarHeaderParams := make(map[string]string)
	formFiles = make(map[string]*FormFileInfo)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.advertiserId == nil {
		return localVarReturnValue, nil, ReportError("advertiserId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "advertiser_id", r.advertiserId)
	if r.materialIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "material_ids", r.materialIds)
	}
	if r.materialName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "material_name", r.materialName)
	}
	if r.materialStatus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "material_status", r.materialStatus)
	}
	if r.iesCoreUserId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ies_core_user_id", r.iesCoreUserId)
	}
	if r.orderFilter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order_filter", r.orderFilter)
	}
	if r.startTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_time", r.startTime)
	}
	if r.endTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end_time", r.endTime)
	}
	if r.campaignFilter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "campaign_filter", r.campaignFilter)
	}
	if r.pageInfo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_info", r.pageInfo)
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.call(r.ctx, req, &localVarReturnValue)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
