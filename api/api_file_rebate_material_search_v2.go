/*
Oceanengine Open Api

巨量引擎开放平台 Open Api

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	"github.com/oceanengine/ad_open_sdk_go/config"
	. "github.com/oceanengine/ad_open_sdk_go/models"
)

// FileRebateMaterialSearchV2ApiService FileRebateMaterialSearchV2Api service
type FileRebateMaterialSearchV2ApiService service

type ApiOpenApi2FileRebateMaterialSearchGetRequest struct {
	ctx        context.Context
	ApiService *FileRebateMaterialSearchV2ApiService
	agentId    *int64
	period     *string
	filtering  *FileRebateMaterialSearchV2Filtering
	cursor     *string
	count      *int32
	page       *int32
	pageSize   *int32
}

// 代理商帐户ID
func (r *ApiOpenApi2FileRebateMaterialSearchGetRequest) AgentId(agentId int64) *ApiOpenApi2FileRebateMaterialSearchGetRequest {
	r.agentId = &agentId
	return r
}

// 年月 格式：yyyy-mm
func (r *ApiOpenApi2FileRebateMaterialSearchGetRequest) Period(period string) *ApiOpenApi2FileRebateMaterialSearchGetRequest {
	r.period = &period
	return r
}

// 过滤条件
func (r *ApiOpenApi2FileRebateMaterialSearchGetRequest) Filtering(filtering FileRebateMaterialSearchV2Filtering) *ApiOpenApi2FileRebateMaterialSearchGetRequest {
	r.filtering = &filtering
	return r
}

// 【分页方式①】 游标查询方案，推荐该方式，注：该方式查询依赖上一次返回值，只能串行调用。 游标值：首次查询请传入 \&quot;0\&quot;。不传入或者传空字符串默认使用【分页方式②】。
func (r *ApiOpenApi2FileRebateMaterialSearchGetRequest) Cursor(cursor string) *ApiOpenApi2FileRebateMaterialSearchGetRequest {
	r.cursor = &cursor
	return r
}

// 【分页方式①】 数据量：一次请求希望获取的数据量（最大限制5000）。
func (r *ApiOpenApi2FileRebateMaterialSearchGetRequest) Count(count int32) *ApiOpenApi2FileRebateMaterialSearchGetRequest {
	r.count = &count
	return r
}

// 【分页方式②】 页数默认值: 1
func (r *ApiOpenApi2FileRebateMaterialSearchGetRequest) Page(page int32) *ApiOpenApi2FileRebateMaterialSearchGetRequest {
	r.page = &page
	return r
}

// 【分页方式②】 页面大小默认值:10, 最大值：500
func (r *ApiOpenApi2FileRebateMaterialSearchGetRequest) PageSize(pageSize int32) *ApiOpenApi2FileRebateMaterialSearchGetRequest {
	r.pageSize = &pageSize
	return r
}

func (r *ApiOpenApi2FileRebateMaterialSearchGetRequest) Execute() (*FileRebateMaterialSearchV2Response, *http.Response, error) {
	return r.ApiService.getExecute(r)
}

func (r *ApiOpenApi2FileRebateMaterialSearchGetRequest) AccessToken(accessToken string) *ApiOpenApi2FileRebateMaterialSearchGetRequest {
	r.ctx = context.WithValue(r.ctx, config.ContextAccessToken, accessToken)
	return r
}

func (r *ApiOpenApi2FileRebateMaterialSearchGetRequest) WithLog(enable bool) *ApiOpenApi2FileRebateMaterialSearchGetRequest {
	if enable {
		r.ctx = context.WithValue(r.ctx, config.ContextEnableLog, true)
	}
	return r
}

/*
OpenApi2FileRebateMaterialSearchGet Method for OpenApi2FileRebateMaterialSearchGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOpenApi2FileRebateMaterialSearchGetRequest
*/
func (a *FileRebateMaterialSearchV2ApiService) Get(ctx context.Context) *ApiOpenApi2FileRebateMaterialSearchGetRequest {
	return &ApiOpenApi2FileRebateMaterialSearchGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return FileRebateMaterialSearchV2Response
func (a *FileRebateMaterialSearchV2ApiService) getExecute(r *ApiOpenApi2FileRebateMaterialSearchGetRequest) (*FileRebateMaterialSearchV2Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           map[string]*FormFileInfo
		localVarReturnValue *FileRebateMaterialSearchV2Response
	)

	r.ctx = a.client.prepareCtx(r.ctx)

	localBasePath := a.client.Cfg.GetBasePath()

	localVarPath := localBasePath + "/open_api/2/file/rebate/material_search/"

	localVarHeaderParams := make(map[string]string)
	formFiles = make(map[string]*FormFileInfo)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.agentId == nil {
		return localVarReturnValue, nil, ReportError("agentId is required and must be specified")
	}
	if r.period == nil {
		return localVarReturnValue, nil, ReportError("period is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "agent_id", r.agentId)
	parameterAddToHeaderOrQuery(localVarQueryParams, "period", r.period)
	if r.filtering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filtering", r.filtering)
	}
	if r.cursor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cursor", r.cursor)
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count)
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page)
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize)
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r.ctx, req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
