/*
Oceanengine Open Api

巨量引擎开放平台 Open Api

API version: 1.1.15
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	"github.com/oceanengine/ad_open_sdk_go/config"
	. "github.com/oceanengine/ad_open_sdk_go/models"
)

// DiagnosisTaskAgentListV2ApiService DiagnosisTaskAgentListV2Api service
type DiagnosisTaskAgentListV2ApiService service

type ApiOpenApi2DiagnosisTaskAgentListGetRequest struct {
	ctx        context.Context
	ApiService *DiagnosisTaskAgentListV2ApiService
	agentId    *int64
	results    *[]*DiagnosisTaskAgentListV2Results
	status     *[]*DiagnosisTaskAgentListV2Status
	startTime  *string
	endTime    *string
	page       *int32
	pageSize   *int32
}

// 代理商ID
func (r *ApiOpenApi2DiagnosisTaskAgentListGetRequest) AgentId(agentId int64) *ApiOpenApi2DiagnosisTaskAgentListGetRequest {
	r.agentId = &agentId
	return r
}

// 根据任务结果筛选 允许值： FIRST_PUBLISH_MATERIAL 首发素材 NON_FIRST_PUBLISH_MATERIAL 非首发素材 AD_HIGH_QUALITY_MATERIAL AD优质素材 NON_AD_HIGH_QUALITY_MATERIAL AD非优质素材 ECP_HIGH_QUALITY_MATERIAL 千川优质素材 NON_ECP_HIGH_QUALITY_MATERIAL 千川非优质素材 INEFFICIENT_MATERIAL 低效素材 NON_INEFFICIENT_MATERIAL 非低效素材
func (r *ApiOpenApi2DiagnosisTaskAgentListGetRequest) Results(results []*DiagnosisTaskAgentListV2Results) *ApiOpenApi2DiagnosisTaskAgentListGetRequest {
	r.results = &results
	return r
}

// 根据任务状态筛选，允许值： PENDING SUCCESS FAILED
func (r *ApiOpenApi2DiagnosisTaskAgentListGetRequest) Status(status []*DiagnosisTaskAgentListV2Status) *ApiOpenApi2DiagnosisTaskAgentListGetRequest {
	r.status = &status
	return r
}

// 根据任务创建时间进行过滤的起始时间，与end_time搭配使用，格式：yyyy-mm-dd
func (r *ApiOpenApi2DiagnosisTaskAgentListGetRequest) StartTime(startTime string) *ApiOpenApi2DiagnosisTaskAgentListGetRequest {
	r.startTime = &startTime
	return r
}

// 根据任务创建时间进行过滤的截止时间，与start_time搭配使用，格式：yyyy-mm-dd
func (r *ApiOpenApi2DiagnosisTaskAgentListGetRequest) EndTime(endTime string) *ApiOpenApi2DiagnosisTaskAgentListGetRequest {
	r.endTime = &endTime
	return r
}

// 页码，默认值1
func (r *ApiOpenApi2DiagnosisTaskAgentListGetRequest) Page(page int32) *ApiOpenApi2DiagnosisTaskAgentListGetRequest {
	r.page = &page
	return r
}

// 页面大小，默认值20
func (r *ApiOpenApi2DiagnosisTaskAgentListGetRequest) PageSize(pageSize int32) *ApiOpenApi2DiagnosisTaskAgentListGetRequest {
	r.pageSize = &pageSize
	return r
}

func (r *ApiOpenApi2DiagnosisTaskAgentListGetRequest) Execute() (*DiagnosisTaskAgentListV2Response, *http.Response, error) {
	return r.ApiService.getExecute(r)
}

func (r *ApiOpenApi2DiagnosisTaskAgentListGetRequest) AccessToken(accessToken string) *ApiOpenApi2DiagnosisTaskAgentListGetRequest {
	r.ctx = context.WithValue(r.ctx, config.ContextAccessToken, accessToken)
	return r
}

func (r *ApiOpenApi2DiagnosisTaskAgentListGetRequest) WithLog(enable bool) *ApiOpenApi2DiagnosisTaskAgentListGetRequest {
	if enable {
		r.ctx = context.WithValue(r.ctx, config.ContextEnableLog, true)
	}
	return r
}

/*
OpenApi2DiagnosisTaskAgentListGet Method for OpenApi2DiagnosisTaskAgentListGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOpenApi2DiagnosisTaskAgentListGetRequest
*/
func (a *DiagnosisTaskAgentListV2ApiService) Get(ctx context.Context) *ApiOpenApi2DiagnosisTaskAgentListGetRequest {
	return &ApiOpenApi2DiagnosisTaskAgentListGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DiagnosisTaskAgentListV2Response
func (a *DiagnosisTaskAgentListV2ApiService) getExecute(r *ApiOpenApi2DiagnosisTaskAgentListGetRequest) (*DiagnosisTaskAgentListV2Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           map[string]*FormFileInfo
		localVarReturnValue *DiagnosisTaskAgentListV2Response
	)

	r.ctx = a.client.prepareCtx(r.ctx)

	localBasePath := a.client.Cfg.GetBasePath()

	localVarPath := localBasePath + "/open_api/2/diagnosis_task/agent/list/"

	localVarHeaderParams := make(map[string]string)
	formFiles = make(map[string]*FormFileInfo)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.agentId == nil {
		return localVarReturnValue, nil, ReportError("agentId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "agent_id", r.agentId)
	if r.results != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "results", r.results)
	}
	if r.status != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status", r.status)
	}
	if r.startTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_time", r.startTime)
	}
	if r.endTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end_time", r.endTime)
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page)
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize)
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r.ctx, req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
