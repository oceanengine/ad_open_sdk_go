/*
Oceanengine Open Api

巨量引擎开放平台 Open Api


*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"context"
	"net/http"
	"net/url"

	"github.com/oceanengine/ad_open_sdk_go/config"
	. "github.com/oceanengine/ad_open_sdk_go/models"
)

// QianchuanToolsLogSearchV10ApiService QianchuanToolsLogSearchV10Api service
type QianchuanToolsLogSearchV10ApiService service

type ApiOpenApiV10QianchuanToolsLogSearchGetRequest struct {
	ctx          context.Context
	ApiService   *QianchuanToolsLogSearchV10ApiService
	advertiserId *int64
	objectType   *QianchuanToolsLogSearchV10ObjectType
	objectId     *int64
	operatorId   *[]int64
	startTime    *string
	endTime      *string
	page         *int32
	pageSize     *int32
}

// 广告主ID
func (r *ApiOpenApiV10QianchuanToolsLogSearchGetRequest) AdvertiserId(advertiserId int64) *ApiOpenApiV10QianchuanToolsLogSearchGetRequest {
	r.advertiserId = &advertiserId
	return r
}

func (r *ApiOpenApiV10QianchuanToolsLogSearchGetRequest) ObjectType(objectType QianchuanToolsLogSearchV10ObjectType) *ApiOpenApiV10QianchuanToolsLogSearchGetRequest {
	r.objectType = &objectType
	return r
}

// 操作对象ID, 可以为ad_id
func (r *ApiOpenApiV10QianchuanToolsLogSearchGetRequest) ObjectId(objectId int64) *ApiOpenApiV10QianchuanToolsLogSearchGetRequest {
	r.objectId = &objectId
	return r
}

// 操作人id
func (r *ApiOpenApiV10QianchuanToolsLogSearchGetRequest) OperatorId(operatorId []int64) *ApiOpenApiV10QianchuanToolsLogSearchGetRequest {
	r.operatorId = &operatorId
	return r
}

// 日志查询开始时间，格式 \&quot;2019-07-24 21:46:57\&quot; 注意：开始时间不可超过当前时间-180天
func (r *ApiOpenApiV10QianchuanToolsLogSearchGetRequest) StartTime(startTime string) *ApiOpenApiV10QianchuanToolsLogSearchGetRequest {
	r.startTime = &startTime
	return r
}

// 日志查询结束时间，格式 \&quot;2019-07-24 21:46:57\&quot; 注意：结束时间不可超过当前时间-180天
func (r *ApiOpenApiV10QianchuanToolsLogSearchGetRequest) EndTime(endTime string) *ApiOpenApiV10QianchuanToolsLogSearchGetRequest {
	r.endTime = &endTime
	return r
}

// 页码 默认值: 1
func (r *ApiOpenApiV10QianchuanToolsLogSearchGetRequest) Page(page int32) *ApiOpenApiV10QianchuanToolsLogSearchGetRequest {
	r.page = &page
	return r
}

// 页面大小 默认值: 10允许值:1~20
func (r *ApiOpenApiV10QianchuanToolsLogSearchGetRequest) PageSize(pageSize int32) *ApiOpenApiV10QianchuanToolsLogSearchGetRequest {
	r.pageSize = &pageSize
	return r
}

func (r *ApiOpenApiV10QianchuanToolsLogSearchGetRequest) Execute() (*QianchuanToolsLogSearchV10Response, *http.Response, error) {
	return r.ApiService.getExecute(r)
}

func (r *ApiOpenApiV10QianchuanToolsLogSearchGetRequest) AccessToken(accessToken string) *ApiOpenApiV10QianchuanToolsLogSearchGetRequest {
	r.ctx = context.WithValue(r.ctx, config.ContextAccessToken, accessToken)
	return r
}

func (r *ApiOpenApiV10QianchuanToolsLogSearchGetRequest) WithLog(enable bool) *ApiOpenApiV10QianchuanToolsLogSearchGetRequest {
	if enable {
		r.ctx = context.WithValue(r.ctx, config.ContextEnableLog, true)
	}
	return r
}

/*
OpenApiV10QianchuanToolsLogSearchGet Method for OpenApiV10QianchuanToolsLogSearchGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOpenApiV10QianchuanToolsLogSearchGetRequest
*/
func (a *QianchuanToolsLogSearchV10ApiService) Get(ctx context.Context) *ApiOpenApiV10QianchuanToolsLogSearchGetRequest {
	return &ApiOpenApiV10QianchuanToolsLogSearchGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return QianchuanToolsLogSearchV10Response
func (a *QianchuanToolsLogSearchV10ApiService) getExecute(r *ApiOpenApiV10QianchuanToolsLogSearchGetRequest) (*QianchuanToolsLogSearchV10Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           map[string]*FormFileInfo
		localVarReturnValue *QianchuanToolsLogSearchV10Response
	)

	r.ctx = a.client.prepareCtx(r.ctx)

	localBasePath := a.client.Cfg.GetBasePath()

	localVarPath := localBasePath + "/open_api/v1.0/qianchuan/tools/log_search/"

	localVarHeaderParams := make(map[string]string)
	formFiles = make(map[string]*FormFileInfo)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.advertiserId == nil {
		return localVarReturnValue, nil, ReportError("advertiserId is required and must be specified")
	}
	if r.objectType == nil {
		return localVarReturnValue, nil, ReportError("objectType is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "advertiser_id", r.advertiserId)
	if r.objectId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_id", r.objectId)
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "object_type", r.objectType)
	if r.operatorId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "operator_id", r.operatorId)
	}
	if r.startTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_time", r.startTime)
	}
	if r.endTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end_time", r.endTime)
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page)
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize)
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.call(r.ctx, req, &localVarReturnValue)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
