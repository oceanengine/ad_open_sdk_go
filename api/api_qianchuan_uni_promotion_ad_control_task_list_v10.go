/*
Oceanengine Open Api

巨量引擎开放平台 Open Api


*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"context"
	"net/http"
	"net/url"

	"github.com/oceanengine/ad_open_sdk_go/config"
	. "github.com/oceanengine/ad_open_sdk_go/models"
)

// QianchuanUniPromotionAdControlTaskListV10ApiService QianchuanUniPromotionAdControlTaskListV10Api service
type QianchuanUniPromotionAdControlTaskListV10ApiService service

type ApiOpenApiV10QianchuanUniPromotionAdControlTaskListGetRequest struct {
	ctx           context.Context
	ApiService    *QianchuanUniPromotionAdControlTaskListV10ApiService
	advertiserId  *int64
	marketingGoal *QianchuanUniPromotionAdControlTaskListV10MarketingGoal
	adId          *int64
	startTime     *string
	endTime       *string
	scene         *QianchuanUniPromotionAdControlTaskListV10Scene
	fields        *[]*QianchuanUniPromotionAdControlTaskListV10Fields
	filtering     *QianchuanUniPromotionAdControlTaskListV10Filtering
	orderType     *QianchuanUniPromotionAdControlTaskListV10OrderType
	orderField    *string
	page          *int64
	pageSize      *int64
}

func (r *ApiOpenApiV10QianchuanUniPromotionAdControlTaskListGetRequest) AdvertiserId(advertiserId int64) *ApiOpenApiV10QianchuanUniPromotionAdControlTaskListGetRequest {
	r.advertiserId = &advertiserId
	return r
}

func (r *ApiOpenApiV10QianchuanUniPromotionAdControlTaskListGetRequest) MarketingGoal(marketingGoal QianchuanUniPromotionAdControlTaskListV10MarketingGoal) *ApiOpenApiV10QianchuanUniPromotionAdControlTaskListGetRequest {
	r.marketingGoal = &marketingGoal
	return r
}

// 调控的目标全域控计划ID
func (r *ApiOpenApiV10QianchuanUniPromotionAdControlTaskListGetRequest) AdId(adId int64) *ApiOpenApiV10QianchuanUniPromotionAdControlTaskListGetRequest {
	r.adId = &adId
	return r
}

// 数据统计周期 开始时间，格式 2021-04-05 00:00:00
func (r *ApiOpenApiV10QianchuanUniPromotionAdControlTaskListGetRequest) StartTime(startTime string) *ApiOpenApiV10QianchuanUniPromotionAdControlTaskListGetRequest {
	r.startTime = &startTime
	return r
}

// 数据统计周期 开始时间，格式 2021-04-05 00:00:00
func (r *ApiOpenApiV10QianchuanUniPromotionAdControlTaskListGetRequest) EndTime(endTime string) *ApiOpenApiV10QianchuanUniPromotionAdControlTaskListGetRequest {
	r.endTime = &endTime
	return r
}

// 调控任务类型， SMART_BOOST 一键起量
func (r *ApiOpenApiV10QianchuanUniPromotionAdControlTaskListGetRequest) Scene(scene QianchuanUniPromotionAdControlTaskListV10Scene) *ApiOpenApiV10QianchuanUniPromotionAdControlTaskListGetRequest {
	r.scene = &scene
	return r
}

// 查询指标
func (r *ApiOpenApiV10QianchuanUniPromotionAdControlTaskListGetRequest) Fields(fields []*QianchuanUniPromotionAdControlTaskListV10Fields) *ApiOpenApiV10QianchuanUniPromotionAdControlTaskListGetRequest {
	r.fields = &fields
	return r
}

// 过滤器
func (r *ApiOpenApiV10QianchuanUniPromotionAdControlTaskListGetRequest) Filtering(filtering QianchuanUniPromotionAdControlTaskListV10Filtering) *ApiOpenApiV10QianchuanUniPromotionAdControlTaskListGetRequest {
	r.filtering = &filtering
	return r
}

// 排序方式，允许值： ASC 升序（默认）、DESC 降序
func (r *ApiOpenApiV10QianchuanUniPromotionAdControlTaskListGetRequest) OrderType(orderType QianchuanUniPromotionAdControlTaskListV10OrderType) *ApiOpenApiV10QianchuanUniPromotionAdControlTaskListGetRequest {
	r.orderType = &orderType
	return r
}

// 排序字段，默认计划创建时间倒序，同时支持根据消耗指标排序
func (r *ApiOpenApiV10QianchuanUniPromotionAdControlTaskListGetRequest) OrderField(orderField string) *ApiOpenApiV10QianchuanUniPromotionAdControlTaskListGetRequest {
	r.orderField = &orderField
	return r
}

// 页码，默认值：1
func (r *ApiOpenApiV10QianchuanUniPromotionAdControlTaskListGetRequest) Page(page int64) *ApiOpenApiV10QianchuanUniPromotionAdControlTaskListGetRequest {
	r.page = &page
	return r
}

// 页面大小，允许值：10, 20, 50, 100，默认值：10
func (r *ApiOpenApiV10QianchuanUniPromotionAdControlTaskListGetRequest) PageSize(pageSize int64) *ApiOpenApiV10QianchuanUniPromotionAdControlTaskListGetRequest {
	r.pageSize = &pageSize
	return r
}

func (r *ApiOpenApiV10QianchuanUniPromotionAdControlTaskListGetRequest) Execute() (*QianchuanUniPromotionAdControlTaskListV10Response, *http.Response, error) {
	return r.ApiService.getExecute(r)
}

func (r *ApiOpenApiV10QianchuanUniPromotionAdControlTaskListGetRequest) AccessToken(accessToken string) *ApiOpenApiV10QianchuanUniPromotionAdControlTaskListGetRequest {
	r.ctx = context.WithValue(r.ctx, config.ContextAccessToken, accessToken)
	return r
}

func (r *ApiOpenApiV10QianchuanUniPromotionAdControlTaskListGetRequest) WithLog(enable bool) *ApiOpenApiV10QianchuanUniPromotionAdControlTaskListGetRequest {
	if enable {
		r.ctx = context.WithValue(r.ctx, config.ContextEnableLog, true)
	}
	return r
}

/*
OpenApiV10QianchuanUniPromotionAdControlTaskListGet Method for OpenApiV10QianchuanUniPromotionAdControlTaskListGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOpenApiV10QianchuanUniPromotionAdControlTaskListGetRequest
*/
func (a *QianchuanUniPromotionAdControlTaskListV10ApiService) Get(ctx context.Context) *ApiOpenApiV10QianchuanUniPromotionAdControlTaskListGetRequest {
	return &ApiOpenApiV10QianchuanUniPromotionAdControlTaskListGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return QianchuanUniPromotionAdControlTaskListV10Response
func (a *QianchuanUniPromotionAdControlTaskListV10ApiService) getExecute(r *ApiOpenApiV10QianchuanUniPromotionAdControlTaskListGetRequest) (*QianchuanUniPromotionAdControlTaskListV10Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           map[string]*FormFileInfo
		localVarReturnValue *QianchuanUniPromotionAdControlTaskListV10Response
	)

	r.ctx = a.client.prepareCtx(r.ctx)

	localBasePath := a.client.Cfg.GetBasePath()

	localVarPath := localBasePath + "/open_api/v1.0/qianchuan/uni_promotion/ad/control_task/list/"

	localVarHeaderParams := make(map[string]string)
	formFiles = make(map[string]*FormFileInfo)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.advertiserId == nil {
		return localVarReturnValue, nil, ReportError("advertiserId is required and must be specified")
	}
	if r.marketingGoal == nil {
		return localVarReturnValue, nil, ReportError("marketingGoal is required and must be specified")
	}
	if r.adId == nil {
		return localVarReturnValue, nil, ReportError("adId is required and must be specified")
	}
	if r.startTime == nil {
		return localVarReturnValue, nil, ReportError("startTime is required and must be specified")
	}
	if r.endTime == nil {
		return localVarReturnValue, nil, ReportError("endTime is required and must be specified")
	}
	if r.scene == nil {
		return localVarReturnValue, nil, ReportError("scene is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "advertiser_id", r.advertiserId)
	parameterAddToHeaderOrQuery(localVarQueryParams, "marketing_goal", r.marketingGoal)
	parameterAddToHeaderOrQuery(localVarQueryParams, "ad_id", r.adId)
	parameterAddToHeaderOrQuery(localVarQueryParams, "start_time", r.startTime)
	parameterAddToHeaderOrQuery(localVarQueryParams, "end_time", r.endTime)
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields)
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "scene", r.scene)
	if r.filtering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filtering", r.filtering)
	}
	if r.orderType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order_type", r.orderType)
	}
	if r.orderField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order_field", r.orderField)
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page)
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize)
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.call(r.ctx, req, &localVarReturnValue)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
