/*
Oceanengine Open Api

巨量引擎开放平台 Open Api


*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"context"
	"net/http"
	"net/url"

	"github.com/oceanengine/ad_open_sdk_go/config"
	. "github.com/oceanengine/ad_open_sdk_go/models"
)

// ChargeListV30ApiService ChargeListV30Api service
type ChargeListV30ApiService service

type ApiOpenApiV30ChargeListGetRequest struct {
	ctx              context.Context
	ApiService       *ChargeListV30ApiService
	advertiserId     *int64
	chargeTargetType *ChargeListV30ChargeTargetType
	platformList     *[]*ChargeListV30PlatformList
	chargeStatusList *[]*ChargeListV30ChargeStatusList
	chargeTypeList   *[]*ChargeListV30ChargeTypeList
	chargeSourceList *[]*ChargeListV30ChargeSourceList
	startTime        *string
	endTime          *string
	needTotalAmount  *bool
	page             *int64
	pageSize         *int64
}

// 广告主ID
func (r *ApiOpenApiV30ChargeListGetRequest) AdvertiserId(advertiserId int64) *ApiOpenApiV30ChargeListGetRequest {
	r.advertiserId = &advertiserId
	return r
}

// 账户类型，1广告主，2钱包
func (r *ApiOpenApiV30ChargeListGetRequest) ChargeTargetType(chargeTargetType ChargeListV30ChargeTargetType) *ApiOpenApiV30ChargeListGetRequest {
	r.chargeTargetType = &chargeTargetType
	return r
}

// 业务线列表
func (r *ApiOpenApiV30ChargeListGetRequest) PlatformList(platformList []*ChargeListV30PlatformList) *ApiOpenApiV30ChargeListGetRequest {
	r.platformList = &platformList
	return r
}

// 充值状态列表
func (r *ApiOpenApiV30ChargeListGetRequest) ChargeStatusList(chargeStatusList []*ChargeListV30ChargeStatusList) *ApiOpenApiV30ChargeListGetRequest {
	r.chargeStatusList = &chargeStatusList
	return r
}

// 充值类型列表
func (r *ApiOpenApiV30ChargeListGetRequest) ChargeTypeList(chargeTypeList []*ChargeListV30ChargeTypeList) *ApiOpenApiV30ChargeListGetRequest {
	r.chargeTypeList = &chargeTypeList
	return r
}

// 充值来源列表
func (r *ApiOpenApiV30ChargeListGetRequest) ChargeSourceList(chargeSourceList []*ChargeListV30ChargeSourceList) *ApiOpenApiV30ChargeListGetRequest {
	r.chargeSourceList = &chargeSourceList
	return r
}

// 充值起始时间，闭区间，格式：yyyy-MM-dd HH:mm:ss
func (r *ApiOpenApiV30ChargeListGetRequest) StartTime(startTime string) *ApiOpenApiV30ChargeListGetRequest {
	r.startTime = &startTime
	return r
}

// 充值结束时间，开区间，格式：yyyy-MM-dd HH:mm:ss
func (r *ApiOpenApiV30ChargeListGetRequest) EndTime(endTime string) *ApiOpenApiV30ChargeListGetRequest {
	r.endTime = &endTime
	return r
}

// 是否需要金额汇总
func (r *ApiOpenApiV30ChargeListGetRequest) NeedTotalAmount(needTotalAmount bool) *ApiOpenApiV30ChargeListGetRequest {
	r.needTotalAmount = &needTotalAmount
	return r
}

// 页码
func (r *ApiOpenApiV30ChargeListGetRequest) Page(page int64) *ApiOpenApiV30ChargeListGetRequest {
	r.page = &page
	return r
}

// 页面大小
func (r *ApiOpenApiV30ChargeListGetRequest) PageSize(pageSize int64) *ApiOpenApiV30ChargeListGetRequest {
	r.pageSize = &pageSize
	return r
}

func (r *ApiOpenApiV30ChargeListGetRequest) Execute() (*ChargeListV30Response, *http.Response, error) {
	return r.ApiService.getExecute(r)
}

func (r *ApiOpenApiV30ChargeListGetRequest) AccessToken(accessToken string) *ApiOpenApiV30ChargeListGetRequest {
	r.ctx = context.WithValue(r.ctx, config.ContextAccessToken, accessToken)
	return r
}

func (r *ApiOpenApiV30ChargeListGetRequest) WithLog(enable bool) *ApiOpenApiV30ChargeListGetRequest {
	if enable {
		r.ctx = context.WithValue(r.ctx, config.ContextEnableLog, true)
	}
	return r
}

/*
OpenApiV30ChargeListGet Method for OpenApiV30ChargeListGet

根据广告主账号和相应的业务线去查询对应的充值记录

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOpenApiV30ChargeListGetRequest
*/
func (a *ChargeListV30ApiService) Get(ctx context.Context) *ApiOpenApiV30ChargeListGetRequest {
	return &ApiOpenApiV30ChargeListGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ChargeListV30Response
func (a *ChargeListV30ApiService) getExecute(r *ApiOpenApiV30ChargeListGetRequest) (*ChargeListV30Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           map[string]*FormFileInfo
		localVarReturnValue *ChargeListV30Response
	)

	r.ctx = a.client.prepareCtx(r.ctx)

	localBasePath := a.client.Cfg.GetBasePath()

	localVarPath := localBasePath + "/open_api/v3.0/charge/list/"

	localVarHeaderParams := make(map[string]string)
	formFiles = make(map[string]*FormFileInfo)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.advertiserId == nil {
		return localVarReturnValue, nil, ReportError("advertiserId is required and must be specified")
	}
	if *r.advertiserId < 1 {
		return localVarReturnValue, nil, ReportError("advertiserId must be greater than 1")
	}
	if r.chargeTargetType == nil {
		return localVarReturnValue, nil, ReportError("chargeTargetType is required and must be specified")
	}
	if r.platformList == nil {
		return localVarReturnValue, nil, ReportError("platformList is required and must be specified")
	}
	if r.chargeStatusList == nil {
		return localVarReturnValue, nil, ReportError("chargeStatusList is required and must be specified")
	}
	if r.chargeTypeList == nil {
		return localVarReturnValue, nil, ReportError("chargeTypeList is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "advertiser_id", r.advertiserId)
	parameterAddToHeaderOrQuery(localVarQueryParams, "charge_target_type", r.chargeTargetType)
	parameterAddToHeaderOrQuery(localVarQueryParams, "platform_list", r.platformList)
	parameterAddToHeaderOrQuery(localVarQueryParams, "charge_status_list", r.chargeStatusList)
	if r.chargeSourceList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "charge_source_list", r.chargeSourceList)
	}
	if r.startTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_time", r.startTime)
	}
	if r.endTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end_time", r.endTime)
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "charge_type_list", r.chargeTypeList)
	if r.needTotalAmount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "need_total_amount", r.needTotalAmount)
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page)
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize)
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.call(r.ctx, req, &localVarReturnValue)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
