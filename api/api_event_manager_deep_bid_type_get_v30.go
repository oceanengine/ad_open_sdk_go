/*
Oceanengine Open Api

巨量引擎开放平台 Open Api


*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"context"
	"net/http"
	"net/url"

	"github.com/oceanengine/ad_open_sdk_go/config"
	. "github.com/oceanengine/ad_open_sdk_go/models"
)

// EventManagerDeepBidTypeGetV30ApiService EventManagerDeepBidTypeGetV30Api service
type EventManagerDeepBidTypeGetV30ApiService service

type ApiOpenApiV30EventManagerDeepBidTypeGetGetRequest struct {
	ctx                context.Context
	ApiService         *EventManagerDeepBidTypeGetV30ApiService
	advertiserId       *int64
	externalAction     *EventManagerDeepBidTypeGetV30ExternalAction
	assetId            *int64
	deepExternalAction *EventManagerDeepBidTypeGetV30DeepExternalAction
	convertId          *int64
	deliveryMode       *EventManagerDeepBidTypeGetV30DeliveryMode
	landingType        *EventManagerDeepBidTypeGetV30LandingType
	adType             *EventManagerDeepBidTypeGetV30AdType
	marketingGoal      *EventManagerDeepBidTypeGetV30MarketingGoal
	microPromotionType *EventManagerDeepBidTypeGetV30MicroPromotionType
}

// 广告主id
func (r *ApiOpenApiV30EventManagerDeepBidTypeGetGetRequest) AdvertiserId(advertiserId int64) *ApiOpenApiV30EventManagerDeepBidTypeGetGetRequest {
	r.advertiserId = &advertiserId
	return r
}

// 优化目标
func (r *ApiOpenApiV30EventManagerDeepBidTypeGetGetRequest) ExternalAction(externalAction EventManagerDeepBidTypeGetV30ExternalAction) *ApiOpenApiV30EventManagerDeepBidTypeGetGetRequest {
	r.externalAction = &externalAction
	return r
}

// 资产id
func (r *ApiOpenApiV30EventManagerDeepBidTypeGetGetRequest) AssetId(assetId int64) *ApiOpenApiV30EventManagerDeepBidTypeGetGetRequest {
	r.assetId = &assetId
	return r
}

// 深度优化目标，当优化目标不等于AD_CONVERT_TYPE_PAY、AD_CONVERT_TYPE_FORM、AD_CONVERT_TYPE_MULTIPLE时深度优化目标必填
func (r *ApiOpenApiV30EventManagerDeepBidTypeGetGetRequest) DeepExternalAction(deepExternalAction EventManagerDeepBidTypeGetV30DeepExternalAction) *ApiOpenApiV30EventManagerDeepBidTypeGetGetRequest {
	r.deepExternalAction = &deepExternalAction
	return r
}

// 转化跟踪id
func (r *ApiOpenApiV30EventManagerDeepBidTypeGetGetRequest) ConvertId(convertId int64) *ApiOpenApiV30EventManagerDeepBidTypeGetGetRequest {
	r.convertId = &convertId
	return r
}

func (r *ApiOpenApiV30EventManagerDeepBidTypeGetGetRequest) DeliveryMode(deliveryMode EventManagerDeepBidTypeGetV30DeliveryMode) *ApiOpenApiV30EventManagerDeepBidTypeGetGetRequest {
	r.deliveryMode = &deliveryMode
	return r
}

func (r *ApiOpenApiV30EventManagerDeepBidTypeGetGetRequest) LandingType(landingType EventManagerDeepBidTypeGetV30LandingType) *ApiOpenApiV30EventManagerDeepBidTypeGetGetRequest {
	r.landingType = &landingType
	return r
}

func (r *ApiOpenApiV30EventManagerDeepBidTypeGetGetRequest) AdType(adType EventManagerDeepBidTypeGetV30AdType) *ApiOpenApiV30EventManagerDeepBidTypeGetGetRequest {
	r.adType = &adType
	return r
}

func (r *ApiOpenApiV30EventManagerDeepBidTypeGetGetRequest) MarketingGoal(marketingGoal EventManagerDeepBidTypeGetV30MarketingGoal) *ApiOpenApiV30EventManagerDeepBidTypeGetGetRequest {
	r.marketingGoal = &marketingGoal
	return r
}

func (r *ApiOpenApiV30EventManagerDeepBidTypeGetGetRequest) MicroPromotionType(microPromotionType EventManagerDeepBidTypeGetV30MicroPromotionType) *ApiOpenApiV30EventManagerDeepBidTypeGetGetRequest {
	r.microPromotionType = &microPromotionType
	return r
}

func (r *ApiOpenApiV30EventManagerDeepBidTypeGetGetRequest) Execute() (*EventManagerDeepBidTypeGetV30Response, *http.Response, error) {
	return r.ApiService.getExecute(r)
}

func (r *ApiOpenApiV30EventManagerDeepBidTypeGetGetRequest) AccessToken(accessToken string) *ApiOpenApiV30EventManagerDeepBidTypeGetGetRequest {
	r.ctx = context.WithValue(r.ctx, config.ContextAccessToken, accessToken)
	return r
}

func (r *ApiOpenApiV30EventManagerDeepBidTypeGetGetRequest) WithLog(enable bool) *ApiOpenApiV30EventManagerDeepBidTypeGetGetRequest {
	if enable {
		r.ctx = context.WithValue(r.ctx, config.ContextEnableLog, true)
	}
	return r
}

/*
OpenApiV30EventManagerDeepBidTypeGetGet Method for OpenApiV30EventManagerDeepBidTypeGetGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOpenApiV30EventManagerDeepBidTypeGetGetRequest
*/
func (a *EventManagerDeepBidTypeGetV30ApiService) Get(ctx context.Context) *ApiOpenApiV30EventManagerDeepBidTypeGetGetRequest {
	return &ApiOpenApiV30EventManagerDeepBidTypeGetGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return EventManagerDeepBidTypeGetV30Response
func (a *EventManagerDeepBidTypeGetV30ApiService) getExecute(r *ApiOpenApiV30EventManagerDeepBidTypeGetGetRequest) (*EventManagerDeepBidTypeGetV30Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           map[string]*FormFileInfo
		localVarReturnValue *EventManagerDeepBidTypeGetV30Response
	)

	r.ctx = a.client.prepareCtx(r.ctx)

	localBasePath := a.client.Cfg.GetBasePath()

	localVarPath := localBasePath + "/open_api/v3.0/event_manager/deep_bid_type/get/"

	localVarHeaderParams := make(map[string]string)
	formFiles = make(map[string]*FormFileInfo)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.advertiserId == nil {
		return localVarReturnValue, nil, ReportError("advertiserId is required and must be specified")
	}
	if *r.advertiserId < 1 {
		return localVarReturnValue, nil, ReportError("advertiserId must be greater than 1")
	}
	if r.externalAction == nil {
		return localVarReturnValue, nil, ReportError("externalAction is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "advertiser_id", r.advertiserId)
	if r.assetId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "asset_id", r.assetId)
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "external_action", r.externalAction)
	if r.deepExternalAction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deep_external_action", r.deepExternalAction)
	}
	if r.convertId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "convert_id", r.convertId)
	}
	if r.deliveryMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "delivery_mode", r.deliveryMode)
	}
	if r.landingType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "landing_type", r.landingType)
	}
	if r.adType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ad_type", r.adType)
	}
	if r.marketingGoal != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "marketing_goal", r.marketingGoal)
	}
	if r.microPromotionType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "micro_promotion_type", r.microPromotionType)
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.call(r.ctx, req, &localVarReturnValue)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
