/*
Oceanengine Open Api

巨量引擎开放平台 Open Api


*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"context"
	"net/http"
	"net/url"

	"github.com/oceanengine/ad_open_sdk_go/config"
	. "github.com/oceanengine/ad_open_sdk_go/models"
)

// QianchuanAwemeUniPromotionOrderGetV10ApiService QianchuanAwemeUniPromotionOrderGetV10Api service
type QianchuanAwemeUniPromotionOrderGetV10ApiService service

type ApiOpenApiV10QianchuanAwemeUniPromotionOrderGetGetRequest struct {
	ctx           context.Context
	ApiService    *QianchuanAwemeUniPromotionOrderGetV10ApiService
	advertiserId  *int64
	marketingGoal *QianchuanAwemeUniPromotionOrderGetV10MarketingGoal
	filtering     *QianchuanAwemeUniPromotionOrderGetV10Filtering
	orderField    *QianchuanAwemeUniPromotionOrderGetV10OrderField
	cursor        *int64
	count         *QianchuanAwemeUniPromotionOrderGetV10Count
}

// 千川广告主id
func (r *ApiOpenApiV10QianchuanAwemeUniPromotionOrderGetGetRequest) AdvertiserId(advertiserId int64) *ApiOpenApiV10QianchuanAwemeUniPromotionOrderGetGetRequest {
	r.advertiserId = &advertiserId
	return r
}

func (r *ApiOpenApiV10QianchuanAwemeUniPromotionOrderGetGetRequest) MarketingGoal(marketingGoal QianchuanAwemeUniPromotionOrderGetV10MarketingGoal) *ApiOpenApiV10QianchuanAwemeUniPromotionOrderGetGetRequest {
	r.marketingGoal = &marketingGoal
	return r
}

func (r *ApiOpenApiV10QianchuanAwemeUniPromotionOrderGetGetRequest) Filtering(filtering QianchuanAwemeUniPromotionOrderGetV10Filtering) *ApiOpenApiV10QianchuanAwemeUniPromotionOrderGetGetRequest {
	r.filtering = &filtering
	return r
}

func (r *ApiOpenApiV10QianchuanAwemeUniPromotionOrderGetGetRequest) OrderField(orderField QianchuanAwemeUniPromotionOrderGetV10OrderField) *ApiOpenApiV10QianchuanAwemeUniPromotionOrderGetGetRequest {
	r.orderField = &orderField
	return r
}

func (r *ApiOpenApiV10QianchuanAwemeUniPromotionOrderGetGetRequest) Cursor(cursor int64) *ApiOpenApiV10QianchuanAwemeUniPromotionOrderGetGetRequest {
	r.cursor = &cursor
	return r
}

func (r *ApiOpenApiV10QianchuanAwemeUniPromotionOrderGetGetRequest) Count(count QianchuanAwemeUniPromotionOrderGetV10Count) *ApiOpenApiV10QianchuanAwemeUniPromotionOrderGetGetRequest {
	r.count = &count
	return r
}

func (r *ApiOpenApiV10QianchuanAwemeUniPromotionOrderGetGetRequest) Execute() (*QianchuanAwemeUniPromotionOrderGetV10Response, *http.Response, error) {
	return r.ApiService.getExecute(r)
}

func (r *ApiOpenApiV10QianchuanAwemeUniPromotionOrderGetGetRequest) AccessToken(accessToken string) *ApiOpenApiV10QianchuanAwemeUniPromotionOrderGetGetRequest {
	r.ctx = context.WithValue(r.ctx, config.ContextAccessToken, accessToken)
	return r
}

func (r *ApiOpenApiV10QianchuanAwemeUniPromotionOrderGetGetRequest) WithLog(enable bool) *ApiOpenApiV10QianchuanAwemeUniPromotionOrderGetGetRequest {
	if enable {
		r.ctx = context.WithValue(r.ctx, config.ContextEnableLog, true)
	}
	return r
}

/*
OpenApiV10QianchuanAwemeUniPromotionOrderGetGet Method for OpenApiV10QianchuanAwemeUniPromotionOrderGetGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOpenApiV10QianchuanAwemeUniPromotionOrderGetGetRequest
*/
func (a *QianchuanAwemeUniPromotionOrderGetV10ApiService) Get(ctx context.Context) *ApiOpenApiV10QianchuanAwemeUniPromotionOrderGetGetRequest {
	return &ApiOpenApiV10QianchuanAwemeUniPromotionOrderGetGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return QianchuanAwemeUniPromotionOrderGetV10Response
func (a *QianchuanAwemeUniPromotionOrderGetV10ApiService) getExecute(r *ApiOpenApiV10QianchuanAwemeUniPromotionOrderGetGetRequest) (*QianchuanAwemeUniPromotionOrderGetV10Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           map[string]*FormFileInfo
		localVarReturnValue *QianchuanAwemeUniPromotionOrderGetV10Response
	)

	r.ctx = a.client.prepareCtx(r.ctx)

	localBasePath := a.client.Cfg.GetBasePath()

	localVarPath := localBasePath + "/open_api/v1.0/qianchuan/aweme/uni_promotion/order/get/"

	localVarHeaderParams := make(map[string]string)
	formFiles = make(map[string]*FormFileInfo)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.advertiserId == nil {
		return localVarReturnValue, nil, ReportError("advertiserId is required and must be specified")
	}
	if r.marketingGoal == nil {
		return localVarReturnValue, nil, ReportError("marketingGoal is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "advertiser_id", r.advertiserId)
	parameterAddToHeaderOrQuery(localVarQueryParams, "marketing_goal", r.marketingGoal)
	if r.filtering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filtering", r.filtering)
	}
	if r.orderField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order_field", r.orderField)
	}
	if r.cursor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cursor", r.cursor)
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count)
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.call(r.ctx, req, &localVarReturnValue)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
