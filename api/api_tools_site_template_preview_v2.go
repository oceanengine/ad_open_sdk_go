/*
Oceanengine Open Api

巨量引擎开放平台 Open Api


*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"context"
	"net/http"
	"net/url"

	"github.com/oceanengine/ad_open_sdk_go/config"
	. "github.com/oceanengine/ad_open_sdk_go/models"
)

// ToolsSiteTemplatePreviewV2ApiService ToolsSiteTemplatePreviewV2Api service
type ToolsSiteTemplatePreviewV2ApiService service

type ApiOpenApi2ToolsSiteTemplatePreviewGetRequest struct {
	ctx          context.Context
	ApiService   *ToolsSiteTemplatePreviewV2ApiService
	advertiserId *int64
	templateId   *int64
}

// 广告主ID
func (r *ApiOpenApi2ToolsSiteTemplatePreviewGetRequest) AdvertiserId(advertiserId int64) *ApiOpenApi2ToolsSiteTemplatePreviewGetRequest {
	r.advertiserId = &advertiserId
	return r
}

// 模板ID
func (r *ApiOpenApi2ToolsSiteTemplatePreviewGetRequest) TemplateId(templateId int64) *ApiOpenApi2ToolsSiteTemplatePreviewGetRequest {
	r.templateId = &templateId
	return r
}

func (r *ApiOpenApi2ToolsSiteTemplatePreviewGetRequest) Execute() (*ToolsSiteTemplatePreviewV2Response, *http.Response, error) {
	return r.ApiService.getExecute(r)
}

func (r *ApiOpenApi2ToolsSiteTemplatePreviewGetRequest) AccessToken(accessToken string) *ApiOpenApi2ToolsSiteTemplatePreviewGetRequest {
	r.ctx = context.WithValue(r.ctx, config.ContextAccessToken, accessToken)
	return r
}

func (r *ApiOpenApi2ToolsSiteTemplatePreviewGetRequest) WithLog(enable bool) *ApiOpenApi2ToolsSiteTemplatePreviewGetRequest {
	if enable {
		r.ctx = context.WithValue(r.ctx, config.ContextEnableLog, true)
	}
	return r
}

/*
OpenApi2ToolsSiteTemplatePreviewGet Method for OpenApi2ToolsSiteTemplatePreviewGet

通过此接口，用户可以预览通过【基于站点创建模板】接口创建的落地页模板。

> 需要注意的是，落地页模板的预览链接有效时间为20分钟。

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOpenApi2ToolsSiteTemplatePreviewGetRequest
*/
func (a *ToolsSiteTemplatePreviewV2ApiService) Get(ctx context.Context) *ApiOpenApi2ToolsSiteTemplatePreviewGetRequest {
	return &ApiOpenApi2ToolsSiteTemplatePreviewGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ToolsSiteTemplatePreviewV2Response
func (a *ToolsSiteTemplatePreviewV2ApiService) getExecute(r *ApiOpenApi2ToolsSiteTemplatePreviewGetRequest) (*ToolsSiteTemplatePreviewV2Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           map[string]*FormFileInfo
		localVarReturnValue *ToolsSiteTemplatePreviewV2Response
	)

	r.ctx = a.client.prepareCtx(r.ctx)

	localBasePath := a.client.Cfg.GetBasePath()

	localVarPath := localBasePath + "/open_api/2/tools/site_template/preview/"

	localVarHeaderParams := make(map[string]string)
	formFiles = make(map[string]*FormFileInfo)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.advertiserId == nil {
		return localVarReturnValue, nil, ReportError("advertiserId is required and must be specified")
	}
	if r.templateId == nil {
		return localVarReturnValue, nil, ReportError("templateId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "advertiser_id", r.advertiserId)
	parameterAddToHeaderOrQuery(localVarQueryParams, "template_id", r.templateId)
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.call(r.ctx, req, &localVarReturnValue)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
