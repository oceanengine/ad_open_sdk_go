/*
Oceanengine Open Api

巨量引擎开放平台 Open Api


*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"context"
	"net/http"
	"net/url"

	"github.com/oceanengine/ad_open_sdk_go/config"
	. "github.com/oceanengine/ad_open_sdk_go/models"
)

// StarMcnProviderGetTaskAuthorListV2ApiService StarMcnProviderGetTaskAuthorListV2Api service
type StarMcnProviderGetTaskAuthorListV2ApiService service

type ApiOpenApi2StarMcnProviderGetTaskAuthorListGetRequest struct {
	ctx               context.Context
	ApiService        *StarMcnProviderGetTaskAuthorListV2ApiService
	starId            *int64
	taskId            *int64
	page              *int32
	limit             *int32
	authorOrderStatus *int64
}

func (r *ApiOpenApi2StarMcnProviderGetTaskAuthorListGetRequest) StarId(starId int64) *ApiOpenApi2StarMcnProviderGetTaskAuthorListGetRequest {
	r.starId = &starId
	return r
}

func (r *ApiOpenApi2StarMcnProviderGetTaskAuthorListGetRequest) TaskId(taskId int64) *ApiOpenApi2StarMcnProviderGetTaskAuthorListGetRequest {
	r.taskId = &taskId
	return r
}

func (r *ApiOpenApi2StarMcnProviderGetTaskAuthorListGetRequest) Page(page int32) *ApiOpenApi2StarMcnProviderGetTaskAuthorListGetRequest {
	r.page = &page
	return r
}

func (r *ApiOpenApi2StarMcnProviderGetTaskAuthorListGetRequest) Limit(limit int32) *ApiOpenApi2StarMcnProviderGetTaskAuthorListGetRequest {
	r.limit = &limit
	return r
}

func (r *ApiOpenApi2StarMcnProviderGetTaskAuthorListGetRequest) AuthorOrderStatus(authorOrderStatus int64) *ApiOpenApi2StarMcnProviderGetTaskAuthorListGetRequest {
	r.authorOrderStatus = &authorOrderStatus
	return r
}

func (r *ApiOpenApi2StarMcnProviderGetTaskAuthorListGetRequest) Execute() (*StarMcnProviderGetTaskAuthorListV2Response, *http.Response, error) {
	return r.ApiService.getExecute(r)
}

func (r *ApiOpenApi2StarMcnProviderGetTaskAuthorListGetRequest) AccessToken(accessToken string) *ApiOpenApi2StarMcnProviderGetTaskAuthorListGetRequest {
	r.ctx = context.WithValue(r.ctx, config.ContextAccessToken, accessToken)
	return r
}

func (r *ApiOpenApi2StarMcnProviderGetTaskAuthorListGetRequest) WithLog(enable bool) *ApiOpenApi2StarMcnProviderGetTaskAuthorListGetRequest {
	if enable {
		r.ctx = context.WithValue(r.ctx, config.ContextEnableLog, true)
	}
	return r
}

/*
OpenApi2StarMcnProviderGetTaskAuthorListGet Method for OpenApi2StarMcnProviderGetTaskAuthorListGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOpenApi2StarMcnProviderGetTaskAuthorListGetRequest
*/
func (a *StarMcnProviderGetTaskAuthorListV2ApiService) Get(ctx context.Context) *ApiOpenApi2StarMcnProviderGetTaskAuthorListGetRequest {
	return &ApiOpenApi2StarMcnProviderGetTaskAuthorListGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return StarMcnProviderGetTaskAuthorListV2Response
func (a *StarMcnProviderGetTaskAuthorListV2ApiService) getExecute(r *ApiOpenApi2StarMcnProviderGetTaskAuthorListGetRequest) (*StarMcnProviderGetTaskAuthorListV2Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           map[string]*FormFileInfo
		localVarReturnValue *StarMcnProviderGetTaskAuthorListV2Response
	)

	r.ctx = a.client.prepareCtx(r.ctx)

	localBasePath := a.client.Cfg.GetBasePath()

	localVarPath := localBasePath + "/open_api/2/star/mcn/provider_get_task_author_list/"

	localVarHeaderParams := make(map[string]string)
	formFiles = make(map[string]*FormFileInfo)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.starId == nil {
		return localVarReturnValue, nil, ReportError("starId is required and must be specified")
	}
	if r.taskId == nil {
		return localVarReturnValue, nil, ReportError("taskId is required and must be specified")
	}
	if r.page == nil {
		return localVarReturnValue, nil, ReportError("page is required and must be specified")
	}
	if r.limit == nil {
		return localVarReturnValue, nil, ReportError("limit is required and must be specified")
	}
	if *r.limit < 1 {
		return localVarReturnValue, nil, ReportError("limit must be greater than 1")
	}
	if *r.limit > 50 {
		return localVarReturnValue, nil, ReportError("limit must be less than 50")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "star_id", r.starId)
	parameterAddToHeaderOrQuery(localVarQueryParams, "task_id", r.taskId)
	if r.authorOrderStatus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "author_order_status", r.authorOrderStatus)
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page)
	parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit)
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.call(r.ctx, req, &localVarReturnValue)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
