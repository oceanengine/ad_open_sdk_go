/*
Oceanengine Open Api

巨量引擎开放平台 Open Api


*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"context"
	"net/http"
	"net/url"

	"github.com/oceanengine/ad_open_sdk_go/config"
	. "github.com/oceanengine/ad_open_sdk_go/models"
)

// SubscribeAccountsListV30ApiService SubscribeAccountsListV30Api service
type SubscribeAccountsListV30ApiService service

type ApiOpenApiV30SubscribeAccountsListGetRequest struct {
	ctx                  context.Context
	ApiService           *SubscribeAccountsListV30ApiService
	aPPAccessToken       *string
	appId                *int64
	subscribeTaskId      *int64
	events               *[]string
	coreUserId           *int64
	advertiserIds        *[]int64
	statuses             *[]*SubscribeAccountsListV30Statuses
	cursor               *int64
	count                *int64
	subscribePackageType *SubscribeAccountsListV30SubscribePackageType
	source               *SubscribeAccountsListV30Source
	accountType          *SubscribeAccountsListV30AccountType
}

func (r *ApiOpenApiV30SubscribeAccountsListGetRequest) APPAccessToken(aPPAccessToken string) *ApiOpenApiV30SubscribeAccountsListGetRequest {
	r.aPPAccessToken = &aPPAccessToken
	return r
}

func (r *ApiOpenApiV30SubscribeAccountsListGetRequest) AppId(appId int64) *ApiOpenApiV30SubscribeAccountsListGetRequest {
	r.appId = &appId
	return r
}

func (r *ApiOpenApiV30SubscribeAccountsListGetRequest) SubscribeTaskId(subscribeTaskId int64) *ApiOpenApiV30SubscribeAccountsListGetRequest {
	r.subscribeTaskId = &subscribeTaskId
	return r
}

func (r *ApiOpenApiV30SubscribeAccountsListGetRequest) Events(events []string) *ApiOpenApiV30SubscribeAccountsListGetRequest {
	r.events = &events
	return r
}

func (r *ApiOpenApiV30SubscribeAccountsListGetRequest) CoreUserId(coreUserId int64) *ApiOpenApiV30SubscribeAccountsListGetRequest {
	r.coreUserId = &coreUserId
	return r
}

func (r *ApiOpenApiV30SubscribeAccountsListGetRequest) AdvertiserIds(advertiserIds []int64) *ApiOpenApiV30SubscribeAccountsListGetRequest {
	r.advertiserIds = &advertiserIds
	return r
}

func (r *ApiOpenApiV30SubscribeAccountsListGetRequest) Statuses(statuses []*SubscribeAccountsListV30Statuses) *ApiOpenApiV30SubscribeAccountsListGetRequest {
	r.statuses = &statuses
	return r
}

func (r *ApiOpenApiV30SubscribeAccountsListGetRequest) Cursor(cursor int64) *ApiOpenApiV30SubscribeAccountsListGetRequest {
	r.cursor = &cursor
	return r
}

func (r *ApiOpenApiV30SubscribeAccountsListGetRequest) Count(count int64) *ApiOpenApiV30SubscribeAccountsListGetRequest {
	r.count = &count
	return r
}

func (r *ApiOpenApiV30SubscribeAccountsListGetRequest) SubscribePackageType(subscribePackageType SubscribeAccountsListV30SubscribePackageType) *ApiOpenApiV30SubscribeAccountsListGetRequest {
	r.subscribePackageType = &subscribePackageType
	return r
}

func (r *ApiOpenApiV30SubscribeAccountsListGetRequest) Source(source SubscribeAccountsListV30Source) *ApiOpenApiV30SubscribeAccountsListGetRequest {
	r.source = &source
	return r
}

func (r *ApiOpenApiV30SubscribeAccountsListGetRequest) AccountType(accountType SubscribeAccountsListV30AccountType) *ApiOpenApiV30SubscribeAccountsListGetRequest {
	r.accountType = &accountType
	return r
}

func (r *ApiOpenApiV30SubscribeAccountsListGetRequest) Execute() (*SubscribeAccountsListV30Response, *http.Response, error) {
	return r.ApiService.getExecute(r)
}

func (r *ApiOpenApiV30SubscribeAccountsListGetRequest) AccessToken(accessToken string) *ApiOpenApiV30SubscribeAccountsListGetRequest {
	r.ctx = context.WithValue(r.ctx, config.ContextAccessToken, accessToken)
	return r
}

func (r *ApiOpenApiV30SubscribeAccountsListGetRequest) WithLog(enable bool) *ApiOpenApiV30SubscribeAccountsListGetRequest {
	if enable {
		r.ctx = context.WithValue(r.ctx, config.ContextEnableLog, true)
	}
	return r
}

/*
OpenApiV30SubscribeAccountsListGet Method for OpenApiV30SubscribeAccountsListGet

查询订阅任务所订阅的 Adv

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOpenApiV30SubscribeAccountsListGetRequest
*/
func (a *SubscribeAccountsListV30ApiService) Get(ctx context.Context) *ApiOpenApiV30SubscribeAccountsListGetRequest {
	return &ApiOpenApiV30SubscribeAccountsListGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return SubscribeAccountsListV30Response
func (a *SubscribeAccountsListV30ApiService) getExecute(r *ApiOpenApiV30SubscribeAccountsListGetRequest) (*SubscribeAccountsListV30Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           map[string]*FormFileInfo
		localVarReturnValue *SubscribeAccountsListV30Response
	)

	r.ctx = a.client.prepareCtx(r.ctx)

	localBasePath := a.client.Cfg.GetBasePath()

	localVarPath := localBasePath + "/open_api/v3.0/subscribe/accounts/list/"

	localVarHeaderParams := make(map[string]string)
	formFiles = make(map[string]*FormFileInfo)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.aPPAccessToken == nil {
		return localVarReturnValue, nil, ReportError("aPPAccessToken is required and must be specified")
	}
	if r.appId == nil {
		return localVarReturnValue, nil, ReportError("appId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "app_id", r.appId)
	if r.subscribeTaskId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subscribe_task_id", r.subscribeTaskId)
	}
	if r.events != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "events", r.events)
	}
	if r.coreUserId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "core_user_id", r.coreUserId)
	}
	if r.advertiserIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "advertiser_ids", r.advertiserIds)
	}
	if r.statuses != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "statuses", r.statuses)
	}
	if r.cursor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cursor", r.cursor)
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count)
	}
	if r.subscribePackageType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subscribe_package_type", r.subscribePackageType)
	}
	if r.source != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "source", r.source)
	}
	if r.accountType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "account_type", r.accountType)
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	parameterAddToHeaderOrQuery(localVarHeaderParams, "APP-Access-Token", r.aPPAccessToken)
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.call(r.ctx, req, &localVarReturnValue)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
