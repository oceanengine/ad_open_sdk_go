/*
Oceanengine Open Api

巨量引擎开放平台 Open Api


*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"context"
	"net/http"
	"net/url"

	"github.com/oceanengine/ad_open_sdk_go/config"
	. "github.com/oceanengine/ad_open_sdk_go/models"
)

// LocalAwemeAuthorizedGetV30ApiService LocalAwemeAuthorizedGetV30Api service
type LocalAwemeAuthorizedGetV30ApiService service

type ApiOpenApiV30LocalAwemeAuthorizedGetGetRequest struct {
	ctx            context.Context
	ApiService     *LocalAwemeAuthorizedGetV30ApiService
	localAccountId *int64
	marketingGoal  *LocalAwemeAuthorizedGetV30MarketingGoal
	filtering      *LocalAwemeAuthorizedGetV30Filtering
	page           *int64
	pageSize       *int64
}

// 广告主id
func (r *ApiOpenApiV30LocalAwemeAuthorizedGetGetRequest) LocalAccountId(localAccountId int64) *ApiOpenApiV30LocalAwemeAuthorizedGetGetRequest {
	r.localAccountId = &localAccountId
	return r
}

// 抖音号使用场景
func (r *ApiOpenApiV30LocalAwemeAuthorizedGetGetRequest) MarketingGoal(marketingGoal LocalAwemeAuthorizedGetV30MarketingGoal) *ApiOpenApiV30LocalAwemeAuthorizedGetGetRequest {
	r.marketingGoal = &marketingGoal
	return r
}

// 过滤器
func (r *ApiOpenApiV30LocalAwemeAuthorizedGetGetRequest) Filtering(filtering LocalAwemeAuthorizedGetV30Filtering) *ApiOpenApiV30LocalAwemeAuthorizedGetGetRequest {
	r.filtering = &filtering
	return r
}

// 页码
func (r *ApiOpenApiV30LocalAwemeAuthorizedGetGetRequest) Page(page int64) *ApiOpenApiV30LocalAwemeAuthorizedGetGetRequest {
	r.page = &page
	return r
}

// 页面大小
func (r *ApiOpenApiV30LocalAwemeAuthorizedGetGetRequest) PageSize(pageSize int64) *ApiOpenApiV30LocalAwemeAuthorizedGetGetRequest {
	r.pageSize = &pageSize
	return r
}

func (r *ApiOpenApiV30LocalAwemeAuthorizedGetGetRequest) Execute() (*LocalAwemeAuthorizedGetV30Response, *http.Response, error) {
	return r.ApiService.getExecute(r)
}

func (r *ApiOpenApiV30LocalAwemeAuthorizedGetGetRequest) AccessToken(accessToken string) *ApiOpenApiV30LocalAwemeAuthorizedGetGetRequest {
	r.ctx = context.WithValue(r.ctx, config.ContextAccessToken, accessToken)
	return r
}

func (r *ApiOpenApiV30LocalAwemeAuthorizedGetGetRequest) WithLog(enable bool) *ApiOpenApiV30LocalAwemeAuthorizedGetGetRequest {
	if enable {
		r.ctx = context.WithValue(r.ctx, config.ContextEnableLog, true)
	}
	return r
}

/*
OpenApiV30LocalAwemeAuthorizedGetGet Method for OpenApiV30LocalAwemeAuthorizedGetGet

获取本地推创编可用抖音号

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOpenApiV30LocalAwemeAuthorizedGetGetRequest
*/
func (a *LocalAwemeAuthorizedGetV30ApiService) Get(ctx context.Context) *ApiOpenApiV30LocalAwemeAuthorizedGetGetRequest {
	return &ApiOpenApiV30LocalAwemeAuthorizedGetGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return LocalAwemeAuthorizedGetV30Response
func (a *LocalAwemeAuthorizedGetV30ApiService) getExecute(r *ApiOpenApiV30LocalAwemeAuthorizedGetGetRequest) (*LocalAwemeAuthorizedGetV30Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           map[string]*FormFileInfo
		localVarReturnValue *LocalAwemeAuthorizedGetV30Response
	)

	r.ctx = a.client.prepareCtx(r.ctx)

	localBasePath := a.client.Cfg.GetBasePath()

	localVarPath := localBasePath + "/open_api/v3.0/local/aweme/authorized/get/"

	localVarHeaderParams := make(map[string]string)
	formFiles = make(map[string]*FormFileInfo)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.localAccountId == nil {
		return localVarReturnValue, nil, ReportError("localAccountId is required and must be specified")
	}
	if r.marketingGoal == nil {
		return localVarReturnValue, nil, ReportError("marketingGoal is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "local_account_id", r.localAccountId)
	if r.filtering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filtering", r.filtering)
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page)
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize)
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "marketing_goal", r.marketingGoal)
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.call(r.ctx, req, &localVarReturnValue)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
