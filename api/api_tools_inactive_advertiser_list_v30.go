/*
Oceanengine Open Api

巨量引擎开放平台 Open Api


*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"context"
	"net/http"
	"net/url"

	"github.com/oceanengine/ad_open_sdk_go/config"
	. "github.com/oceanengine/ad_open_sdk_go/models"
)

// ToolsInactiveAdvertiserListV30ApiService ToolsInactiveAdvertiserListV30Api service
type ToolsInactiveAdvertiserListV30ApiService service

type ApiOpenApiV30ToolsInactiveAdvertiserListGetRequest struct {
	ctx            context.Context
	ApiService     *ToolsInactiveAdvertiserListV30ApiService
	appId          *int64
	cursor         *int64
	count          *int32
	advertiserType *ToolsInactiveAdvertiserListV30AdvertiserType
}

func (r *ApiOpenApiV30ToolsInactiveAdvertiserListGetRequest) AppId(appId int64) *ApiOpenApiV30ToolsInactiveAdvertiserListGetRequest {
	r.appId = &appId
	return r
}

func (r *ApiOpenApiV30ToolsInactiveAdvertiserListGetRequest) Cursor(cursor int64) *ApiOpenApiV30ToolsInactiveAdvertiserListGetRequest {
	r.cursor = &cursor
	return r
}

func (r *ApiOpenApiV30ToolsInactiveAdvertiserListGetRequest) Count(count int32) *ApiOpenApiV30ToolsInactiveAdvertiserListGetRequest {
	r.count = &count
	return r
}

func (r *ApiOpenApiV30ToolsInactiveAdvertiserListGetRequest) AdvertiserType(advertiserType ToolsInactiveAdvertiserListV30AdvertiserType) *ApiOpenApiV30ToolsInactiveAdvertiserListGetRequest {
	r.advertiserType = &advertiserType
	return r
}

func (r *ApiOpenApiV30ToolsInactiveAdvertiserListGetRequest) Execute() (*ToolsInactiveAdvertiserListV30Response, *http.Response, error) {
	return r.ApiService.getExecute(r)
}

func (r *ApiOpenApiV30ToolsInactiveAdvertiserListGetRequest) AccessToken(accessToken string) *ApiOpenApiV30ToolsInactiveAdvertiserListGetRequest {
	r.ctx = context.WithValue(r.ctx, config.ContextAccessToken, accessToken)
	return r
}

func (r *ApiOpenApiV30ToolsInactiveAdvertiserListGetRequest) WithLog(enable bool) *ApiOpenApiV30ToolsInactiveAdvertiserListGetRequest {
	if enable {
		r.ctx = context.WithValue(r.ctx, config.ContextEnableLog, true)
	}
	return r
}

/*
OpenApiV30ToolsInactiveAdvertiserListGet Method for OpenApiV30ToolsInactiveAdvertiserListGet

查询近期请求记录中不活跃的账户列表

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOpenApiV30ToolsInactiveAdvertiserListGetRequest
*/
func (a *ToolsInactiveAdvertiserListV30ApiService) Get(ctx context.Context) *ApiOpenApiV30ToolsInactiveAdvertiserListGetRequest {
	return &ApiOpenApiV30ToolsInactiveAdvertiserListGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ToolsInactiveAdvertiserListV30Response
func (a *ToolsInactiveAdvertiserListV30ApiService) getExecute(r *ApiOpenApiV30ToolsInactiveAdvertiserListGetRequest) (*ToolsInactiveAdvertiserListV30Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           map[string]*FormFileInfo
		localVarReturnValue *ToolsInactiveAdvertiserListV30Response
	)

	r.ctx = a.client.prepareCtx(r.ctx)

	localBasePath := a.client.Cfg.GetBasePath()

	localVarPath := localBasePath + "/open_api/v3.0/tools/inactive_advertiser/list/"

	localVarHeaderParams := make(map[string]string)
	formFiles = make(map[string]*FormFileInfo)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.appId == nil {
		return localVarReturnValue, nil, ReportError("appId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "app_id", r.appId)
	if r.cursor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cursor", r.cursor)
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count)
	}
	if r.advertiserType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "advertiser_type", r.advertiserType)
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.call(r.ctx, req, &localVarReturnValue)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
