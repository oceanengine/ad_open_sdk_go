/*
Oceanengine Open Api

巨量引擎开放平台 Open Api


*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"context"
	"net/http"
	"net/url"

	"github.com/oceanengine/ad_open_sdk_go/config"
	. "github.com/oceanengine/ad_open_sdk_go/models"
)

// ReportBrandAgentDataV30ApiService ReportBrandAgentDataV30Api service
type ReportBrandAgentDataV30ApiService service

type ApiOpenApiV30ReportBrandAgentDataGetRequest struct {
	ctx            context.Context
	ApiService     *ReportBrandAgentDataV30ApiService
	advertiserId   *int64
	dataReportType *ReportBrandAgentDataV30DataReportType
	startTime      *string
	endTime        *string
	timeDimension  *ReportBrandAgentDataV30TimeDimension
	pageType       *ReportBrandAgentDataV30PageType
	filter         *ReportBrandAgentDataV30Filter
	metrics        *[]string
	page           *ReportBrandAgentDataV30Page
}

func (r *ApiOpenApiV30ReportBrandAgentDataGetRequest) AdvertiserId(advertiserId int64) *ApiOpenApiV30ReportBrandAgentDataGetRequest {
	r.advertiserId = &advertiserId
	return r
}

func (r *ApiOpenApiV30ReportBrandAgentDataGetRequest) DataReportType(dataReportType ReportBrandAgentDataV30DataReportType) *ApiOpenApiV30ReportBrandAgentDataGetRequest {
	r.dataReportType = &dataReportType
	return r
}

func (r *ApiOpenApiV30ReportBrandAgentDataGetRequest) StartTime(startTime string) *ApiOpenApiV30ReportBrandAgentDataGetRequest {
	r.startTime = &startTime
	return r
}

func (r *ApiOpenApiV30ReportBrandAgentDataGetRequest) EndTime(endTime string) *ApiOpenApiV30ReportBrandAgentDataGetRequest {
	r.endTime = &endTime
	return r
}

// 按时间维度拆分
func (r *ApiOpenApiV30ReportBrandAgentDataGetRequest) TimeDimension(timeDimension ReportBrandAgentDataV30TimeDimension) *ApiOpenApiV30ReportBrandAgentDataGetRequest {
	r.timeDimension = &timeDimension
	return r
}

func (r *ApiOpenApiV30ReportBrandAgentDataGetRequest) PageType(pageType ReportBrandAgentDataV30PageType) *ApiOpenApiV30ReportBrandAgentDataGetRequest {
	r.pageType = &pageType
	return r
}

func (r *ApiOpenApiV30ReportBrandAgentDataGetRequest) Filter(filter ReportBrandAgentDataV30Filter) *ApiOpenApiV30ReportBrandAgentDataGetRequest {
	r.filter = &filter
	return r
}

func (r *ApiOpenApiV30ReportBrandAgentDataGetRequest) Metrics(metrics []string) *ApiOpenApiV30ReportBrandAgentDataGetRequest {
	r.metrics = &metrics
	return r
}

func (r *ApiOpenApiV30ReportBrandAgentDataGetRequest) Page(page ReportBrandAgentDataV30Page) *ApiOpenApiV30ReportBrandAgentDataGetRequest {
	r.page = &page
	return r
}

func (r *ApiOpenApiV30ReportBrandAgentDataGetRequest) Execute() (*ReportBrandAgentDataV30Response, *http.Response, error) {
	return r.ApiService.getExecute(r)
}

func (r *ApiOpenApiV30ReportBrandAgentDataGetRequest) AccessToken(accessToken string) *ApiOpenApiV30ReportBrandAgentDataGetRequest {
	r.ctx = context.WithValue(r.ctx, config.ContextAccessToken, accessToken)
	return r
}

func (r *ApiOpenApiV30ReportBrandAgentDataGetRequest) WithLog(enable bool) *ApiOpenApiV30ReportBrandAgentDataGetRequest {
	if enable {
		r.ctx = context.WithValue(r.ctx, config.ContextEnableLog, true)
	}
	return r
}

/*
OpenApiV30ReportBrandAgentDataGet Method for OpenApiV30ReportBrandAgentDataGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOpenApiV30ReportBrandAgentDataGetRequest
*/
func (a *ReportBrandAgentDataV30ApiService) Get(ctx context.Context) *ApiOpenApiV30ReportBrandAgentDataGetRequest {
	return &ApiOpenApiV30ReportBrandAgentDataGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ReportBrandAgentDataV30Response
func (a *ReportBrandAgentDataV30ApiService) getExecute(r *ApiOpenApiV30ReportBrandAgentDataGetRequest) (*ReportBrandAgentDataV30Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           map[string]*FormFileInfo
		localVarReturnValue *ReportBrandAgentDataV30Response
	)

	r.ctx = a.client.prepareCtx(r.ctx)

	localBasePath := a.client.Cfg.GetBasePath()

	localVarPath := localBasePath + "/open_api/v3.0/report/brand/agent/data/"

	localVarHeaderParams := make(map[string]string)
	formFiles = make(map[string]*FormFileInfo)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.advertiserId == nil {
		return localVarReturnValue, nil, ReportError("advertiserId is required and must be specified")
	}
	if r.dataReportType == nil {
		return localVarReturnValue, nil, ReportError("dataReportType is required and must be specified")
	}
	if r.startTime == nil {
		return localVarReturnValue, nil, ReportError("startTime is required and must be specified")
	}
	if r.endTime == nil {
		return localVarReturnValue, nil, ReportError("endTime is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "advertiser_id", r.advertiserId)
	parameterAddToHeaderOrQuery(localVarQueryParams, "data_report_type", r.dataReportType)
	parameterAddToHeaderOrQuery(localVarQueryParams, "start_time", r.startTime)
	parameterAddToHeaderOrQuery(localVarQueryParams, "end_time", r.endTime)
	if r.timeDimension != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "time_dimension", r.timeDimension)
	}
	if r.pageType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_type", r.pageType)
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter)
	}
	if r.metrics != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "metrics", r.metrics)
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page)
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.call(r.ctx, req, &localVarReturnValue)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
