/*
Oceanengine Open Api

巨量引擎开放平台 Open Api


*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"context"
	"net/http"
	"net/url"

	"github.com/oceanengine/ad_open_sdk_go/config"
	. "github.com/oceanengine/ad_open_sdk_go/models"
)

// AicElementGetV30ApiService AicElementGetV30Api service
type AicElementGetV30ApiService service

type ApiOpenApiV30AicElementGetGetRequest struct {
	ctx         context.Context
	ApiService  *AicElementGetV30ApiService
	accountId   *int64
	accountType *AicElementGetV30AccountType
	filtering   *AicElementGetV30Filtering
	page        *int64
	pageSize    *int64
	orderField  *AicElementGetV30OrderField
	orderType   *AicElementGetV30OrderType
}

// BP账户体系:组织id，Agent账户体系:代理商id
func (r *ApiOpenApiV30AicElementGetGetRequest) AccountId(accountId int64) *ApiOpenApiV30AicElementGetGetRequest {
	r.accountId = &accountId
	return r
}

// 账户体系枚举
func (r *ApiOpenApiV30AicElementGetGetRequest) AccountType(accountType AicElementGetV30AccountType) *ApiOpenApiV30AicElementGetGetRequest {
	r.accountType = &accountType
	return r
}

// 过滤条件 不同条件之间为「且」的关系，只有同时满足传入的多个条件，才会返回信息
func (r *ApiOpenApiV30AicElementGetGetRequest) Filtering(filtering AicElementGetV30Filtering) *ApiOpenApiV30AicElementGetGetRequest {
	r.filtering = &filtering
	return r
}

// 页码，默认值1
func (r *ApiOpenApiV30AicElementGetGetRequest) Page(page int64) *ApiOpenApiV30AicElementGetGetRequest {
	r.page = &page
	return r
}

// 页面大小，默认值20，最大值200
func (r *ApiOpenApiV30AicElementGetGetRequest) PageSize(pageSize int64) *ApiOpenApiV30AicElementGetGetRequest {
	r.pageSize = &pageSize
	return r
}

// 排序字段
func (r *ApiOpenApiV30AicElementGetGetRequest) OrderField(orderField AicElementGetV30OrderField) *ApiOpenApiV30AicElementGetGetRequest {
	r.orderField = &orderField
	return r
}

// 排序方式
func (r *ApiOpenApiV30AicElementGetGetRequest) OrderType(orderType AicElementGetV30OrderType) *ApiOpenApiV30AicElementGetGetRequest {
	r.orderType = &orderType
	return r
}

func (r *ApiOpenApiV30AicElementGetGetRequest) Execute() (*AicElementGetV30Response, *http.Response, error) {
	return r.ApiService.getExecute(r)
}

func (r *ApiOpenApiV30AicElementGetGetRequest) AccessToken(accessToken string) *ApiOpenApiV30AicElementGetGetRequest {
	r.ctx = context.WithValue(r.ctx, config.ContextAccessToken, accessToken)
	return r
}

func (r *ApiOpenApiV30AicElementGetGetRequest) WithLog(enable bool) *ApiOpenApiV30AicElementGetGetRequest {
	if enable {
		r.ctx = context.WithValue(r.ctx, config.ContextEnableLog, true)
	}
	return r
}

/*
OpenApiV30AicElementGetGet Method for OpenApiV30AicElementGetGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOpenApiV30AicElementGetGetRequest
*/
func (a *AicElementGetV30ApiService) Get(ctx context.Context) *ApiOpenApiV30AicElementGetGetRequest {
	return &ApiOpenApiV30AicElementGetGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AicElementGetV30Response
func (a *AicElementGetV30ApiService) getExecute(r *ApiOpenApiV30AicElementGetGetRequest) (*AicElementGetV30Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           map[string]*FormFileInfo
		localVarReturnValue *AicElementGetV30Response
	)

	r.ctx = a.client.prepareCtx(r.ctx)

	localBasePath := a.client.Cfg.GetBasePath()

	localVarPath := localBasePath + "/open_api/v3.0/aic/element/get/"

	localVarHeaderParams := make(map[string]string)
	formFiles = make(map[string]*FormFileInfo)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.accountId == nil {
		return localVarReturnValue, nil, ReportError("accountId is required and must be specified")
	}
	if r.accountType == nil {
		return localVarReturnValue, nil, ReportError("accountType is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "account_id", r.accountId)
	parameterAddToHeaderOrQuery(localVarQueryParams, "account_type", r.accountType)
	if r.filtering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filtering", r.filtering)
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page)
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize)
	}
	if r.orderField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order_field", r.orderField)
	}
	if r.orderType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order_type", r.orderType)
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.call(r.ctx, req, &localVarReturnValue)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
