/*
Oceanengine Open Api

巨量引擎开放平台 Open Api


*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"context"
	"net/http"
	"net/url"

	"github.com/oceanengine/ad_open_sdk_go/config"
	. "github.com/oceanengine/ad_open_sdk_go/models"
)

// LocalFileVideoUploadV30ApiService LocalFileVideoUploadV30Api service
type LocalFileVideoUploadV30ApiService service

type ApiOpenApiV30LocalFileVideoUploadPostRequest struct {
	ctx            context.Context
	ApiService     *LocalFileVideoUploadV30ApiService
	filename       *string
	localAccountId *int64
	videoFile      *LocalFileVideoUploadV30RequestVideoFile
	videoSignature *string
}

// 素材的文件名，可自定义素材名，不传择默认取文件名，最长255个字符
func (r *ApiOpenApiV30LocalFileVideoUploadPostRequest) Filename(filename string) *ApiOpenApiV30LocalFileVideoUploadPostRequest {
	r.filename = &filename
	return r
}

func (r *ApiOpenApiV30LocalFileVideoUploadPostRequest) LocalAccountId(localAccountId int64) *ApiOpenApiV30LocalFileVideoUploadPostRequest {
	r.localAccountId = &localAccountId
	return r
}

func (r *ApiOpenApiV30LocalFileVideoUploadPostRequest) VideoFile(videoFile LocalFileVideoUploadV30RequestVideoFile) *ApiOpenApiV30LocalFileVideoUploadPostRequest {
	r.videoFile = &videoFile
	return r
}

// 视频的md5值(用于服务端校验)
func (r *ApiOpenApiV30LocalFileVideoUploadPostRequest) VideoSignature(videoSignature string) *ApiOpenApiV30LocalFileVideoUploadPostRequest {
	r.videoSignature = &videoSignature
	return r
}

func (r *ApiOpenApiV30LocalFileVideoUploadPostRequest) Execute() (*LocalFileVideoUploadV30Response, *http.Response, error) {
	return r.ApiService.postExecute(r)
}

func (r *ApiOpenApiV30LocalFileVideoUploadPostRequest) AccessToken(accessToken string) *ApiOpenApiV30LocalFileVideoUploadPostRequest {
	r.ctx = context.WithValue(r.ctx, config.ContextAccessToken, accessToken)
	return r
}

func (r *ApiOpenApiV30LocalFileVideoUploadPostRequest) WithLog(enable bool) *ApiOpenApiV30LocalFileVideoUploadPostRequest {
	if enable {
		r.ctx = context.WithValue(r.ctx, config.ContextEnableLog, true)
	}
	return r
}

/*
OpenApiV30LocalFileVideoUploadPost Method for OpenApiV30LocalFileVideoUploadPost

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOpenApiV30LocalFileVideoUploadPostRequest
*/
func (a *LocalFileVideoUploadV30ApiService) Post(ctx context.Context) *ApiOpenApiV30LocalFileVideoUploadPostRequest {
	return &ApiOpenApiV30LocalFileVideoUploadPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return LocalFileVideoUploadV30Response
func (a *LocalFileVideoUploadV30ApiService) postExecute(r *ApiOpenApiV30LocalFileVideoUploadPostRequest) (*LocalFileVideoUploadV30Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           map[string]*FormFileInfo
		localVarReturnValue *LocalFileVideoUploadV30Response
	)

	r.ctx = a.client.prepareCtx(r.ctx)

	localBasePath := a.client.Cfg.GetBasePath()

	localVarPath := localBasePath + "/open_api/v3.0/local/file/video/upload/"

	localVarHeaderParams := make(map[string]string)
	formFiles = make(map[string]*FormFileInfo)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.filename == nil {
		return localVarReturnValue, nil, ReportError("filename is required and must be specified")
	}
	if r.localAccountId == nil {
		return localVarReturnValue, nil, ReportError("localAccountId is required and must be specified")
	}
	if r.videoFile == nil {
		return localVarReturnValue, nil, ReportError("videoFile is required and must be specified")
	}
	if r.videoSignature == nil {
		return localVarReturnValue, nil, ReportError("videoSignature is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	parameterAddToHeaderOrQuery(localVarFormParams, "filename", r.filename)
	parameterAddToHeaderOrQuery(localVarFormParams, "local_account_id", r.localAccountId)
	parameterAddToHeaderOrQuery(localVarFormParams, "video_file", r.videoFile)
	parameterAddToHeaderOrQuery(localVarFormParams, "video_signature", r.videoSignature)
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.call(r.ctx, req, &localVarReturnValue)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
