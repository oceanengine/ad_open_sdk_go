/*
Oceanengine Open Api

巨量引擎开放平台 Open Api


*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"context"
	"net/http"
	"net/url"

	"github.com/oceanengine/ad_open_sdk_go/config"
	. "github.com/oceanengine/ad_open_sdk_go/models"
)

// ReportBusinessPlatformStardeliveryTaskVideoDataGetV30ApiService ReportBusinessPlatformStardeliveryTaskVideoDataGetV30Api service
type ReportBusinessPlatformStardeliveryTaskVideoDataGetV30ApiService service

type ApiOpenApiV30ReportBusinessPlatformStardeliveryTaskVideoDataGetGetRequest struct {
	ctx            context.Context
	ApiService     *ReportBusinessPlatformStardeliveryTaskVideoDataGetV30ApiService
	organizationId *int64
	startDate      *string
	endDate        *string
	filtering      *ReportBusinessPlatformStardeliveryTaskVideoDataGetV30Filtering
	orderField     *string
	orderType      *ReportBusinessPlatformStardeliveryTaskVideoDataGetV30OrderType
	page           *int64
	pageSize       *int64
}

// 组织id
func (r *ApiOpenApiV30ReportBusinessPlatformStardeliveryTaskVideoDataGetGetRequest) OrganizationId(organizationId int64) *ApiOpenApiV30ReportBusinessPlatformStardeliveryTaskVideoDataGetGetRequest {
	r.organizationId = &organizationId
	return r
}

// 数据统计开始时间，格式：YYYY-MM-DD。闭区间,可选日期范围是2024-04-01及以后 需要与end_date 搭配使用 应答参数中指标如无特殊说明均支持数据统计日期筛选
func (r *ApiOpenApiV30ReportBusinessPlatformStardeliveryTaskVideoDataGetGetRequest) StartDate(startDate string) *ApiOpenApiV30ReportBusinessPlatformStardeliveryTaskVideoDataGetGetRequest {
	r.startDate = &startDate
	return r
}

// 数据统计结束时间，格式：YYYY-MM-DD。闭区间,可选日期范围是2024-04-01及以后 需要与start_date 搭配使用，一次时间筛选最大跨度为365天，超过报错 应答参数中指标如无特殊说明均支持数据统计日期筛选
func (r *ApiOpenApiV30ReportBusinessPlatformStardeliveryTaskVideoDataGetGetRequest) EndDate(endDate string) *ApiOpenApiV30ReportBusinessPlatformStardeliveryTaskVideoDataGetGetRequest {
	r.endDate = &endDate
	return r
}

// - 过滤条件，若此字段不传，或传空则视为无限制条件 - 多个条件之间为与关系，返回交集
func (r *ApiOpenApiV30ReportBusinessPlatformStardeliveryTaskVideoDataGetGetRequest) Filtering(filtering ReportBusinessPlatformStardeliveryTaskVideoDataGetV30Filtering) *ApiOpenApiV30ReportBusinessPlatformStardeliveryTaskVideoDataGetGetRequest {
	r.filtering = &filtering
	return r
}

// 排序字段，部分统计指标可参与排序 - 默认: 按素材广告消耗倒序 - 支持排序的字段：   - IAP流水金额   - IAA广告消耗   - 自然播放量   - 广告播放量   - 点击量   - 转化量   - ROI0
func (r *ApiOpenApiV30ReportBusinessPlatformStardeliveryTaskVideoDataGetGetRequest) OrderField(orderField string) *ApiOpenApiV30ReportBusinessPlatformStardeliveryTaskVideoDataGetGetRequest {
	r.orderField = &orderField
	return r
}

// 排序方式；默认值: DESC； - ASC 顺序 - DESC倒序
func (r *ApiOpenApiV30ReportBusinessPlatformStardeliveryTaskVideoDataGetGetRequest) OrderType(orderType ReportBusinessPlatformStardeliveryTaskVideoDataGetV30OrderType) *ApiOpenApiV30ReportBusinessPlatformStardeliveryTaskVideoDataGetGetRequest {
	r.orderType = &orderType
	return r
}

// 页码，默认值: 1，page*page_size不能大于10000
func (r *ApiOpenApiV30ReportBusinessPlatformStardeliveryTaskVideoDataGetGetRequest) Page(page int64) *ApiOpenApiV30ReportBusinessPlatformStardeliveryTaskVideoDataGetGetRequest {
	r.page = &page
	return r
}

// 页面数据量，默认值: 10，最大值100，page*page_size不能大于10000
func (r *ApiOpenApiV30ReportBusinessPlatformStardeliveryTaskVideoDataGetGetRequest) PageSize(pageSize int64) *ApiOpenApiV30ReportBusinessPlatformStardeliveryTaskVideoDataGetGetRequest {
	r.pageSize = &pageSize
	return r
}

func (r *ApiOpenApiV30ReportBusinessPlatformStardeliveryTaskVideoDataGetGetRequest) Execute() (*ReportBusinessPlatformStardeliveryTaskVideoDataGetV30Response, *http.Response, error) {
	return r.ApiService.getExecute(r)
}

func (r *ApiOpenApiV30ReportBusinessPlatformStardeliveryTaskVideoDataGetGetRequest) AccessToken(accessToken string) *ApiOpenApiV30ReportBusinessPlatformStardeliveryTaskVideoDataGetGetRequest {
	r.ctx = context.WithValue(r.ctx, config.ContextAccessToken, accessToken)
	return r
}

func (r *ApiOpenApiV30ReportBusinessPlatformStardeliveryTaskVideoDataGetGetRequest) WithLog(enable bool) *ApiOpenApiV30ReportBusinessPlatformStardeliveryTaskVideoDataGetGetRequest {
	if enable {
		r.ctx = context.WithValue(r.ctx, config.ContextEnableLog, true)
	}
	return r
}

/*
OpenApiV30ReportBusinessPlatformStardeliveryTaskVideoDataGetGet Method for OpenApiV30ReportBusinessPlatformStardeliveryTaskVideoDataGetGet

获取星广短剧素材价值刻画报表

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOpenApiV30ReportBusinessPlatformStardeliveryTaskVideoDataGetGetRequest
*/
func (a *ReportBusinessPlatformStardeliveryTaskVideoDataGetV30ApiService) Get(ctx context.Context) *ApiOpenApiV30ReportBusinessPlatformStardeliveryTaskVideoDataGetGetRequest {
	return &ApiOpenApiV30ReportBusinessPlatformStardeliveryTaskVideoDataGetGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ReportBusinessPlatformStardeliveryTaskVideoDataGetV30Response
func (a *ReportBusinessPlatformStardeliveryTaskVideoDataGetV30ApiService) getExecute(r *ApiOpenApiV30ReportBusinessPlatformStardeliveryTaskVideoDataGetGetRequest) (*ReportBusinessPlatformStardeliveryTaskVideoDataGetV30Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           map[string]*FormFileInfo
		localVarReturnValue *ReportBusinessPlatformStardeliveryTaskVideoDataGetV30Response
	)

	r.ctx = a.client.prepareCtx(r.ctx)

	localBasePath := a.client.Cfg.GetBasePath()

	localVarPath := localBasePath + "/open_api/v3.0/report/business_platform/stardelivery/task_video_data/get/"

	localVarHeaderParams := make(map[string]string)
	formFiles = make(map[string]*FormFileInfo)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.organizationId == nil {
		return localVarReturnValue, nil, ReportError("organizationId is required and must be specified")
	}
	if r.startDate == nil {
		return localVarReturnValue, nil, ReportError("startDate is required and must be specified")
	}
	if r.endDate == nil {
		return localVarReturnValue, nil, ReportError("endDate is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "organization_id", r.organizationId)
	parameterAddToHeaderOrQuery(localVarQueryParams, "start_date", r.startDate)
	parameterAddToHeaderOrQuery(localVarQueryParams, "end_date", r.endDate)
	if r.filtering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filtering", r.filtering)
	}
	if r.orderField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order_field", r.orderField)
	}
	if r.orderType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order_type", r.orderType)
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page)
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize)
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.call(r.ctx, req, &localVarReturnValue)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
