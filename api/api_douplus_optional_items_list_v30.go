/*
Oceanengine Open Api

巨量引擎开放平台 Open Api


*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"context"
	"net/http"
	"net/url"

	"github.com/oceanengine/ad_open_sdk_go/config"
	. "github.com/oceanengine/ad_open_sdk_go/models"
)

// DouplusOptionalItemsListV30ApiService DouplusOptionalItemsListV30Api service
type DouplusOptionalItemsListV30ApiService service

type ApiOpenApiV30DouplusOptionalItemsListGetRequest struct {
	ctx            context.Context
	ApiService     *DouplusOptionalItemsListV30ApiService
	awemeSecUid    *string
	externalAction *DouplusOptionalItemsListV30ExternalAction
	awemeId        *string
	count          *int64
	cursor         *int64
}

func (r *ApiOpenApiV30DouplusOptionalItemsListGetRequest) AwemeSecUid(awemeSecUid string) *ApiOpenApiV30DouplusOptionalItemsListGetRequest {
	r.awemeSecUid = &awemeSecUid
	return r
}

// 投放目的，将返回对应投放目的下的可投视频清单 1. LIKE_COMMENT_AMOUNT 点赞评论量 2. FOLLOWER_COUNT 粉丝量 3. VIDEO_PLAYBACK_VOLUME 视频播放量 4. DY_PRIVATE_MESSAGES 抖音私信 5. HIGH_INTERACTION_QUALITY 互动质量高 6. HIGH_INTERACTION_FREQUENCY 互动数量多 7. ONLY_FOR_ACTIVATION 激活 8. COMMENT_LINK_CLICK 评论链接点击 9. LIVE_ROOM_POPULARITY 直播间人气 10. LIVE_ROOM_FOLLOWER_INCREASE 直播间涨粉 11. VIEWER_DONATION 观众打赏 12. VIEWER_INTERACTION 观众互动
func (r *ApiOpenApiV30DouplusOptionalItemsListGetRequest) ExternalAction(externalAction DouplusOptionalItemsListV30ExternalAction) *ApiOpenApiV30DouplusOptionalItemsListGetRequest {
	r.externalAction = &externalAction
	return r
}

// 需要拉取视频的抖音号id
func (r *ApiOpenApiV30DouplusOptionalItemsListGetRequest) AwemeId(awemeId string) *ApiOpenApiV30DouplusOptionalItemsListGetRequest {
	r.awemeId = &awemeId
	return r
}

// 单页拉取视频数 允许值：1- 20
func (r *ApiOpenApiV30DouplusOptionalItemsListGetRequest) Count(count int64) *ApiOpenApiV30DouplusOptionalItemsListGetRequest {
	r.count = &count
	return r
}

// 游标，翻页使用 最小值：0 翻页使用，第一页传0，第二页开始，需要传前一页resp返回的cursor
func (r *ApiOpenApiV30DouplusOptionalItemsListGetRequest) Cursor(cursor int64) *ApiOpenApiV30DouplusOptionalItemsListGetRequest {
	r.cursor = &cursor
	return r
}

func (r *ApiOpenApiV30DouplusOptionalItemsListGetRequest) Execute() (*DouplusOptionalItemsListV30Response, *http.Response, error) {
	return r.ApiService.getExecute(r)
}

func (r *ApiOpenApiV30DouplusOptionalItemsListGetRequest) AccessToken(accessToken string) *ApiOpenApiV30DouplusOptionalItemsListGetRequest {
	r.ctx = context.WithValue(r.ctx, config.ContextAccessToken, accessToken)
	return r
}

func (r *ApiOpenApiV30DouplusOptionalItemsListGetRequest) WithLog(enable bool) *ApiOpenApiV30DouplusOptionalItemsListGetRequest {
	if enable {
		r.ctx = context.WithValue(r.ctx, config.ContextEnableLog, true)
	}
	return r
}

/*
OpenApiV30DouplusOptionalItemsListGet Method for OpenApiV30DouplusOptionalItemsListGet

获取DOU+可投视频列表

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOpenApiV30DouplusOptionalItemsListGetRequest
*/
func (a *DouplusOptionalItemsListV30ApiService) Get(ctx context.Context) *ApiOpenApiV30DouplusOptionalItemsListGetRequest {
	return &ApiOpenApiV30DouplusOptionalItemsListGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DouplusOptionalItemsListV30Response
func (a *DouplusOptionalItemsListV30ApiService) getExecute(r *ApiOpenApiV30DouplusOptionalItemsListGetRequest) (*DouplusOptionalItemsListV30Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           map[string]*FormFileInfo
		localVarReturnValue *DouplusOptionalItemsListV30Response
	)

	r.ctx = a.client.prepareCtx(r.ctx)

	localBasePath := a.client.Cfg.GetBasePath()

	localVarPath := localBasePath + "/open_api/v3.0/douplus/optional_items/list/"

	localVarHeaderParams := make(map[string]string)
	formFiles = make(map[string]*FormFileInfo)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.awemeSecUid == nil {
		return localVarReturnValue, nil, ReportError("awemeSecUid is required and must be specified")
	}
	if r.externalAction == nil {
		return localVarReturnValue, nil, ReportError("externalAction is required and must be specified")
	}
	if r.awemeId == nil {
		return localVarReturnValue, nil, ReportError("awemeId is required and must be specified")
	}
	if r.count == nil {
		return localVarReturnValue, nil, ReportError("count is required and must be specified")
	}
	if *r.count < 1 {
		return localVarReturnValue, nil, ReportError("count must be greater than 1")
	}
	if *r.count > 20 {
		return localVarReturnValue, nil, ReportError("count must be less than 20")
	}
	if r.cursor == nil {
		return localVarReturnValue, nil, ReportError("cursor is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "aweme_sec_uid", r.awemeSecUid)
	parameterAddToHeaderOrQuery(localVarQueryParams, "external_action", r.externalAction)
	parameterAddToHeaderOrQuery(localVarQueryParams, "aweme_id", r.awemeId)
	parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count)
	parameterAddToHeaderOrQuery(localVarQueryParams, "cursor", r.cursor)
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.call(r.ctx, req, &localVarReturnValue)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
