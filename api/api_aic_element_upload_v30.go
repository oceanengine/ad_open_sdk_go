/*
Oceanengine Open Api

巨量引擎开放平台 Open Api


*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"context"
	"net/http"
	"net/url"

	"github.com/oceanengine/ad_open_sdk_go/config"
	. "github.com/oceanengine/ad_open_sdk_go/models"
)

// AicElementUploadV30ApiService AicElementUploadV30Api service
type AicElementUploadV30ApiService service

type ApiOpenApiV30AicElementUploadPostRequest struct {
	ctx         context.Context
	ApiService  *AicElementUploadV30ApiService
	accountId   *int64
	accountType *AicElementUploadV30AccountType
	elementType *AicElementUploadV30ElementType
	elementName *string
	file        *FormFileInfo
	pathName    *string
	useAs       *AicElementUploadV30UseAs
}

// BP账户体系:组织id，Agent账户体系:代理商id
func (r *ApiOpenApiV30AicElementUploadPostRequest) AccountId(accountId int64) *ApiOpenApiV30AicElementUploadPostRequest {
	r.accountId = &accountId
	return r
}

func (r *ApiOpenApiV30AicElementUploadPostRequest) AccountType(accountType AicElementUploadV30AccountType) *ApiOpenApiV30AicElementUploadPostRequest {
	r.accountType = &accountType
	return r
}

func (r *ApiOpenApiV30AicElementUploadPostRequest) ElementType(elementType AicElementUploadV30ElementType) *ApiOpenApiV30AicElementUploadPostRequest {
	r.elementType = &elementType
	return r
}

// 元素名称，支持中英文、数字、特殊字符，默认剔除html标签，字数限制：50
func (r *ApiOpenApiV30AicElementUploadPostRequest) ElementName(elementName string) *ApiOpenApiV30AicElementUploadPostRequest {
	r.elementName = &elementName
	return r
}

// 上传二进制数据，如果在相同的路径下有相同的视频即为更新， 视频数据：支持mp4、mpeg、mov，单视频时长不超过10min，大小＜500M, 图片数据：jpg、jpeg、png、webp、bmp，大小&lt;150MB 字体数据：ttf格式，大小&lt;150MB 音乐数据：mp3、wav、flac、aac，大小&lt;150MB,时长不超过5min
func (r *ApiOpenApiV30AicElementUploadPostRequest) File(file *FormFileInfo) *ApiOpenApiV30AicElementUploadPostRequest {
	r.file = file
	return r
}

// 元素存储的文件夹路径，确保输入路径存在 示例：/数码/电脑 层级：2，最大层级限制：10，默认根目录
func (r *ApiOpenApiV30AicElementUploadPostRequest) PathName(pathName string) *ApiOpenApiV30AicElementUploadPostRequest {
	r.pathName = &pathName
	return r
}

func (r *ApiOpenApiV30AicElementUploadPostRequest) UseAs(useAs AicElementUploadV30UseAs) *ApiOpenApiV30AicElementUploadPostRequest {
	r.useAs = &useAs
	return r
}

func (r *ApiOpenApiV30AicElementUploadPostRequest) Execute() (*AicElementUploadV30Response, *http.Response, error) {
	return r.ApiService.postExecute(r)
}

func (r *ApiOpenApiV30AicElementUploadPostRequest) AccessToken(accessToken string) *ApiOpenApiV30AicElementUploadPostRequest {
	r.ctx = context.WithValue(r.ctx, config.ContextAccessToken, accessToken)
	return r
}

func (r *ApiOpenApiV30AicElementUploadPostRequest) WithLog(enable bool) *ApiOpenApiV30AicElementUploadPostRequest {
	if enable {
		r.ctx = context.WithValue(r.ctx, config.ContextEnableLog, true)
	}
	return r
}

/*
OpenApiV30AicElementUploadPost Method for OpenApiV30AicElementUploadPost

通过此接口可以上传原料到即创原料库

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOpenApiV30AicElementUploadPostRequest
*/
func (a *AicElementUploadV30ApiService) Post(ctx context.Context) *ApiOpenApiV30AicElementUploadPostRequest {
	return &ApiOpenApiV30AicElementUploadPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AicElementUploadV30Response
func (a *AicElementUploadV30ApiService) postExecute(r *ApiOpenApiV30AicElementUploadPostRequest) (*AicElementUploadV30Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           map[string]*FormFileInfo
		localVarReturnValue *AicElementUploadV30Response
	)

	r.ctx = a.client.prepareCtx(r.ctx)

	localBasePath := a.client.Cfg.GetBasePath()

	localVarPath := localBasePath + "/open_api/v3.0/aic/element/upload/"

	localVarHeaderParams := make(map[string]string)
	formFiles = make(map[string]*FormFileInfo)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.accountId == nil {
		return localVarReturnValue, nil, ReportError("accountId is required and must be specified")
	}
	if r.accountType == nil {
		return localVarReturnValue, nil, ReportError("accountType is required and must be specified")
	}
	if r.elementType == nil {
		return localVarReturnValue, nil, ReportError("elementType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	parameterAddToHeaderOrQuery(localVarFormParams, "account_id", r.accountId)
	parameterAddToHeaderOrQuery(localVarFormParams, "account_type", r.accountType)
	if r.elementName != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "element_name", r.elementName)
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "element_type", r.elementType)
	if r.file != nil {
		formFiles["file"] = r.file
	}
	if r.pathName != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "path_name", r.pathName)
	}
	if r.useAs != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "use_as", r.useAs)
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.call(r.ctx, req, &localVarReturnValue)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
