/*
Oceanengine Open Api

巨量引擎开放平台 Open Api


*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"context"
	"net/http"
	"net/url"

	"github.com/oceanengine/ad_open_sdk_go/config"
	. "github.com/oceanengine/ad_open_sdk_go/models"
)

// QianchuanReportTodayLiveRoomDataGetV10ApiService QianchuanReportTodayLiveRoomDataGetV10Api service
type QianchuanReportTodayLiveRoomDataGetV10ApiService service

type ApiOpenApiV10QianchuanReportTodayLiveRoomDataGetGetRequest struct {
	ctx          context.Context
	ApiService   *QianchuanReportTodayLiveRoomDataGetV10ApiService
	advertiserId *int64
	dataTopic    *QianchuanReportTodayLiveRoomDataGetV10DataTopic
	dimensions   *[]string
	metrics      *[]string
	filters      *[]*QianchuanReportTodayLiveRoomDataGetV10FiltersInner
	startTime    *string
	endTime      *string
	orderBy      *[]*QianchuanReportTodayLiveRoomDataGetV10OrderByInner
	page         *int64
	pageSize     *int64
}

func (r *ApiOpenApiV10QianchuanReportTodayLiveRoomDataGetGetRequest) AdvertiserId(advertiserId int64) *ApiOpenApiV10QianchuanReportTodayLiveRoomDataGetGetRequest {
	r.advertiserId = &advertiserId
	return r
}

func (r *ApiOpenApiV10QianchuanReportTodayLiveRoomDataGetGetRequest) DataTopic(dataTopic QianchuanReportTodayLiveRoomDataGetV10DataTopic) *ApiOpenApiV10QianchuanReportTodayLiveRoomDataGetGetRequest {
	r.dataTopic = &dataTopic
	return r
}

func (r *ApiOpenApiV10QianchuanReportTodayLiveRoomDataGetGetRequest) Dimensions(dimensions []string) *ApiOpenApiV10QianchuanReportTodayLiveRoomDataGetGetRequest {
	r.dimensions = &dimensions
	return r
}

func (r *ApiOpenApiV10QianchuanReportTodayLiveRoomDataGetGetRequest) Metrics(metrics []string) *ApiOpenApiV10QianchuanReportTodayLiveRoomDataGetGetRequest {
	r.metrics = &metrics
	return r
}

func (r *ApiOpenApiV10QianchuanReportTodayLiveRoomDataGetGetRequest) Filters(filters []*QianchuanReportTodayLiveRoomDataGetV10FiltersInner) *ApiOpenApiV10QianchuanReportTodayLiveRoomDataGetGetRequest {
	r.filters = &filters
	return r
}

func (r *ApiOpenApiV10QianchuanReportTodayLiveRoomDataGetGetRequest) StartTime(startTime string) *ApiOpenApiV10QianchuanReportTodayLiveRoomDataGetGetRequest {
	r.startTime = &startTime
	return r
}

func (r *ApiOpenApiV10QianchuanReportTodayLiveRoomDataGetGetRequest) EndTime(endTime string) *ApiOpenApiV10QianchuanReportTodayLiveRoomDataGetGetRequest {
	r.endTime = &endTime
	return r
}

func (r *ApiOpenApiV10QianchuanReportTodayLiveRoomDataGetGetRequest) OrderBy(orderBy []*QianchuanReportTodayLiveRoomDataGetV10OrderByInner) *ApiOpenApiV10QianchuanReportTodayLiveRoomDataGetGetRequest {
	r.orderBy = &orderBy
	return r
}

// 第几页
func (r *ApiOpenApiV10QianchuanReportTodayLiveRoomDataGetGetRequest) Page(page int64) *ApiOpenApiV10QianchuanReportTodayLiveRoomDataGetGetRequest {
	r.page = &page
	return r
}

// 页大小
func (r *ApiOpenApiV10QianchuanReportTodayLiveRoomDataGetGetRequest) PageSize(pageSize int64) *ApiOpenApiV10QianchuanReportTodayLiveRoomDataGetGetRequest {
	r.pageSize = &pageSize
	return r
}

func (r *ApiOpenApiV10QianchuanReportTodayLiveRoomDataGetGetRequest) Execute() (*QianchuanReportTodayLiveRoomDataGetV10Response, *http.Response, error) {
	return r.ApiService.getExecute(r)
}

func (r *ApiOpenApiV10QianchuanReportTodayLiveRoomDataGetGetRequest) AccessToken(accessToken string) *ApiOpenApiV10QianchuanReportTodayLiveRoomDataGetGetRequest {
	r.ctx = context.WithValue(r.ctx, config.ContextAccessToken, accessToken)
	return r
}

func (r *ApiOpenApiV10QianchuanReportTodayLiveRoomDataGetGetRequest) WithLog(enable bool) *ApiOpenApiV10QianchuanReportTodayLiveRoomDataGetGetRequest {
	if enable {
		r.ctx = context.WithValue(r.ctx, config.ContextEnableLog, true)
	}
	return r
}

/*
OpenApiV10QianchuanReportTodayLiveRoomDataGetGet Method for OpenApiV10QianchuanReportTodayLiveRoomDataGetGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOpenApiV10QianchuanReportTodayLiveRoomDataGetGetRequest
*/
func (a *QianchuanReportTodayLiveRoomDataGetV10ApiService) Get(ctx context.Context) *ApiOpenApiV10QianchuanReportTodayLiveRoomDataGetGetRequest {
	return &ApiOpenApiV10QianchuanReportTodayLiveRoomDataGetGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return QianchuanReportTodayLiveRoomDataGetV10Response
func (a *QianchuanReportTodayLiveRoomDataGetV10ApiService) getExecute(r *ApiOpenApiV10QianchuanReportTodayLiveRoomDataGetGetRequest) (*QianchuanReportTodayLiveRoomDataGetV10Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           map[string]*FormFileInfo
		localVarReturnValue *QianchuanReportTodayLiveRoomDataGetV10Response
	)

	r.ctx = a.client.prepareCtx(r.ctx)

	localBasePath := a.client.Cfg.GetBasePath()

	localVarPath := localBasePath + "/open_api/v1.0/qianchuan/report/today_live/room/data/get/"

	localVarHeaderParams := make(map[string]string)
	formFiles = make(map[string]*FormFileInfo)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.advertiserId == nil {
		return localVarReturnValue, nil, ReportError("advertiserId is required and must be specified")
	}
	if r.dataTopic == nil {
		return localVarReturnValue, nil, ReportError("dataTopic is required and must be specified")
	}
	if r.dimensions == nil {
		return localVarReturnValue, nil, ReportError("dimensions is required and must be specified")
	}
	if r.metrics == nil {
		return localVarReturnValue, nil, ReportError("metrics is required and must be specified")
	}
	if r.filters == nil {
		return localVarReturnValue, nil, ReportError("filters is required and must be specified")
	}
	if r.startTime == nil {
		return localVarReturnValue, nil, ReportError("startTime is required and must be specified")
	}
	if r.endTime == nil {
		return localVarReturnValue, nil, ReportError("endTime is required and must be specified")
	}
	if r.orderBy == nil {
		return localVarReturnValue, nil, ReportError("orderBy is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "advertiser_id", r.advertiserId)
	parameterAddToHeaderOrQuery(localVarQueryParams, "data_topic", r.dataTopic)
	parameterAddToHeaderOrQuery(localVarQueryParams, "dimensions", r.dimensions)
	parameterAddToHeaderOrQuery(localVarQueryParams, "metrics", r.metrics)
	parameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters)
	parameterAddToHeaderOrQuery(localVarQueryParams, "start_time", r.startTime)
	parameterAddToHeaderOrQuery(localVarQueryParams, "end_time", r.endTime)
	parameterAddToHeaderOrQuery(localVarQueryParams, "order_by", r.orderBy)
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page)
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize)
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.call(r.ctx, req, &localVarReturnValue)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
