/*
Oceanengine Open Api

巨量引擎开放平台 Open Api

API version: 1.1.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	"github.com/oceanengine/ad_open_sdk_go/config"
	. "github.com/oceanengine/ad_open_sdk_go/models"
)

// CgTransferQueryCanTransferBalanceV30ApiService CgTransferQueryCanTransferBalanceV30Api service
type CgTransferQueryCanTransferBalanceV30ApiService service

type ApiOpenApiV30CgTransferQueryCanTransferBalanceGetRequest struct {
	ctx                 context.Context
	ApiService          *CgTransferQueryCanTransferBalanceV30ApiService
	bizRequestNo        *string
	agentId             *int64
	accountId           *int64
	targetAccountIdList *[]int64
	transferDirection   *CgTransferQueryCanTransferBalanceV30TransferDirection
}

// 请求id，推荐uuid，方便请求链路对齐
func (r *ApiOpenApiV30CgTransferQueryCanTransferBalanceGetRequest) BizRequestNo(bizRequestNo string) *ApiOpenApiV30CgTransferQueryCanTransferBalanceGetRequest {
	r.bizRequestNo = &bizRequestNo
	return r
}

// 代理商账户id，用于鉴权
func (r *ApiOpenApiV30CgTransferQueryCanTransferBalanceGetRequest) AgentId(agentId int64) *ApiOpenApiV30CgTransferQueryCanTransferBalanceGetRequest {
	r.agentId = &agentId
	return r
}

// 锚定账户id，1:N的1
func (r *ApiOpenApiV30CgTransferQueryCanTransferBalanceGetRequest) AccountId(accountId int64) *ApiOpenApiV30CgTransferQueryCanTransferBalanceGetRequest {
	r.accountId = &accountId
	return r
}

// 目标账户id列表，1:N的N，需要列表内账户类型相同，最多支持100个
func (r *ApiOpenApiV30CgTransferQueryCanTransferBalanceGetRequest) TargetAccountIdList(targetAccountIdList []int64) *ApiOpenApiV30CgTransferQueryCanTransferBalanceGetRequest {
	r.targetAccountIdList = &targetAccountIdList
	return r
}

// 转账方向，以目标账户视角确定
func (r *ApiOpenApiV30CgTransferQueryCanTransferBalanceGetRequest) TransferDirection(transferDirection CgTransferQueryCanTransferBalanceV30TransferDirection) *ApiOpenApiV30CgTransferQueryCanTransferBalanceGetRequest {
	r.transferDirection = &transferDirection
	return r
}

func (r *ApiOpenApiV30CgTransferQueryCanTransferBalanceGetRequest) Execute() (*CgTransferQueryCanTransferBalanceV30Response, *http.Response, error) {
	return r.ApiService.getExecute(r)
}

func (r *ApiOpenApiV30CgTransferQueryCanTransferBalanceGetRequest) AccessToken(accessToken string) *ApiOpenApiV30CgTransferQueryCanTransferBalanceGetRequest {
	r.ctx = context.WithValue(r.ctx, config.ContextAccessToken, accessToken)
	return r
}

func (r *ApiOpenApiV30CgTransferQueryCanTransferBalanceGetRequest) WithLog(enable bool) *ApiOpenApiV30CgTransferQueryCanTransferBalanceGetRequest {
	if enable {
		r.ctx = context.WithValue(r.ctx, config.ContextEnableLog, true)
	}
	return r
}

/*
OpenApiV30CgTransferQueryCanTransferBalanceGet Method for OpenApiV30CgTransferQueryCanTransferBalanceGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOpenApiV30CgTransferQueryCanTransferBalanceGetRequest
*/
func (a *CgTransferQueryCanTransferBalanceV30ApiService) Get(ctx context.Context) *ApiOpenApiV30CgTransferQueryCanTransferBalanceGetRequest {
	return &ApiOpenApiV30CgTransferQueryCanTransferBalanceGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CgTransferQueryCanTransferBalanceV30Response
func (a *CgTransferQueryCanTransferBalanceV30ApiService) getExecute(r *ApiOpenApiV30CgTransferQueryCanTransferBalanceGetRequest) (*CgTransferQueryCanTransferBalanceV30Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           map[string]*FormFileInfo
		localVarReturnValue *CgTransferQueryCanTransferBalanceV30Response
	)

	r.ctx = a.client.prepareCtx(r.ctx)

	localBasePath := a.client.Cfg.GetBasePath()

	localVarPath := localBasePath + "/open_api/v3.0/cg_transfer/query_can_transfer_balance/"

	localVarHeaderParams := make(map[string]string)
	formFiles = make(map[string]*FormFileInfo)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bizRequestNo == nil {
		return localVarReturnValue, nil, ReportError("bizRequestNo is required and must be specified")
	}
	if r.agentId == nil {
		return localVarReturnValue, nil, ReportError("agentId is required and must be specified")
	}
	if r.accountId == nil {
		return localVarReturnValue, nil, ReportError("accountId is required and must be specified")
	}
	if r.targetAccountIdList == nil {
		return localVarReturnValue, nil, ReportError("targetAccountIdList is required and must be specified")
	}
	if r.transferDirection == nil {
		return localVarReturnValue, nil, ReportError("transferDirection is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "biz_request_no", r.bizRequestNo)
	parameterAddToHeaderOrQuery(localVarQueryParams, "agent_id", r.agentId)
	parameterAddToHeaderOrQuery(localVarQueryParams, "account_id", r.accountId)
	parameterAddToHeaderOrQuery(localVarQueryParams, "target_account_id_list", r.targetAccountIdList)
	parameterAddToHeaderOrQuery(localVarQueryParams, "transfer_direction", r.transferDirection)
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r.ctx, req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
