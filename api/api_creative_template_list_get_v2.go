/*
Oceanengine Open Api

巨量引擎开放平台 Open Api

API version: 1.0.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	"github.com/oceanengine/ad_open_sdk_go/config"
	. "github.com/oceanengine/ad_open_sdk_go/models"
)

// CreativeTemplateListGetV2ApiService CreativeTemplateListGetV2Api service
type CreativeTemplateListGetV2ApiService service

type ApiOpenApi2CreativeTemplateListGetGetRequest struct {
	ctx            context.Context
	ApiService     *CreativeTemplateListGetV2ApiService
	advertiserId   *int64
	adId           *int64
	imageMode      *CreativeTemplateListGetV2ImageMode
	templateTagIds *[]string
	page           *int32
	pageSize       *int32
}

// 广告主ID
func (r *ApiOpenApi2CreativeTemplateListGetGetRequest) AdvertiserId(advertiserId int64) *ApiOpenApi2CreativeTemplateListGetGetRequest {
	r.advertiserId = &advertiserId
	return r
}

// 广告计划ID
func (r *ApiOpenApi2CreativeTemplateListGetGetRequest) AdId(adId int64) *ApiOpenApi2CreativeTemplateListGetGetRequest {
	r.adId = &adId
	return r
}

// 生成素材样式，允许值： VIDEO_HORIZONTAL横版视频、 VIDEO_VERTICAL竖版视频
func (r *ApiOpenApi2CreativeTemplateListGetGetRequest) ImageMode(imageMode CreativeTemplateListGetV2ImageMode) *ApiOpenApi2CreativeTemplateListGetGetRequest {
	r.imageMode = &imageMode
	return r
}

// 模板标签ID，通过【获取模板标签列表】接口获取
func (r *ApiOpenApi2CreativeTemplateListGetGetRequest) TemplateTagIds(templateTagIds []string) *ApiOpenApi2CreativeTemplateListGetGetRequest {
	r.templateTagIds = &templateTagIds
	return r
}

// 页数，默认值：1
func (r *ApiOpenApi2CreativeTemplateListGetGetRequest) Page(page int32) *ApiOpenApi2CreativeTemplateListGetGetRequest {
	r.page = &page
	return r
}

// 页面大小，默认值：10
func (r *ApiOpenApi2CreativeTemplateListGetGetRequest) PageSize(pageSize int32) *ApiOpenApi2CreativeTemplateListGetGetRequest {
	r.pageSize = &pageSize
	return r
}

func (r *ApiOpenApi2CreativeTemplateListGetGetRequest) Execute() (*CreativeTemplateListGetV2Response, *http.Response, error) {
	return r.ApiService.getExecute(r)
}

func (r *ApiOpenApi2CreativeTemplateListGetGetRequest) AccessToken(accessToken string) *ApiOpenApi2CreativeTemplateListGetGetRequest {
	r.ctx = context.WithValue(r.ctx, config.ContextAccessToken, accessToken)
	return r
}

func (r *ApiOpenApi2CreativeTemplateListGetGetRequest) WithLog(enable bool) *ApiOpenApi2CreativeTemplateListGetGetRequest {
	if enable {
		r.ctx = context.WithValue(r.ctx, config.ContextEnableLog, true)
	}
	return r
}

/*
OpenApi2CreativeTemplateListGetGet Method for OpenApi2CreativeTemplateListGetGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOpenApi2CreativeTemplateListGetGetRequest
*/
func (a *CreativeTemplateListGetV2ApiService) Get(ctx context.Context) *ApiOpenApi2CreativeTemplateListGetGetRequest {
	return &ApiOpenApi2CreativeTemplateListGetGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreativeTemplateListGetV2Response
func (a *CreativeTemplateListGetV2ApiService) getExecute(r *ApiOpenApi2CreativeTemplateListGetGetRequest) (*CreativeTemplateListGetV2Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           map[string]FormFile
		localVarReturnValue *CreativeTemplateListGetV2Response
	)

	r.ctx = a.client.prepareCtx(r.ctx)

	localBasePath := a.client.Cfg.GetBasePath()

	localVarPath := localBasePath + "/open_api/2/creative/template/list/get/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.advertiserId == nil {
		return localVarReturnValue, nil, ReportError("advertiserId is required and must be specified")
	}
	if r.adId == nil {
		return localVarReturnValue, nil, ReportError("adId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "advertiser_id", r.advertiserId)
	parameterAddToHeaderOrQuery(localVarQueryParams, "ad_id", r.adId)
	if r.imageMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "image_mode", r.imageMode)
	}
	if r.templateTagIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "template_tag_ids", r.templateTagIds)
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page)
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize)
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r.ctx, req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
