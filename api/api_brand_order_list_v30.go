/*
Oceanengine Open Api

巨量引擎开放平台 Open Api


*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"context"
	"net/http"
	"net/url"

	"github.com/oceanengine/ad_open_sdk_go/config"
	. "github.com/oceanengine/ad_open_sdk_go/models"
)

// BrandOrderListV30ApiService BrandOrderListV30Api service
type BrandOrderListV30ApiService service

type ApiOpenApiV30BrandOrderListGetRequest struct {
	ctx            context.Context
	ApiService     *BrandOrderListV30ApiService
	advertiserId   *int64
	filter         *BrandOrderListV30Filter
	campaignFilter *BrandOrderListV30CampaignFilter
	pageInfo       *BrandOrderListV30PageInfo
}

// 广告主id
func (r *ApiOpenApiV30BrandOrderListGetRequest) AdvertiserId(advertiserId int64) *ApiOpenApiV30BrandOrderListGetRequest {
	r.advertiserId = &advertiserId
	return r
}

func (r *ApiOpenApiV30BrandOrderListGetRequest) Filter(filter BrandOrderListV30Filter) *ApiOpenApiV30BrandOrderListGetRequest {
	r.filter = &filter
	return r
}

// 广告组过滤条件
func (r *ApiOpenApiV30BrandOrderListGetRequest) CampaignFilter(campaignFilter BrandOrderListV30CampaignFilter) *ApiOpenApiV30BrandOrderListGetRequest {
	r.campaignFilter = &campaignFilter
	return r
}

func (r *ApiOpenApiV30BrandOrderListGetRequest) PageInfo(pageInfo BrandOrderListV30PageInfo) *ApiOpenApiV30BrandOrderListGetRequest {
	r.pageInfo = &pageInfo
	return r
}

func (r *ApiOpenApiV30BrandOrderListGetRequest) Execute() (*BrandOrderListV30Response, *http.Response, error) {
	return r.ApiService.getExecute(r)
}

func (r *ApiOpenApiV30BrandOrderListGetRequest) AccessToken(accessToken string) *ApiOpenApiV30BrandOrderListGetRequest {
	r.ctx = context.WithValue(r.ctx, config.ContextAccessToken, accessToken)
	return r
}

func (r *ApiOpenApiV30BrandOrderListGetRequest) WithLog(enable bool) *ApiOpenApiV30BrandOrderListGetRequest {
	if enable {
		r.ctx = context.WithValue(r.ctx, config.ContextEnableLog, true)
	}
	return r
}

/*
OpenApiV30BrandOrderListGet Method for OpenApiV30BrandOrderListGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOpenApiV30BrandOrderListGetRequest
*/
func (a *BrandOrderListV30ApiService) Get(ctx context.Context) *ApiOpenApiV30BrandOrderListGetRequest {
	return &ApiOpenApiV30BrandOrderListGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return BrandOrderListV30Response
func (a *BrandOrderListV30ApiService) getExecute(r *ApiOpenApiV30BrandOrderListGetRequest) (*BrandOrderListV30Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           map[string]*FormFileInfo
		localVarReturnValue *BrandOrderListV30Response
	)

	r.ctx = a.client.prepareCtx(r.ctx)

	localBasePath := a.client.Cfg.GetBasePath()

	localVarPath := localBasePath + "/open_api/v3.0/brand/order/list/"

	localVarHeaderParams := make(map[string]string)
	formFiles = make(map[string]*FormFileInfo)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.advertiserId == nil {
		return localVarReturnValue, nil, ReportError("advertiserId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "advertiser_id", r.advertiserId)
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter)
	}
	if r.campaignFilter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "campaign_filter", r.campaignFilter)
	}
	if r.pageInfo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_info", r.pageInfo)
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.call(r.ctx, req, &localVarReturnValue)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
