/*
Oceanengine Open Api

巨量引擎开放平台 Open Api


*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"context"
	"net/http"
	"net/url"

	"github.com/oceanengine/ad_open_sdk_go/config"
	. "github.com/oceanengine/ad_open_sdk_go/models"
)

// ToolsBidsSuggestV30ApiService ToolsBidsSuggestV30Api service
type ToolsBidsSuggestV30ApiService service

type ApiOpenApiV30ToolsBidsSuggestGetRequest struct {
	ctx                context.Context
	ApiService         *ToolsBidsSuggestV30ApiService
	advertiserId       *int64
	pricing            *ToolsBidsSuggestV30Pricing
	externalAction     *ToolsBidsSuggestV30ExternalAction
	projectId          *int64
	deepExternalAction *ToolsBidsSuggestV30DeepExternalAction
	deepBidType        *ToolsBidsSuggestV30DeepBidType
	platform           *[]*ToolsBidsSuggestV30Platform
	marketingGoal      *ToolsBidsSuggestV30MarketingGoal
	campaignType       *ToolsBidsSuggestV30CampaignType
	packageName        *string
	userName           *string
	appId              *string
}

func (r *ApiOpenApiV30ToolsBidsSuggestGetRequest) AdvertiserId(advertiserId int64) *ApiOpenApiV30ToolsBidsSuggestGetRequest {
	r.advertiserId = &advertiserId
	return r
}

func (r *ApiOpenApiV30ToolsBidsSuggestGetRequest) Pricing(pricing ToolsBidsSuggestV30Pricing) *ApiOpenApiV30ToolsBidsSuggestGetRequest {
	r.pricing = &pricing
	return r
}

func (r *ApiOpenApiV30ToolsBidsSuggestGetRequest) ExternalAction(externalAction ToolsBidsSuggestV30ExternalAction) *ApiOpenApiV30ToolsBidsSuggestGetRequest {
	r.externalAction = &externalAction
	return r
}

func (r *ApiOpenApiV30ToolsBidsSuggestGetRequest) ProjectId(projectId int64) *ApiOpenApiV30ToolsBidsSuggestGetRequest {
	r.projectId = &projectId
	return r
}

func (r *ApiOpenApiV30ToolsBidsSuggestGetRequest) DeepExternalAction(deepExternalAction ToolsBidsSuggestV30DeepExternalAction) *ApiOpenApiV30ToolsBidsSuggestGetRequest {
	r.deepExternalAction = &deepExternalAction
	return r
}

func (r *ApiOpenApiV30ToolsBidsSuggestGetRequest) DeepBidType(deepBidType ToolsBidsSuggestV30DeepBidType) *ApiOpenApiV30ToolsBidsSuggestGetRequest {
	r.deepBidType = &deepBidType
	return r
}

// 定向目标平台
func (r *ApiOpenApiV30ToolsBidsSuggestGetRequest) Platform(platform []*ToolsBidsSuggestV30Platform) *ApiOpenApiV30ToolsBidsSuggestGetRequest {
	r.platform = &platform
	return r
}

// 营销目标
func (r *ApiOpenApiV30ToolsBidsSuggestGetRequest) MarketingGoal(marketingGoal ToolsBidsSuggestV30MarketingGoal) *ApiOpenApiV30ToolsBidsSuggestGetRequest {
	r.marketingGoal = &marketingGoal
	return r
}

// 项目类型
func (r *ApiOpenApiV30ToolsBidsSuggestGetRequest) CampaignType(campaignType ToolsBidsSuggestV30CampaignType) *ApiOpenApiV30ToolsBidsSuggestGetRequest {
	r.campaignType = &campaignType
	return r
}

// 应用包名
func (r *ApiOpenApiV30ToolsBidsSuggestGetRequest) PackageName(packageName string) *ApiOpenApiV30ToolsBidsSuggestGetRequest {
	r.packageName = &packageName
	return r
}

// 微信小程序/小游戏原始ID
func (r *ApiOpenApiV30ToolsBidsSuggestGetRequest) UserName(userName string) *ApiOpenApiV30ToolsBidsSuggestGetRequest {
	r.userName = &userName
	return r
}

// 字节小程序/小游戏的app id
func (r *ApiOpenApiV30ToolsBidsSuggestGetRequest) AppId(appId string) *ApiOpenApiV30ToolsBidsSuggestGetRequest {
	r.appId = &appId
	return r
}

func (r *ApiOpenApiV30ToolsBidsSuggestGetRequest) Execute() (*ToolsBidsSuggestV30Response, *http.Response, error) {
	return r.ApiService.getExecute(r)
}

func (r *ApiOpenApiV30ToolsBidsSuggestGetRequest) AccessToken(accessToken string) *ApiOpenApiV30ToolsBidsSuggestGetRequest {
	r.ctx = context.WithValue(r.ctx, config.ContextAccessToken, accessToken)
	return r
}

func (r *ApiOpenApiV30ToolsBidsSuggestGetRequest) WithLog(enable bool) *ApiOpenApiV30ToolsBidsSuggestGetRequest {
	if enable {
		r.ctx = context.WithValue(r.ctx, config.ContextEnableLog, true)
	}
	return r
}

/*
OpenApiV30ToolsBidsSuggestGet Method for OpenApiV30ToolsBidsSuggestGet

通过广告分析查询广告的建议出价

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOpenApiV30ToolsBidsSuggestGetRequest
*/
func (a *ToolsBidsSuggestV30ApiService) Get(ctx context.Context) *ApiOpenApiV30ToolsBidsSuggestGetRequest {
	return &ApiOpenApiV30ToolsBidsSuggestGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ToolsBidsSuggestV30Response
func (a *ToolsBidsSuggestV30ApiService) getExecute(r *ApiOpenApiV30ToolsBidsSuggestGetRequest) (*ToolsBidsSuggestV30Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           map[string]*FormFileInfo
		localVarReturnValue *ToolsBidsSuggestV30Response
	)

	r.ctx = a.client.prepareCtx(r.ctx)

	localBasePath := a.client.Cfg.GetBasePath()

	localVarPath := localBasePath + "/open_api/v3.0/tools/bids/suggest/"

	localVarHeaderParams := make(map[string]string)
	formFiles = make(map[string]*FormFileInfo)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.advertiserId == nil {
		return localVarReturnValue, nil, ReportError("advertiserId is required and must be specified")
	}
	if r.pricing == nil {
		return localVarReturnValue, nil, ReportError("pricing is required and must be specified")
	}
	if r.externalAction == nil {
		return localVarReturnValue, nil, ReportError("externalAction is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "advertiser_id", r.advertiserId)
	if r.projectId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "project_id", r.projectId)
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "pricing", r.pricing)
	parameterAddToHeaderOrQuery(localVarQueryParams, "external_action", r.externalAction)
	if r.deepExternalAction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deep_external_action", r.deepExternalAction)
	}
	if r.deepBidType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deep_bid_type", r.deepBidType)
	}
	if r.platform != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "platform", r.platform)
	}
	if r.marketingGoal != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "marketing_goal", r.marketingGoal)
	}
	if r.campaignType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "campaign_type", r.campaignType)
	}
	if r.packageName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "package_name", r.packageName)
	}
	if r.userName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "user_name", r.userName)
	}
	if r.appId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "app_id", r.appId)
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.call(r.ctx, req, &localVarReturnValue)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
