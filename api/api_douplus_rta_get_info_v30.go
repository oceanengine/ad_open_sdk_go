/*
Oceanengine Open Api

巨量引擎开放平台 Open Api


*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"context"
	"net/http"
	"net/url"

	"github.com/oceanengine/ad_open_sdk_go/config"
	. "github.com/oceanengine/ad_open_sdk_go/models"
)

// DouplusRtaGetInfoV30ApiService DouplusRtaGetInfoV30Api service
type DouplusRtaGetInfoV30ApiService service

type ApiOpenApiV30DouplusRtaGetInfoGetRequest struct {
	ctx         context.Context
	ApiService  *DouplusRtaGetInfoV30ApiService
	awemeSecUid *string
}

func (r *ApiOpenApiV30DouplusRtaGetInfoGetRequest) AwemeSecUid(awemeSecUid string) *ApiOpenApiV30DouplusRtaGetInfoGetRequest {
	r.awemeSecUid = &awemeSecUid
	return r
}

func (r *ApiOpenApiV30DouplusRtaGetInfoGetRequest) Execute() (*DouplusRtaGetInfoV30Response, *http.Response, error) {
	return r.ApiService.getExecute(r)
}

func (r *ApiOpenApiV30DouplusRtaGetInfoGetRequest) AccessToken(accessToken string) *ApiOpenApiV30DouplusRtaGetInfoGetRequest {
	r.ctx = context.WithValue(r.ctx, config.ContextAccessToken, accessToken)
	return r
}

func (r *ApiOpenApiV30DouplusRtaGetInfoGetRequest) WithLog(enable bool) *ApiOpenApiV30DouplusRtaGetInfoGetRequest {
	if enable {
		r.ctx = context.WithValue(r.ctx, config.ContextEnableLog, true)
	}
	return r
}

/*
OpenApiV30DouplusRtaGetInfoGet Method for OpenApiV30DouplusRtaGetInfoGet

查询客户获取RTA策略信息与数据

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOpenApiV30DouplusRtaGetInfoGetRequest
*/
func (a *DouplusRtaGetInfoV30ApiService) Get(ctx context.Context) *ApiOpenApiV30DouplusRtaGetInfoGetRequest {
	return &ApiOpenApiV30DouplusRtaGetInfoGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DouplusRtaGetInfoV30Response
func (a *DouplusRtaGetInfoV30ApiService) getExecute(r *ApiOpenApiV30DouplusRtaGetInfoGetRequest) (*DouplusRtaGetInfoV30Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           map[string]*FormFileInfo
		localVarReturnValue *DouplusRtaGetInfoV30Response
	)

	r.ctx = a.client.prepareCtx(r.ctx)

	localBasePath := a.client.Cfg.GetBasePath()

	localVarPath := localBasePath + "/open_api/v3.0/douplus/rta/get_info/"

	localVarHeaderParams := make(map[string]string)
	formFiles = make(map[string]*FormFileInfo)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.awemeSecUid == nil {
		return localVarReturnValue, nil, ReportError("awemeSecUid is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "aweme_sec_uid", r.awemeSecUid)
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.call(r.ctx, req, &localVarReturnValue)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
