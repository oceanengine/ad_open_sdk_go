/*
Oceanengine Open Api

巨量引擎开放平台 Open Api


*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"context"
	"net/http"
	"net/url"

	"github.com/oceanengine/ad_open_sdk_go/config"
	. "github.com/oceanengine/ad_open_sdk_go/models"
)

// ToolsHotMaterialDeriveListV30ApiService ToolsHotMaterialDeriveListV30Api service
type ToolsHotMaterialDeriveListV30ApiService service

type ApiOpenApiV30ToolsHotMaterialDeriveListGetRequest struct {
	ctx          context.Context
	ApiService   *ToolsHotMaterialDeriveListV30ApiService
	advertiserId *int64
	page         *int64
	pageSize     *int64
	filtering    *ToolsHotMaterialDeriveListV30Filtering
}

func (r *ApiOpenApiV30ToolsHotMaterialDeriveListGetRequest) AdvertiserId(advertiserId int64) *ApiOpenApiV30ToolsHotMaterialDeriveListGetRequest {
	r.advertiserId = &advertiserId
	return r
}

func (r *ApiOpenApiV30ToolsHotMaterialDeriveListGetRequest) Page(page int64) *ApiOpenApiV30ToolsHotMaterialDeriveListGetRequest {
	r.page = &page
	return r
}

func (r *ApiOpenApiV30ToolsHotMaterialDeriveListGetRequest) PageSize(pageSize int64) *ApiOpenApiV30ToolsHotMaterialDeriveListGetRequest {
	r.pageSize = &pageSize
	return r
}

func (r *ApiOpenApiV30ToolsHotMaterialDeriveListGetRequest) Filtering(filtering ToolsHotMaterialDeriveListV30Filtering) *ApiOpenApiV30ToolsHotMaterialDeriveListGetRequest {
	r.filtering = &filtering
	return r
}

func (r *ApiOpenApiV30ToolsHotMaterialDeriveListGetRequest) Execute() (*ToolsHotMaterialDeriveListV30Response, *http.Response, error) {
	return r.ApiService.getExecute(r)
}

func (r *ApiOpenApiV30ToolsHotMaterialDeriveListGetRequest) AccessToken(accessToken string) *ApiOpenApiV30ToolsHotMaterialDeriveListGetRequest {
	r.ctx = context.WithValue(r.ctx, config.ContextAccessToken, accessToken)
	return r
}

func (r *ApiOpenApiV30ToolsHotMaterialDeriveListGetRequest) WithLog(enable bool) *ApiOpenApiV30ToolsHotMaterialDeriveListGetRequest {
	if enable {
		r.ctx = context.WithValue(r.ctx, config.ContextEnableLog, true)
	}
	return r
}

/*
OpenApiV30ToolsHotMaterialDeriveListGet Method for OpenApiV30ToolsHotMaterialDeriveListGet

爆款裂变任务列表

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOpenApiV30ToolsHotMaterialDeriveListGetRequest
*/
func (a *ToolsHotMaterialDeriveListV30ApiService) Get(ctx context.Context) *ApiOpenApiV30ToolsHotMaterialDeriveListGetRequest {
	return &ApiOpenApiV30ToolsHotMaterialDeriveListGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ToolsHotMaterialDeriveListV30Response
func (a *ToolsHotMaterialDeriveListV30ApiService) getExecute(r *ApiOpenApiV30ToolsHotMaterialDeriveListGetRequest) (*ToolsHotMaterialDeriveListV30Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           map[string]*FormFileInfo
		localVarReturnValue *ToolsHotMaterialDeriveListV30Response
	)

	r.ctx = a.client.prepareCtx(r.ctx)

	localBasePath := a.client.Cfg.GetBasePath()

	localVarPath := localBasePath + "/open_api/v3.0/tools/hot_material_derive/list/"

	localVarHeaderParams := make(map[string]string)
	formFiles = make(map[string]*FormFileInfo)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.advertiserId == nil {
		return localVarReturnValue, nil, ReportError("advertiserId is required and must be specified")
	}
	if r.page == nil {
		return localVarReturnValue, nil, ReportError("page is required and must be specified")
	}
	if *r.page < 1 {
		return localVarReturnValue, nil, ReportError("page must be greater than 1")
	}
	if *r.page > 1000 {
		return localVarReturnValue, nil, ReportError("page must be less than 1000")
	}
	if r.pageSize == nil {
		return localVarReturnValue, nil, ReportError("pageSize is required and must be specified")
	}
	if *r.pageSize < 1 {
		return localVarReturnValue, nil, ReportError("pageSize must be greater than 1")
	}
	if *r.pageSize > 50 {
		return localVarReturnValue, nil, ReportError("pageSize must be less than 50")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "advertiser_id", r.advertiserId)
	if r.filtering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filtering", r.filtering)
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page)
	parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize)
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.call(r.ctx, req, &localVarReturnValue)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
