/*
Oceanengine Open Api

巨量引擎开放平台 Open Api


*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"context"
	"net/http"
	"net/url"

	"github.com/oceanengine/ad_open_sdk_go/config"
	. "github.com/oceanengine/ad_open_sdk_go/models"
)

// BrandToolQueryPublishPriceV30ApiService BrandToolQueryPublishPriceV30Api service
type BrandToolQueryPublishPriceV30ApiService service

type ApiOpenApiV30BrandToolQueryPublishPriceGetRequest struct {
	ctx           context.Context
	ApiService    *BrandToolQueryPublishPriceV30ApiService
	advertiserId  *int64
	classify      *BrandToolQueryPublishPriceV30Classify
	proType       *BrandToolQueryPublishPriceV30ProType
	adForm        *BrandToolQueryPublishPriceV30AdForm
	appOrigin     *BrandToolQueryPublishPriceV30AppOrigin
	pricingType   *BrandToolQueryPublishPriceV30PricingType
	gdSendType    *BrandToolQueryPublishPriceV30GdSendType
	policyNo      *string
	deliveryInfo  *BrandToolQueryPublishPriceV30DeliveryInfo
	intentionNo   *string
	audienceInfo  *BrandToolQueryPublishPriceV30AudienceInfo
	frequencyInfo *BrandToolQueryPublishPriceV30FrequencyInfo
}

// 广告主ID
func (r *ApiOpenApiV30BrandToolQueryPublishPriceGetRequest) AdvertiserId(advertiserId int64) *ApiOpenApiV30BrandToolQueryPublishPriceGetRequest {
	r.advertiserId = &advertiserId
	return r
}

// 广告类别
func (r *ApiOpenApiV30BrandToolQueryPublishPriceGetRequest) Classify(classify BrandToolQueryPublishPriceV30Classify) *ApiOpenApiV30BrandToolQueryPublishPriceGetRequest {
	r.classify = &classify
	return r
}

// 产品类型
func (r *ApiOpenApiV30BrandToolQueryPublishPriceGetRequest) ProType(proType BrandToolQueryPublishPriceV30ProType) *ApiOpenApiV30BrandToolQueryPublishPriceGetRequest {
	r.proType = &proType
	return r
}

// 投放产品
func (r *ApiOpenApiV30BrandToolQueryPublishPriceGetRequest) AdForm(adForm BrandToolQueryPublishPriceV30AdForm) *ApiOpenApiV30BrandToolQueryPublishPriceGetRequest {
	r.adForm = &adForm
	return r
}

// 投放位置（媒体端）
func (r *ApiOpenApiV30BrandToolQueryPublishPriceGetRequest) AppOrigin(appOrigin BrandToolQueryPublishPriceV30AppOrigin) *ApiOpenApiV30BrandToolQueryPublishPriceGetRequest {
	r.appOrigin = &appOrigin
	return r
}

// 计费类型
func (r *ApiOpenApiV30BrandToolQueryPublishPriceGetRequest) PricingType(pricingType BrandToolQueryPublishPriceV30PricingType) *ApiOpenApiV30BrandToolQueryPublishPriceGetRequest {
	r.pricingType = &pricingType
	return r
}

// 优化目标
func (r *ApiOpenApiV30BrandToolQueryPublishPriceGetRequest) GdSendType(gdSendType BrandToolQueryPublishPriceV30GdSendType) *ApiOpenApiV30BrandToolQueryPublishPriceGetRequest {
	r.gdSendType = &gdSendType
	return r
}

// 政策编号
func (r *ApiOpenApiV30BrandToolQueryPublishPriceGetRequest) PolicyNo(policyNo string) *ApiOpenApiV30BrandToolQueryPublishPriceGetRequest {
	r.policyNo = &policyNo
	return r
}

// 投放日期信息
func (r *ApiOpenApiV30BrandToolQueryPublishPriceGetRequest) DeliveryInfo(deliveryInfo BrandToolQueryPublishPriceV30DeliveryInfo) *ApiOpenApiV30BrandToolQueryPublishPriceGetRequest {
	r.deliveryInfo = &deliveryInfo
	return r
}

// 招商订单编号
func (r *ApiOpenApiV30BrandToolQueryPublishPriceGetRequest) IntentionNo(intentionNo string) *ApiOpenApiV30BrandToolQueryPublishPriceGetRequest {
	r.intentionNo = &intentionNo
	return r
}

// 定向
func (r *ApiOpenApiV30BrandToolQueryPublishPriceGetRequest) AudienceInfo(audienceInfo BrandToolQueryPublishPriceV30AudienceInfo) *ApiOpenApiV30BrandToolQueryPublishPriceGetRequest {
	r.audienceInfo = &audienceInfo
	return r
}

// 频控
func (r *ApiOpenApiV30BrandToolQueryPublishPriceGetRequest) FrequencyInfo(frequencyInfo BrandToolQueryPublishPriceV30FrequencyInfo) *ApiOpenApiV30BrandToolQueryPublishPriceGetRequest {
	r.frequencyInfo = &frequencyInfo
	return r
}

func (r *ApiOpenApiV30BrandToolQueryPublishPriceGetRequest) Execute() (*BrandToolQueryPublishPriceV30Response, *http.Response, error) {
	return r.ApiService.getExecute(r)
}

func (r *ApiOpenApiV30BrandToolQueryPublishPriceGetRequest) AccessToken(accessToken string) *ApiOpenApiV30BrandToolQueryPublishPriceGetRequest {
	r.ctx = context.WithValue(r.ctx, config.ContextAccessToken, accessToken)
	return r
}

func (r *ApiOpenApiV30BrandToolQueryPublishPriceGetRequest) WithLog(enable bool) *ApiOpenApiV30BrandToolQueryPublishPriceGetRequest {
	if enable {
		r.ctx = context.WithValue(r.ctx, config.ContextEnableLog, true)
	}
	return r
}

/*
OpenApiV30BrandToolQueryPublishPriceGet Method for OpenApiV30BrandToolQueryPublishPriceGet

询价

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOpenApiV30BrandToolQueryPublishPriceGetRequest
*/
func (a *BrandToolQueryPublishPriceV30ApiService) Get(ctx context.Context) *ApiOpenApiV30BrandToolQueryPublishPriceGetRequest {
	return &ApiOpenApiV30BrandToolQueryPublishPriceGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return BrandToolQueryPublishPriceV30Response
func (a *BrandToolQueryPublishPriceV30ApiService) getExecute(r *ApiOpenApiV30BrandToolQueryPublishPriceGetRequest) (*BrandToolQueryPublishPriceV30Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           map[string]*FormFileInfo
		localVarReturnValue *BrandToolQueryPublishPriceV30Response
	)

	r.ctx = a.client.prepareCtx(r.ctx)

	localBasePath := a.client.Cfg.GetBasePath()

	localVarPath := localBasePath + "/open_api/v3.0/brand/tool/query_publish_price/"

	localVarHeaderParams := make(map[string]string)
	formFiles = make(map[string]*FormFileInfo)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.advertiserId == nil {
		return localVarReturnValue, nil, ReportError("advertiserId is required and must be specified")
	}
	if r.classify == nil {
		return localVarReturnValue, nil, ReportError("classify is required and must be specified")
	}
	if r.proType == nil {
		return localVarReturnValue, nil, ReportError("proType is required and must be specified")
	}
	if r.adForm == nil {
		return localVarReturnValue, nil, ReportError("adForm is required and must be specified")
	}
	if r.appOrigin == nil {
		return localVarReturnValue, nil, ReportError("appOrigin is required and must be specified")
	}
	if r.pricingType == nil {
		return localVarReturnValue, nil, ReportError("pricingType is required and must be specified")
	}
	if r.gdSendType == nil {
		return localVarReturnValue, nil, ReportError("gdSendType is required and must be specified")
	}
	if r.policyNo == nil {
		return localVarReturnValue, nil, ReportError("policyNo is required and must be specified")
	}
	if r.deliveryInfo == nil {
		return localVarReturnValue, nil, ReportError("deliveryInfo is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "advertiser_id", r.advertiserId)
	parameterAddToHeaderOrQuery(localVarQueryParams, "classify", r.classify)
	if r.intentionNo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "intention_no", r.intentionNo)
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "pro_type", r.proType)
	parameterAddToHeaderOrQuery(localVarQueryParams, "ad_form", r.adForm)
	parameterAddToHeaderOrQuery(localVarQueryParams, "app_origin", r.appOrigin)
	parameterAddToHeaderOrQuery(localVarQueryParams, "pricing_type", r.pricingType)
	parameterAddToHeaderOrQuery(localVarQueryParams, "gd_send_type", r.gdSendType)
	if r.audienceInfo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "audience_info", r.audienceInfo)
	}
	if r.frequencyInfo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "frequency_info", r.frequencyInfo)
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "policy_no", r.policyNo)
	parameterAddToHeaderOrQuery(localVarQueryParams, "delivery_info", r.deliveryInfo)
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.call(r.ctx, req, &localVarReturnValue)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
