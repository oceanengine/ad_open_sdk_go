/*
Oceanengine Open Api

巨量引擎开放平台 Open Api


*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"context"
	"net/http"
	"net/url"

	"github.com/oceanengine/ad_open_sdk_go/config"
	. "github.com/oceanengine/ad_open_sdk_go/models"
)

// QianchuanBrandReportAdvertiserGetV10ApiService QianchuanBrandReportAdvertiserGetV10Api service
type QianchuanBrandReportAdvertiserGetV10ApiService service

type ApiOpenApiV10QianchuanBrandReportAdvertiserGetGetRequest struct {
	ctx             context.Context
	ApiService      *QianchuanBrandReportAdvertiserGetV10ApiService
	advertiserId    *int64
	startDate       *string
	endDate         *string
	fields          *[]string
	filtering       *QianchuanBrandReportAdvertiserGetV10Filtering
	timeGranularity *QianchuanBrandReportAdvertiserGetV10TimeGranularity
	orderField      *string
	orderType       *QianchuanBrandReportAdvertiserGetV10OrderType
	page            *int32
	pageSize        *int32
}

func (r *ApiOpenApiV10QianchuanBrandReportAdvertiserGetGetRequest) AdvertiserId(advertiserId int64) *ApiOpenApiV10QianchuanBrandReportAdvertiserGetGetRequest {
	r.advertiserId = &advertiserId
	return r
}

// 开始时间，格式 2021-04-05
func (r *ApiOpenApiV10QianchuanBrandReportAdvertiserGetGetRequest) StartDate(startDate string) *ApiOpenApiV10QianchuanBrandReportAdvertiserGetGetRequest {
	r.startDate = &startDate
	return r
}

// 结束时间，格式 2021-04-05
func (r *ApiOpenApiV10QianchuanBrandReportAdvertiserGetGetRequest) EndDate(endDate string) *ApiOpenApiV10QianchuanBrandReportAdvertiserGetGetRequest {
	r.endDate = &endDate
	return r
}

func (r *ApiOpenApiV10QianchuanBrandReportAdvertiserGetGetRequest) Fields(fields []string) *ApiOpenApiV10QianchuanBrandReportAdvertiserGetGetRequest {
	r.fields = &fields
	return r
}

func (r *ApiOpenApiV10QianchuanBrandReportAdvertiserGetGetRequest) Filtering(filtering QianchuanBrandReportAdvertiserGetV10Filtering) *ApiOpenApiV10QianchuanBrandReportAdvertiserGetGetRequest {
	r.filtering = &filtering
	return r
}

func (r *ApiOpenApiV10QianchuanBrandReportAdvertiserGetGetRequest) TimeGranularity(timeGranularity QianchuanBrandReportAdvertiserGetV10TimeGranularity) *ApiOpenApiV10QianchuanBrandReportAdvertiserGetGetRequest {
	r.timeGranularity = &timeGranularity
	return r
}

func (r *ApiOpenApiV10QianchuanBrandReportAdvertiserGetGetRequest) OrderField(orderField string) *ApiOpenApiV10QianchuanBrandReportAdvertiserGetGetRequest {
	r.orderField = &orderField
	return r
}

func (r *ApiOpenApiV10QianchuanBrandReportAdvertiserGetGetRequest) OrderType(orderType QianchuanBrandReportAdvertiserGetV10OrderType) *ApiOpenApiV10QianchuanBrandReportAdvertiserGetGetRequest {
	r.orderType = &orderType
	return r
}

func (r *ApiOpenApiV10QianchuanBrandReportAdvertiserGetGetRequest) Page(page int32) *ApiOpenApiV10QianchuanBrandReportAdvertiserGetGetRequest {
	r.page = &page
	return r
}

func (r *ApiOpenApiV10QianchuanBrandReportAdvertiserGetGetRequest) PageSize(pageSize int32) *ApiOpenApiV10QianchuanBrandReportAdvertiserGetGetRequest {
	r.pageSize = &pageSize
	return r
}

func (r *ApiOpenApiV10QianchuanBrandReportAdvertiserGetGetRequest) Execute() (*QianchuanBrandReportAdvertiserGetV10Response, *http.Response, error) {
	return r.ApiService.getExecute(r)
}

func (r *ApiOpenApiV10QianchuanBrandReportAdvertiserGetGetRequest) AccessToken(accessToken string) *ApiOpenApiV10QianchuanBrandReportAdvertiserGetGetRequest {
	r.ctx = context.WithValue(r.ctx, config.ContextAccessToken, accessToken)
	return r
}

func (r *ApiOpenApiV10QianchuanBrandReportAdvertiserGetGetRequest) WithLog(enable bool) *ApiOpenApiV10QianchuanBrandReportAdvertiserGetGetRequest {
	if enable {
		r.ctx = context.WithValue(r.ctx, config.ContextEnableLog, true)
	}
	return r
}

/*
OpenApiV10QianchuanBrandReportAdvertiserGetGet Method for OpenApiV10QianchuanBrandReportAdvertiserGetGet

获取品牌广告账户数据

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOpenApiV10QianchuanBrandReportAdvertiserGetGetRequest
*/
func (a *QianchuanBrandReportAdvertiserGetV10ApiService) Get(ctx context.Context) *ApiOpenApiV10QianchuanBrandReportAdvertiserGetGetRequest {
	return &ApiOpenApiV10QianchuanBrandReportAdvertiserGetGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return QianchuanBrandReportAdvertiserGetV10Response
func (a *QianchuanBrandReportAdvertiserGetV10ApiService) getExecute(r *ApiOpenApiV10QianchuanBrandReportAdvertiserGetGetRequest) (*QianchuanBrandReportAdvertiserGetV10Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           map[string]*FormFileInfo
		localVarReturnValue *QianchuanBrandReportAdvertiserGetV10Response
	)

	r.ctx = a.client.prepareCtx(r.ctx)

	localBasePath := a.client.Cfg.GetBasePath()

	localVarPath := localBasePath + "/open_api/v1.0/qianchuan/brand/report/advertiser/get/"

	localVarHeaderParams := make(map[string]string)
	formFiles = make(map[string]*FormFileInfo)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.advertiserId == nil {
		return localVarReturnValue, nil, ReportError("advertiserId is required and must be specified")
	}
	if r.startDate == nil {
		return localVarReturnValue, nil, ReportError("startDate is required and must be specified")
	}
	if r.endDate == nil {
		return localVarReturnValue, nil, ReportError("endDate is required and must be specified")
	}
	if r.fields == nil {
		return localVarReturnValue, nil, ReportError("fields is required and must be specified")
	}
	if r.filtering == nil {
		return localVarReturnValue, nil, ReportError("filtering is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "advertiser_id", r.advertiserId)
	parameterAddToHeaderOrQuery(localVarQueryParams, "start_date", r.startDate)
	parameterAddToHeaderOrQuery(localVarQueryParams, "end_date", r.endDate)
	parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields)
	parameterAddToHeaderOrQuery(localVarQueryParams, "filtering", r.filtering)
	if r.timeGranularity != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "time_granularity", r.timeGranularity)
	}
	if r.orderField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order_field", r.orderField)
	}
	if r.orderType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order_type", r.orderType)
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page)
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize)
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.call(r.ctx, req, &localVarReturnValue)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
