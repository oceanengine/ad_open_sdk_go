/*
Oceanengine Open Api

巨量引擎开放平台 Open Api


*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"context"
	"net/http"
	"net/url"

	"github.com/oceanengine/ad_open_sdk_go/config"
	. "github.com/oceanengine/ad_open_sdk_go/models"
)

// LocalFileVideoAwemeGetV30ApiService LocalFileVideoAwemeGetV30Api service
type LocalFileVideoAwemeGetV30ApiService service

type ApiOpenApiV30LocalFileVideoAwemeGetGetRequest struct {
	ctx            context.Context
	ApiService     *LocalFileVideoAwemeGetV30ApiService
	localAccountId *int64
	cursor         *string
	filtering      *LocalFileVideoAwemeGetV30Filtering
	orderFiled     *LocalFileVideoAwemeGetV30OrderFiled
	externalAction *LocalFileVideoAwemeGetV30ExternalAction
	count          *int64
}

func (r *ApiOpenApiV30LocalFileVideoAwemeGetGetRequest) LocalAccountId(localAccountId int64) *ApiOpenApiV30LocalFileVideoAwemeGetGetRequest {
	r.localAccountId = &localAccountId
	return r
}

// 页码游标值,第一次传\&quot;0\&quot;,之后每次传上次返回的值
func (r *ApiOpenApiV30LocalFileVideoAwemeGetGetRequest) Cursor(cursor string) *ApiOpenApiV30LocalFileVideoAwemeGetGetRequest {
	r.cursor = &cursor
	return r
}

// 过滤字段
func (r *ApiOpenApiV30LocalFileVideoAwemeGetGetRequest) Filtering(filtering LocalFileVideoAwemeGetV30Filtering) *ApiOpenApiV30LocalFileVideoAwemeGetGetRequest {
	r.filtering = &filtering
	return r
}

// 排序字段
func (r *ApiOpenApiV30LocalFileVideoAwemeGetGetRequest) OrderFiled(orderFiled LocalFileVideoAwemeGetV30OrderFiled) *ApiOpenApiV30LocalFileVideoAwemeGetGetRequest {
	r.orderFiled = &orderFiled
	return r
}

// ea，按预估效果排序的时候必传，仅支持传：OTO_PAY/OTO_PAY
func (r *ApiOpenApiV30LocalFileVideoAwemeGetGetRequest) ExternalAction(externalAction LocalFileVideoAwemeGetV30ExternalAction) *ApiOpenApiV30LocalFileVideoAwemeGetGetRequest {
	r.externalAction = &externalAction
	return r
}

// 默认10，最大100，最小1
func (r *ApiOpenApiV30LocalFileVideoAwemeGetGetRequest) Count(count int64) *ApiOpenApiV30LocalFileVideoAwemeGetGetRequest {
	r.count = &count
	return r
}

func (r *ApiOpenApiV30LocalFileVideoAwemeGetGetRequest) Execute() (*LocalFileVideoAwemeGetV30Response, *http.Response, error) {
	return r.ApiService.getExecute(r)
}

func (r *ApiOpenApiV30LocalFileVideoAwemeGetGetRequest) AccessToken(accessToken string) *ApiOpenApiV30LocalFileVideoAwemeGetGetRequest {
	r.ctx = context.WithValue(r.ctx, config.ContextAccessToken, accessToken)
	return r
}

func (r *ApiOpenApiV30LocalFileVideoAwemeGetGetRequest) WithLog(enable bool) *ApiOpenApiV30LocalFileVideoAwemeGetGetRequest {
	if enable {
		r.ctx = context.WithValue(r.ctx, config.ContextEnableLog, true)
	}
	return r
}

/*
OpenApiV30LocalFileVideoAwemeGetGet Method for OpenApiV30LocalFileVideoAwemeGetGet

拉抖音号主页视频接口

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOpenApiV30LocalFileVideoAwemeGetGetRequest
*/
func (a *LocalFileVideoAwemeGetV30ApiService) Get(ctx context.Context) *ApiOpenApiV30LocalFileVideoAwemeGetGetRequest {
	return &ApiOpenApiV30LocalFileVideoAwemeGetGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return LocalFileVideoAwemeGetV30Response
func (a *LocalFileVideoAwemeGetV30ApiService) getExecute(r *ApiOpenApiV30LocalFileVideoAwemeGetGetRequest) (*LocalFileVideoAwemeGetV30Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           map[string]*FormFileInfo
		localVarReturnValue *LocalFileVideoAwemeGetV30Response
	)

	r.ctx = a.client.prepareCtx(r.ctx)

	localBasePath := a.client.Cfg.GetBasePath()

	localVarPath := localBasePath + "/open_api/v3.0/local/file/video/aweme/get/"

	localVarHeaderParams := make(map[string]string)
	formFiles = make(map[string]*FormFileInfo)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.localAccountId == nil {
		return localVarReturnValue, nil, ReportError("localAccountId is required and must be specified")
	}
	if r.cursor == nil {
		return localVarReturnValue, nil, ReportError("cursor is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "local_account_id", r.localAccountId)
	if r.filtering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filtering", r.filtering)
	}
	if r.orderFiled != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order_filed", r.orderFiled)
	}
	if r.externalAction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "external_action", r.externalAction)
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count)
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "cursor", r.cursor)
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.call(r.ctx, req, &localVarReturnValue)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
