/*
Oceanengine Open Api

巨量引擎开放平台 Open Api

API version: 1.1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	"github.com/oceanengine/ad_open_sdk_go/config"
	. "github.com/oceanengine/ad_open_sdk_go/models"
)

// ToolsAdConvertDeepbidReadV2ApiService ToolsAdConvertDeepbidReadV2Api service
type ToolsAdConvertDeepbidReadV2ApiService service

type ApiOpenApi2ToolsAdConvertDeepbidReadGetRequest struct {
	ctx                context.Context
	ApiService         *ToolsAdConvertDeepbidReadV2ApiService
	advertiserId       *int64
	assetsIds          *[]int64
	campaignId         *int64
	convertId          *int64
	deepExternalAction *ToolsAdConvertDeepbidReadV2DeepExternalAction
	deliveryRange      *ToolsAdConvertDeepbidReadV2DeliveryRange
	externalAction     *ToolsAdConvertDeepbidReadV2ExternalAction
	flowControlMode    *ToolsAdConvertDeepbidReadV2FlowControlMode
	smartBidType       *ToolsAdConvertDeepbidReadV2SmartBidType
}

func (r *ApiOpenApi2ToolsAdConvertDeepbidReadGetRequest) AdvertiserId(advertiserId int64) *ApiOpenApi2ToolsAdConvertDeepbidReadGetRequest {
	r.advertiserId = &advertiserId
	return r
}

func (r *ApiOpenApi2ToolsAdConvertDeepbidReadGetRequest) AssetsIds(assetsIds []int64) *ApiOpenApi2ToolsAdConvertDeepbidReadGetRequest {
	r.assetsIds = &assetsIds
	return r
}

func (r *ApiOpenApi2ToolsAdConvertDeepbidReadGetRequest) CampaignId(campaignId int64) *ApiOpenApi2ToolsAdConvertDeepbidReadGetRequest {
	r.campaignId = &campaignId
	return r
}

func (r *ApiOpenApi2ToolsAdConvertDeepbidReadGetRequest) ConvertId(convertId int64) *ApiOpenApi2ToolsAdConvertDeepbidReadGetRequest {
	r.convertId = &convertId
	return r
}

func (r *ApiOpenApi2ToolsAdConvertDeepbidReadGetRequest) DeepExternalAction(deepExternalAction ToolsAdConvertDeepbidReadV2DeepExternalAction) *ApiOpenApi2ToolsAdConvertDeepbidReadGetRequest {
	r.deepExternalAction = &deepExternalAction
	return r
}

func (r *ApiOpenApi2ToolsAdConvertDeepbidReadGetRequest) DeliveryRange(deliveryRange ToolsAdConvertDeepbidReadV2DeliveryRange) *ApiOpenApi2ToolsAdConvertDeepbidReadGetRequest {
	r.deliveryRange = &deliveryRange
	return r
}

func (r *ApiOpenApi2ToolsAdConvertDeepbidReadGetRequest) ExternalAction(externalAction ToolsAdConvertDeepbidReadV2ExternalAction) *ApiOpenApi2ToolsAdConvertDeepbidReadGetRequest {
	r.externalAction = &externalAction
	return r
}

func (r *ApiOpenApi2ToolsAdConvertDeepbidReadGetRequest) FlowControlMode(flowControlMode ToolsAdConvertDeepbidReadV2FlowControlMode) *ApiOpenApi2ToolsAdConvertDeepbidReadGetRequest {
	r.flowControlMode = &flowControlMode
	return r
}

func (r *ApiOpenApi2ToolsAdConvertDeepbidReadGetRequest) SmartBidType(smartBidType ToolsAdConvertDeepbidReadV2SmartBidType) *ApiOpenApi2ToolsAdConvertDeepbidReadGetRequest {
	r.smartBidType = &smartBidType
	return r
}

func (r *ApiOpenApi2ToolsAdConvertDeepbidReadGetRequest) Execute() (*ToolsAdConvertDeepbidReadV2Response, *http.Response, error) {
	return r.ApiService.getExecute(r)
}

func (r *ApiOpenApi2ToolsAdConvertDeepbidReadGetRequest) AccessToken(accessToken string) *ApiOpenApi2ToolsAdConvertDeepbidReadGetRequest {
	r.ctx = context.WithValue(r.ctx, config.ContextAccessToken, accessToken)
	return r
}

func (r *ApiOpenApi2ToolsAdConvertDeepbidReadGetRequest) WithLog(enable bool) *ApiOpenApi2ToolsAdConvertDeepbidReadGetRequest {
	if enable {
		r.ctx = context.WithValue(r.ctx, config.ContextEnableLog, true)
	}
	return r
}

/*
OpenApi2ToolsAdConvertDeepbidReadGet Method for OpenApi2ToolsAdConvertDeepbidReadGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOpenApi2ToolsAdConvertDeepbidReadGetRequest
*/
func (a *ToolsAdConvertDeepbidReadV2ApiService) Get(ctx context.Context) *ApiOpenApi2ToolsAdConvertDeepbidReadGetRequest {
	return &ApiOpenApi2ToolsAdConvertDeepbidReadGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ToolsAdConvertDeepbidReadV2Response
func (a *ToolsAdConvertDeepbidReadV2ApiService) getExecute(r *ApiOpenApi2ToolsAdConvertDeepbidReadGetRequest) (*ToolsAdConvertDeepbidReadV2Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           map[string]*FormFileInfo
		localVarReturnValue *ToolsAdConvertDeepbidReadV2Response
	)

	r.ctx = a.client.prepareCtx(r.ctx)

	localBasePath := a.client.Cfg.GetBasePath()

	localVarPath := localBasePath + "/open_api/2/tools/ad_convert/deepbid/read/"

	localVarHeaderParams := make(map[string]string)
	formFiles = make(map[string]*FormFileInfo)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.advertiserId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "advertiser_id", r.advertiserId)
	}
	if r.assetsIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "assets_ids", r.assetsIds)
	}
	if r.campaignId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "campaign_id", r.campaignId)
	}
	if r.convertId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "convert_id", r.convertId)
	}
	if r.deepExternalAction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deep_external_action", r.deepExternalAction)
	}
	if r.deliveryRange != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "delivery_range", r.deliveryRange)
	}
	if r.externalAction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "external_action", r.externalAction)
	}
	if r.flowControlMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "flow_control_mode", r.flowControlMode)
	}
	if r.smartBidType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "smart_bid_type", r.smartBidType)
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r.ctx, req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
