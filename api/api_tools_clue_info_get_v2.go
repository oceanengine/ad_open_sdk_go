/*
Oceanengine Open Api

巨量引擎开放平台 Open Api


*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"context"
	"net/http"
	"net/url"

	"github.com/oceanengine/ad_open_sdk_go/config"
	. "github.com/oceanengine/ad_open_sdk_go/models"
)

// ToolsClueInfoGetV2ApiService ToolsClueInfoGetV2Api service
type ToolsClueInfoGetV2ApiService service

type ApiOpenApi2ToolsClueInfoGetGetRequest struct {
	ctx           context.Context
	ApiService    *ToolsClueInfoGetV2ApiService
	advertiserIds *[]int64
	clueIds       *[]int64
}

// 广告主id列表，最多100个
func (r *ApiOpenApi2ToolsClueInfoGetGetRequest) AdvertiserIds(advertiserIds []int64) *ApiOpenApi2ToolsClueInfoGetGetRequest {
	r.advertiserIds = &advertiserIds
	return r
}

// 线索id列表，最多100个
func (r *ApiOpenApi2ToolsClueInfoGetGetRequest) ClueIds(clueIds []int64) *ApiOpenApi2ToolsClueInfoGetGetRequest {
	r.clueIds = &clueIds
	return r
}

func (r *ApiOpenApi2ToolsClueInfoGetGetRequest) Execute() (*ToolsClueInfoGetV2Response, *http.Response, error) {
	return r.ApiService.getExecute(r)
}

func (r *ApiOpenApi2ToolsClueInfoGetGetRequest) AccessToken(accessToken string) *ApiOpenApi2ToolsClueInfoGetGetRequest {
	r.ctx = context.WithValue(r.ctx, config.ContextAccessToken, accessToken)
	return r
}

func (r *ApiOpenApi2ToolsClueInfoGetGetRequest) WithLog(enable bool) *ApiOpenApi2ToolsClueInfoGetGetRequest {
	if enable {
		r.ctx = context.WithValue(r.ctx, config.ContextEnableLog, true)
	}
	return r
}

/*
OpenApi2ToolsClueInfoGetGet Method for OpenApi2ToolsClueInfoGetGet

根据线索id获取对应线索的信息，包括返款标签等

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOpenApi2ToolsClueInfoGetGetRequest
*/
func (a *ToolsClueInfoGetV2ApiService) Get(ctx context.Context) *ApiOpenApi2ToolsClueInfoGetGetRequest {
	return &ApiOpenApi2ToolsClueInfoGetGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ToolsClueInfoGetV2Response
func (a *ToolsClueInfoGetV2ApiService) getExecute(r *ApiOpenApi2ToolsClueInfoGetGetRequest) (*ToolsClueInfoGetV2Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           map[string]*FormFileInfo
		localVarReturnValue *ToolsClueInfoGetV2Response
	)

	r.ctx = a.client.prepareCtx(r.ctx)

	localBasePath := a.client.Cfg.GetBasePath()

	localVarPath := localBasePath + "/open_api/2/tools/clue_info/get/"

	localVarHeaderParams := make(map[string]string)
	formFiles = make(map[string]*FormFileInfo)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.advertiserIds == nil {
		return localVarReturnValue, nil, ReportError("advertiserIds is required and must be specified")
	}
	if len(*r.advertiserIds) < 1 {
		return localVarReturnValue, nil, ReportError("advertiserIds must have at least 1 elements")
	}
	if len(*r.advertiserIds) > 100 {
		return localVarReturnValue, nil, ReportError("advertiserIds must have less than 100 elements")
	}
	if r.clueIds == nil {
		return localVarReturnValue, nil, ReportError("clueIds is required and must be specified")
	}
	if len(*r.clueIds) < 1 {
		return localVarReturnValue, nil, ReportError("clueIds must have at least 1 elements")
	}
	if len(*r.clueIds) > 100 {
		return localVarReturnValue, nil, ReportError("clueIds must have less than 100 elements")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "advertiser_ids", r.advertiserIds)
	parameterAddToHeaderOrQuery(localVarQueryParams, "clue_ids", r.clueIds)
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.call(r.ctx, req, &localVarReturnValue)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
