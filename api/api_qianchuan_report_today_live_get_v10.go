/*
Oceanengine Open Api

巨量引擎开放平台 Open Api


*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"context"
	"net/http"
	"net/url"

	"github.com/oceanengine/ad_open_sdk_go/config"
	. "github.com/oceanengine/ad_open_sdk_go/models"
)

// QianchuanReportTodayLiveGetV10ApiService QianchuanReportTodayLiveGetV10Api service
type QianchuanReportTodayLiveGetV10ApiService service

type ApiOpenApiV10QianchuanReportTodayLiveGetGetRequest struct {
	ctx            context.Context
	ApiService     *QianchuanReportTodayLiveGetV10ApiService
	advertiserId   *int64
	awemeId        *int64
	startTime      *string
	endTime        *string
	fields         *[]string
	statsAuthority *QianchuanReportTodayLiveGetV10StatsAuthority
}

// 千川业务账户ID，对应账户类型为&#x60;QIANCHUAN&#x60;
func (r *ApiOpenApiV10QianchuanReportTodayLiveGetGetRequest) AdvertiserId(advertiserId int64) *ApiOpenApiV10QianchuanReportTodayLiveGetGetRequest {
	r.advertiserId = &advertiserId
	return r
}

// 抖音号ID，可通过获取千川账户下可投广抖音号查询
func (r *ApiOpenApiV10QianchuanReportTodayLiveGetGetRequest) AwemeId(awemeId int64) *ApiOpenApiV10QianchuanReportTodayLiveGetGetRequest {
	r.awemeId = &awemeId
	return r
}

// 查询直播开播时间起始范围 格式为&#x60;yyyy-mm-dd hh:mm:ss&#x60; ，例如：2021-04-05 00:00:00 开播时间在start_time和end_time筛选时间区间内的直播间，会被统计
func (r *ApiOpenApiV10QianchuanReportTodayLiveGetGetRequest) StartTime(startTime string) *ApiOpenApiV10QianchuanReportTodayLiveGetGetRequest {
	r.startTime = &startTime
	return r
}

// 查询直播开播时间结束范围 格式为&#x60;yyyy-mm-dd hh:mm:ss&#x60; ，例如：2021-04-05 00:00:00
func (r *ApiOpenApiV10QianchuanReportTodayLiveGetGetRequest) EndTime(endTime string) *ApiOpenApiV10QianchuanReportTodayLiveGetGetRequest {
	r.endTime = &endTime
	return r
}

// 需要查询的消耗指标，具体可参考返回值
func (r *ApiOpenApiV10QianchuanReportTodayLiveGetGetRequest) Fields(fields []string) *ApiOpenApiV10QianchuanReportTodayLiveGetGetRequest {
	r.fields = &fields
	return r
}

// 需要查询的广告账户维度，允许值： -  &#x60;QUALIFICATION&#x60; 同主体账户，仅直客账户支持，查看官方抖音号下同主体全部广告账户的数据表现 - &#x60;CURRENT&#x60; 当前广告账户（默认值）
func (r *ApiOpenApiV10QianchuanReportTodayLiveGetGetRequest) StatsAuthority(statsAuthority QianchuanReportTodayLiveGetV10StatsAuthority) *ApiOpenApiV10QianchuanReportTodayLiveGetGetRequest {
	r.statsAuthority = &statsAuthority
	return r
}

func (r *ApiOpenApiV10QianchuanReportTodayLiveGetGetRequest) Execute() (*QianchuanReportTodayLiveGetV10Response, *http.Response, error) {
	return r.ApiService.getExecute(r)
}

func (r *ApiOpenApiV10QianchuanReportTodayLiveGetGetRequest) AccessToken(accessToken string) *ApiOpenApiV10QianchuanReportTodayLiveGetGetRequest {
	r.ctx = context.WithValue(r.ctx, config.ContextAccessToken, accessToken)
	return r
}

func (r *ApiOpenApiV10QianchuanReportTodayLiveGetGetRequest) WithLog(enable bool) *ApiOpenApiV10QianchuanReportTodayLiveGetGetRequest {
	if enable {
		r.ctx = context.WithValue(r.ctx, config.ContextEnableLog, true)
	}
	return r
}

/*
OpenApiV10QianchuanReportTodayLiveGetGet Method for OpenApiV10QianchuanReportTodayLiveGetGet

查询千川广告主（对应账户类型为`QIANCHUAN`）下直播间维度聚合数据，基于全部流量的情况（包括自然+广告），分析抖音号及直播间在竞价推广中的整体数据表现。直客账户支持查看官方抖音号下同主体全部广告账户的数据表现。支持指标包含消耗，点击等（可通过get_tool_response_field_desc工具查询应答内容）

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOpenApiV10QianchuanReportTodayLiveGetGetRequest
*/
func (a *QianchuanReportTodayLiveGetV10ApiService) Get(ctx context.Context) *ApiOpenApiV10QianchuanReportTodayLiveGetGetRequest {
	return &ApiOpenApiV10QianchuanReportTodayLiveGetGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return QianchuanReportTodayLiveGetV10Response
func (a *QianchuanReportTodayLiveGetV10ApiService) getExecute(r *ApiOpenApiV10QianchuanReportTodayLiveGetGetRequest) (*QianchuanReportTodayLiveGetV10Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           map[string]*FormFileInfo
		localVarReturnValue *QianchuanReportTodayLiveGetV10Response
	)

	r.ctx = a.client.prepareCtx(r.ctx)

	localBasePath := a.client.Cfg.GetBasePath()

	localVarPath := localBasePath + "/open_api/v1.0/qianchuan/report/today_live/get/"

	localVarHeaderParams := make(map[string]string)
	formFiles = make(map[string]*FormFileInfo)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.advertiserId == nil {
		return localVarReturnValue, nil, ReportError("advertiserId is required and must be specified")
	}
	if r.awemeId == nil {
		return localVarReturnValue, nil, ReportError("awemeId is required and must be specified")
	}
	if r.startTime == nil {
		return localVarReturnValue, nil, ReportError("startTime is required and must be specified")
	}
	if r.endTime == nil {
		return localVarReturnValue, nil, ReportError("endTime is required and must be specified")
	}
	if r.fields == nil {
		return localVarReturnValue, nil, ReportError("fields is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "advertiser_id", r.advertiserId)
	parameterAddToHeaderOrQuery(localVarQueryParams, "aweme_id", r.awemeId)
	parameterAddToHeaderOrQuery(localVarQueryParams, "start_time", r.startTime)
	parameterAddToHeaderOrQuery(localVarQueryParams, "end_time", r.endTime)
	parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields)
	if r.statsAuthority != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "stats_authority", r.statsAuthority)
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.call(r.ctx, req, &localVarReturnValue)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
