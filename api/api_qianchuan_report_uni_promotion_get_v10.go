/*
Oceanengine Open Api

巨量引擎开放平台 Open Api


*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"context"
	"net/http"
	"net/url"

	"github.com/oceanengine/ad_open_sdk_go/config"
	. "github.com/oceanengine/ad_open_sdk_go/models"
)

// QianchuanReportUniPromotionGetV10ApiService QianchuanReportUniPromotionGetV10Api service
type QianchuanReportUniPromotionGetV10ApiService service

type ApiOpenApiV10QianchuanReportUniPromotionGetGetRequest struct {
	ctx           context.Context
	ApiService    *QianchuanReportUniPromotionGetV10ApiService
	advertiserId  *int64
	startDate     *string
	endDate       *string
	fields        *[]string
	marketingGoal *QianchuanReportUniPromotionGetV10MarketingGoal
	orderPlatform *QianchuanReportUniPromotionGetV10OrderPlatform
}

// 千川业务账户ID，对应账户类型为&#x60;QIANCHUAN&#x60;
func (r *ApiOpenApiV10QianchuanReportUniPromotionGetGetRequest) AdvertiserId(advertiserId int64) *ApiOpenApiV10QianchuanReportUniPromotionGetGetRequest {
	r.advertiserId = &advertiserId
	return r
}

// 查询统计数据开始时间，格式：&#x60;yyyy-mm-dd&#x60;，如：2021-04-05
func (r *ApiOpenApiV10QianchuanReportUniPromotionGetGetRequest) StartDate(startDate string) *ApiOpenApiV10QianchuanReportUniPromotionGetGetRequest {
	r.startDate = &startDate
	return r
}

// 查询统计数据结束时间，格式：&#x60;yyyy-mm-dd&#x60;，如：2021-04-05
func (r *ApiOpenApiV10QianchuanReportUniPromotionGetGetRequest) EndDate(endDate string) *ApiOpenApiV10QianchuanReportUniPromotionGetGetRequest {
	r.endDate = &endDate
	return r
}

// 查询指标，详见应答中data描述的返回指标
func (r *ApiOpenApiV10QianchuanReportUniPromotionGetGetRequest) Fields(fields []string) *ApiOpenApiV10QianchuanReportUniPromotionGetGetRequest {
	r.fields = &fields
	return r
}

// 按照营销目标过滤，允许值：  - &#x60;ALL&#x60; 全部（默认值） - &#x60;VIDEO_PROM_GOODS&#x60; 商品全域  - &#x60;LIVE_PROM_GOODS&#x60; 直播全域
func (r *ApiOpenApiV10QianchuanReportUniPromotionGetGetRequest) MarketingGoal(marketingGoal QianchuanReportUniPromotionGetV10MarketingGoal) *ApiOpenApiV10QianchuanReportUniPromotionGetGetRequest {
	r.marketingGoal = &marketingGoal
	return r
}

// 下单平台，允许值：  - &#x60;ALL&#x60; 全部  - &#x60;QIANCHUAN&#x60; 千川PC（默认值）  - &#x60;ECP_AWEME&#x60; 小店随心推，仅marketing_goal&#x3D;&#x60;ALL&#x60;时，支持传入
func (r *ApiOpenApiV10QianchuanReportUniPromotionGetGetRequest) OrderPlatform(orderPlatform QianchuanReportUniPromotionGetV10OrderPlatform) *ApiOpenApiV10QianchuanReportUniPromotionGetGetRequest {
	r.orderPlatform = &orderPlatform
	return r
}

func (r *ApiOpenApiV10QianchuanReportUniPromotionGetGetRequest) Execute() (*QianchuanReportUniPromotionGetV10Response, *http.Response, error) {
	return r.ApiService.getExecute(r)
}

func (r *ApiOpenApiV10QianchuanReportUniPromotionGetGetRequest) AccessToken(accessToken string) *ApiOpenApiV10QianchuanReportUniPromotionGetGetRequest {
	r.ctx = context.WithValue(r.ctx, config.ContextAccessToken, accessToken)
	return r
}

func (r *ApiOpenApiV10QianchuanReportUniPromotionGetGetRequest) WithLog(enable bool) *ApiOpenApiV10QianchuanReportUniPromotionGetGetRequest {
	if enable {
		r.ctx = context.WithValue(r.ctx, config.ContextEnableLog, true)
	}
	return r
}

/*
OpenApiV10QianchuanReportUniPromotionGetGet Method for OpenApiV10QianchuanReportUniPromotionGetGet

查询千川广告主账号下全域推广投放账户维度聚合数据。支持指标包含消耗，点击等（可通过get_tool_response_field_desc工具查询应答内容）

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOpenApiV10QianchuanReportUniPromotionGetGetRequest
*/
func (a *QianchuanReportUniPromotionGetV10ApiService) Get(ctx context.Context) *ApiOpenApiV10QianchuanReportUniPromotionGetGetRequest {
	return &ApiOpenApiV10QianchuanReportUniPromotionGetGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return QianchuanReportUniPromotionGetV10Response
func (a *QianchuanReportUniPromotionGetV10ApiService) getExecute(r *ApiOpenApiV10QianchuanReportUniPromotionGetGetRequest) (*QianchuanReportUniPromotionGetV10Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           map[string]*FormFileInfo
		localVarReturnValue *QianchuanReportUniPromotionGetV10Response
	)

	r.ctx = a.client.prepareCtx(r.ctx)

	localBasePath := a.client.Cfg.GetBasePath()

	localVarPath := localBasePath + "/open_api/v1.0/qianchuan/report/uni_promotion/get/"

	localVarHeaderParams := make(map[string]string)
	formFiles = make(map[string]*FormFileInfo)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.advertiserId == nil {
		return localVarReturnValue, nil, ReportError("advertiserId is required and must be specified")
	}
	if r.startDate == nil {
		return localVarReturnValue, nil, ReportError("startDate is required and must be specified")
	}
	if r.endDate == nil {
		return localVarReturnValue, nil, ReportError("endDate is required and must be specified")
	}
	if r.fields == nil {
		return localVarReturnValue, nil, ReportError("fields is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "advertiser_id", r.advertiserId)
	parameterAddToHeaderOrQuery(localVarQueryParams, "start_date", r.startDate)
	parameterAddToHeaderOrQuery(localVarQueryParams, "end_date", r.endDate)
	if r.marketingGoal != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "marketing_goal", r.marketingGoal)
	}
	if r.orderPlatform != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order_platform", r.orderPlatform)
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields)
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.call(r.ctx, req, &localVarReturnValue)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
