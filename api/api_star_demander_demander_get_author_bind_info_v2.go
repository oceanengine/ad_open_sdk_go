/*
Oceanengine Open Api

巨量引擎开放平台 Open Api


*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"context"
	"net/http"
	"net/url"

	"github.com/oceanengine/ad_open_sdk_go/config"
	. "github.com/oceanengine/ad_open_sdk_go/models"
)

// StarDemanderDemanderGetAuthorBindInfoV2ApiService StarDemanderDemanderGetAuthorBindInfoV2Api service
type StarDemanderDemanderGetAuthorBindInfoV2ApiService service

type ApiOpenApi2StarDemanderDemanderGetAuthorBindInfoGetRequest struct {
	ctx        context.Context
	ApiService *StarDemanderDemanderGetAuthorBindInfoV2ApiService
	starId     *int64
	bizUid     *[]string
	startTime  *int64
	endTime    *int64
	page       *int64
	limit      *int64
}

func (r *ApiOpenApi2StarDemanderDemanderGetAuthorBindInfoGetRequest) StarId(starId int64) *ApiOpenApi2StarDemanderDemanderGetAuthorBindInfoGetRequest {
	r.starId = &starId
	return r
}

// 查询指定达人信息
func (r *ApiOpenApi2StarDemanderDemanderGetAuthorBindInfoGetRequest) BizUid(bizUid []string) *ApiOpenApi2StarDemanderDemanderGetAuthorBindInfoGetRequest {
	r.bizUid = &bizUid
	return r
}

// 根据绑定时间范围查询，不传biz_uid时，必传
func (r *ApiOpenApi2StarDemanderDemanderGetAuthorBindInfoGetRequest) StartTime(startTime int64) *ApiOpenApi2StarDemanderDemanderGetAuthorBindInfoGetRequest {
	r.startTime = &startTime
	return r
}

// 根据绑定时间范围查询，不传biz_uid时，必传
func (r *ApiOpenApi2StarDemanderDemanderGetAuthorBindInfoGetRequest) EndTime(endTime int64) *ApiOpenApi2StarDemanderDemanderGetAuthorBindInfoGetRequest {
	r.endTime = &endTime
	return r
}

// 根据绑定时间范围查询，不传biz_uid时，必传
func (r *ApiOpenApi2StarDemanderDemanderGetAuthorBindInfoGetRequest) Page(page int64) *ApiOpenApi2StarDemanderDemanderGetAuthorBindInfoGetRequest {
	r.page = &page
	return r
}

// 根据绑定时间范围查询，不传biz_uid时，必传
func (r *ApiOpenApi2StarDemanderDemanderGetAuthorBindInfoGetRequest) Limit(limit int64) *ApiOpenApi2StarDemanderDemanderGetAuthorBindInfoGetRequest {
	r.limit = &limit
	return r
}

func (r *ApiOpenApi2StarDemanderDemanderGetAuthorBindInfoGetRequest) Execute() (*StarDemanderDemanderGetAuthorBindInfoV2Response, *http.Response, error) {
	return r.ApiService.getExecute(r)
}

func (r *ApiOpenApi2StarDemanderDemanderGetAuthorBindInfoGetRequest) AccessToken(accessToken string) *ApiOpenApi2StarDemanderDemanderGetAuthorBindInfoGetRequest {
	r.ctx = context.WithValue(r.ctx, config.ContextAccessToken, accessToken)
	return r
}

func (r *ApiOpenApi2StarDemanderDemanderGetAuthorBindInfoGetRequest) WithLog(enable bool) *ApiOpenApi2StarDemanderDemanderGetAuthorBindInfoGetRequest {
	if enable {
		r.ctx = context.WithValue(r.ctx, config.ContextEnableLog, true)
	}
	return r
}

/*
OpenApi2StarDemanderDemanderGetAuthorBindInfoGet Method for OpenApi2StarDemanderDemanderGetAuthorBindInfoGet

查询客户阵地达人绑定的星图账号信息

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOpenApi2StarDemanderDemanderGetAuthorBindInfoGetRequest
*/
func (a *StarDemanderDemanderGetAuthorBindInfoV2ApiService) Get(ctx context.Context) *ApiOpenApi2StarDemanderDemanderGetAuthorBindInfoGetRequest {
	return &ApiOpenApi2StarDemanderDemanderGetAuthorBindInfoGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return StarDemanderDemanderGetAuthorBindInfoV2Response
func (a *StarDemanderDemanderGetAuthorBindInfoV2ApiService) getExecute(r *ApiOpenApi2StarDemanderDemanderGetAuthorBindInfoGetRequest) (*StarDemanderDemanderGetAuthorBindInfoV2Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           map[string]*FormFileInfo
		localVarReturnValue *StarDemanderDemanderGetAuthorBindInfoV2Response
	)

	r.ctx = a.client.prepareCtx(r.ctx)

	localBasePath := a.client.Cfg.GetBasePath()

	localVarPath := localBasePath + "/open_api/2/star/demander/demander_get_author_bind_info/"

	localVarHeaderParams := make(map[string]string)
	formFiles = make(map[string]*FormFileInfo)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.starId == nil {
		return localVarReturnValue, nil, ReportError("starId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "star_id", r.starId)
	if r.bizUid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "biz_uid", r.bizUid)
	}
	if r.startTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_time", r.startTime)
	}
	if r.endTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end_time", r.endTime)
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page)
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit)
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.call(r.ctx, req, &localVarReturnValue)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
