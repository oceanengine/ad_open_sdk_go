/*
Oceanengine Open Api

巨量引擎开放平台 Open Api


*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"context"
	"net/http"
	"net/url"
	"strings"

	"github.com/oceanengine/ad_open_sdk_go/config"
	. "github.com/oceanengine/ad_open_sdk_go/models"
)

// ToolsAbTestListGetV2ApiService ToolsAbTestListGetV2Api service
type ToolsAbTestListGetV2ApiService service

type ApiOpenApi2ToolsAbTestListGetGetRequest struct {
	ctx          context.Context
	ApiService   *ToolsAbTestListGetV2ApiService
	advertiserId *int64
	version      string
	filter       *ToolsAbTestListGetV2Filter
	page         *int32
	pageSize     *int32
}

// 广告主ID
func (r *ApiOpenApi2ToolsAbTestListGetGetRequest) AdvertiserId(advertiserId int64) *ApiOpenApi2ToolsAbTestListGetGetRequest {
	r.advertiserId = &advertiserId
	return r
}

// 过滤器
func (r *ApiOpenApi2ToolsAbTestListGetGetRequest) Filter(filter ToolsAbTestListGetV2Filter) *ApiOpenApi2ToolsAbTestListGetGetRequest {
	r.filter = &filter
	return r
}

// 页码，默认：1
func (r *ApiOpenApi2ToolsAbTestListGetGetRequest) Page(page int32) *ApiOpenApi2ToolsAbTestListGetGetRequest {
	r.page = &page
	return r
}

// 页面大小，默认：10
func (r *ApiOpenApi2ToolsAbTestListGetGetRequest) PageSize(pageSize int32) *ApiOpenApi2ToolsAbTestListGetGetRequest {
	r.pageSize = &pageSize
	return r
}

func (r *ApiOpenApi2ToolsAbTestListGetGetRequest) Execute() (*ToolsAbTestListGetV2Response, *http.Response, error) {
	return r.ApiService.getExecute(r)
}

func (r *ApiOpenApi2ToolsAbTestListGetGetRequest) AccessToken(accessToken string) *ApiOpenApi2ToolsAbTestListGetGetRequest {
	r.ctx = context.WithValue(r.ctx, config.ContextAccessToken, accessToken)
	return r
}

func (r *ApiOpenApi2ToolsAbTestListGetGetRequest) WithLog(enable bool) *ApiOpenApi2ToolsAbTestListGetGetRequest {
	if enable {
		r.ctx = context.WithValue(r.ctx, config.ContextEnableLog, true)
	}
	return r
}

/*
OpenApi2ToolsAbTestListGetGet Method for OpenApi2ToolsAbTestListGetGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param version request version
	@return ApiOpenApi2ToolsAbTestListGetGetRequest
*/
func (a *ToolsAbTestListGetV2ApiService) Get(ctx context.Context, version string) *ApiOpenApi2ToolsAbTestListGetGetRequest {
	return &ApiOpenApi2ToolsAbTestListGetGetRequest{
		ApiService: a,
		ctx:        ctx,
		version:    version,
	}
}

// Execute executes the request
//
//	@return ToolsAbTestListGetV2Response
func (a *ToolsAbTestListGetV2ApiService) getExecute(r *ApiOpenApi2ToolsAbTestListGetGetRequest) (*ToolsAbTestListGetV2Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           map[string]*FormFileInfo
		localVarReturnValue *ToolsAbTestListGetV2Response
	)

	r.ctx = a.client.prepareCtx(r.ctx)

	localBasePath := a.client.Cfg.GetBasePath()

	localVarPath := localBasePath + "/open_api/2/tools/ab_test_list/get/"
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", url.PathEscape(parameterValueToString(r.version, "version")), -1)

	localVarHeaderParams := make(map[string]string)
	formFiles = make(map[string]*FormFileInfo)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.advertiserId == nil {
		return localVarReturnValue, nil, ReportError("advertiserId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "advertiser_id", r.advertiserId)
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter)
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page)
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize)
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.call(r.ctx, req, &localVarReturnValue)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
