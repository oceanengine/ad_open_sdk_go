/*
Oceanengine Open Api

巨量引擎开放平台 Open Api


*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"context"
	"net/http"
	"net/url"

	"github.com/oceanengine/ad_open_sdk_go/config"
	. "github.com/oceanengine/ad_open_sdk_go/models"
)

// EventManagerEventsCreateV2ApiService EventManagerEventsCreateV2Api service
type EventManagerEventsCreateV2ApiService service

type ApiOpenApi2EventManagerEventsCreatePostRequest struct {
	ctx                               context.Context
	ApiService                        *EventManagerEventsCreateV2ApiService
	eventManagerEventsCreateV2Request *EventManagerEventsCreateV2Request
}

func (r *ApiOpenApi2EventManagerEventsCreatePostRequest) EventManagerEventsCreateV2Request(eventManagerEventsCreateV2Request EventManagerEventsCreateV2Request) *ApiOpenApi2EventManagerEventsCreatePostRequest {
	r.eventManagerEventsCreateV2Request = &eventManagerEventsCreateV2Request
	return r
}

func (r *ApiOpenApi2EventManagerEventsCreatePostRequest) Execute() (*EventManagerEventsCreateV2Response, *http.Response, error) {
	return r.ApiService.postExecute(r)
}

func (r *ApiOpenApi2EventManagerEventsCreatePostRequest) AccessToken(accessToken string) *ApiOpenApi2EventManagerEventsCreatePostRequest {
	r.ctx = context.WithValue(r.ctx, config.ContextAccessToken, accessToken)
	return r
}

func (r *ApiOpenApi2EventManagerEventsCreatePostRequest) WithLog(enable bool) *ApiOpenApi2EventManagerEventsCreatePostRequest {
	if enable {
		r.ctx = context.WithValue(r.ctx, config.ContextEnableLog, true)
	}
	return r
}

/*
OpenApi2EventManagerEventsCreatePost Method for OpenApi2EventManagerEventsCreatePost

> 此接口用于在资产下创建单个事件

* 需要线通过【获取推广内容】接口获取要创建的资产ID（asset_id）
* 需要先通过【获取可创建事件】接口获取到某资产下支持创建的事件ID（event_id）
* 当资产类型是三方落地页时，同资产同事件支持多种回传方式，但XPATH不能与JSSDK和EXTERNAL_API同时存在

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOpenApi2EventManagerEventsCreatePostRequest
*/
func (a *EventManagerEventsCreateV2ApiService) Post(ctx context.Context) *ApiOpenApi2EventManagerEventsCreatePostRequest {
	return &ApiOpenApi2EventManagerEventsCreatePostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return EventManagerEventsCreateV2Response
func (a *EventManagerEventsCreateV2ApiService) postExecute(r *ApiOpenApi2EventManagerEventsCreatePostRequest) (*EventManagerEventsCreateV2Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           map[string]*FormFileInfo
		localVarReturnValue *EventManagerEventsCreateV2Response
	)

	r.ctx = a.client.prepareCtx(r.ctx)

	localBasePath := a.client.Cfg.GetBasePath()

	localVarPath := localBasePath + "/open_api/2/event_manager/events/create/"

	localVarHeaderParams := make(map[string]string)
	formFiles = make(map[string]*FormFileInfo)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// body params
	localVarPostBody = r.eventManagerEventsCreateV2Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.call(r.ctx, req, &localVarReturnValue)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
