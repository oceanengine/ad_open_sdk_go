/*
Oceanengine Open Api

巨量引擎开放平台 Open Api


*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"context"
	"net/http"
	"net/url"

	"github.com/oceanengine/ad_open_sdk_go/config"
	. "github.com/oceanengine/ad_open_sdk_go/models"
)

// QueryInvoiceSelfV2ApiService QueryInvoiceSelfV2Api service
type QueryInvoiceSelfV2ApiService service

type ApiOpenApi2QueryInvoiceSelfGetRequest struct {
	ctx               context.Context
	ApiService        *QueryInvoiceSelfV2ApiService
	localAccountId    *int64
	pageSize          *int64
	page              *int64
	statementSerials  *[]string
	projectSerials    *[]string
	invoiceStatuses   *[]int64
	invoiceSerialList *[]string
	contractSerial    *string
	submitStartTime   *string
	submitEndTime     *string
	invoiceStartDate  *string
	invoiceEndDate    *string
	invoiceType       *QueryInvoiceSelfV2InvoiceType
	differenceInvoice *QueryInvoiceSelfV2DifferenceInvoice
	revertStatusList  *[]*QueryInvoiceSelfV2RevertStatusList
	platform          *QueryInvoiceSelfV2Platform
}

func (r *ApiOpenApi2QueryInvoiceSelfGetRequest) LocalAccountId(localAccountId int64) *ApiOpenApi2QueryInvoiceSelfGetRequest {
	r.localAccountId = &localAccountId
	return r
}

// 每页数量 最多100
func (r *ApiOpenApi2QueryInvoiceSelfGetRequest) PageSize(pageSize int64) *ApiOpenApi2QueryInvoiceSelfGetRequest {
	r.pageSize = &pageSize
	return r
}

// 页码
func (r *ApiOpenApi2QueryInvoiceSelfGetRequest) Page(page int64) *ApiOpenApi2QueryInvoiceSelfGetRequest {
	r.page = &page
	return r
}

// 结算单编号
func (r *ApiOpenApi2QueryInvoiceSelfGetRequest) StatementSerials(statementSerials []string) *ApiOpenApi2QueryInvoiceSelfGetRequest {
	r.statementSerials = &statementSerials
	return r
}

// 项目编号
func (r *ApiOpenApi2QueryInvoiceSelfGetRequest) ProjectSerials(projectSerials []string) *ApiOpenApi2QueryInvoiceSelfGetRequest {
	r.projectSerials = &projectSerials
	return r
}

// 开票状态 CANCELLED(0, \&quot;已作废\&quot;),NO_INVOICED(1, \&quot;未开票\&quot;),PART_INVOICED(2, \&quot;部分开票\&quot;),INVOICED(3, \&quot;已开票\&quot;),NO_NEED_INVOICE(4, \&quot;无需开票\&quot;);
func (r *ApiOpenApi2QueryInvoiceSelfGetRequest) InvoiceStatuses(invoiceStatuses []int64) *ApiOpenApi2QueryInvoiceSelfGetRequest {
	r.invoiceStatuses = &invoiceStatuses
	return r
}

// 开票单编号
func (r *ApiOpenApi2QueryInvoiceSelfGetRequest) InvoiceSerialList(invoiceSerialList []string) *ApiOpenApi2QueryInvoiceSelfGetRequest {
	r.invoiceSerialList = &invoiceSerialList
	return r
}

// 合同编号
func (r *ApiOpenApi2QueryInvoiceSelfGetRequest) ContractSerial(contractSerial string) *ApiOpenApi2QueryInvoiceSelfGetRequest {
	r.contractSerial = &contractSerial
	return r
}

// 提交审批时间范围开始时间，格式：%Y-%m-%d %H:%M:%S
func (r *ApiOpenApi2QueryInvoiceSelfGetRequest) SubmitStartTime(submitStartTime string) *ApiOpenApi2QueryInvoiceSelfGetRequest {
	r.submitStartTime = &submitStartTime
	return r
}

// 提交审批时间范围结束时间，格式：%Y-%m-%d %H:%M:%S
func (r *ApiOpenApi2QueryInvoiceSelfGetRequest) SubmitEndTime(submitEndTime string) *ApiOpenApi2QueryInvoiceSelfGetRequest {
	r.submitEndTime = &submitEndTime
	return r
}

// 实际开票时间范围开始时间，格式：%Y-%m-%d
func (r *ApiOpenApi2QueryInvoiceSelfGetRequest) InvoiceStartDate(invoiceStartDate string) *ApiOpenApi2QueryInvoiceSelfGetRequest {
	r.invoiceStartDate = &invoiceStartDate
	return r
}

// 实际开票时间范围结束时间，格式：%Y-%m-%d
func (r *ApiOpenApi2QueryInvoiceSelfGetRequest) InvoiceEndDate(invoiceEndDate string) *ApiOpenApi2QueryInvoiceSelfGetRequest {
	r.invoiceEndDate = &invoiceEndDate
	return r
}

// 发票类型
func (r *ApiOpenApi2QueryInvoiceSelfGetRequest) InvoiceType(invoiceType QueryInvoiceSelfV2InvoiceType) *ApiOpenApi2QueryInvoiceSelfGetRequest {
	r.invoiceType = &invoiceType
	return r
}

// 是否差额开票
func (r *ApiOpenApi2QueryInvoiceSelfGetRequest) DifferenceInvoice(differenceInvoice QueryInvoiceSelfV2DifferenceInvoice) *ApiOpenApi2QueryInvoiceSelfGetRequest {
	r.differenceInvoice = &differenceInvoice
	return r
}

// 红冲状态
func (r *ApiOpenApi2QueryInvoiceSelfGetRequest) RevertStatusList(revertStatusList []*QueryInvoiceSelfV2RevertStatusList) *ApiOpenApi2QueryInvoiceSelfGetRequest {
	r.revertStatusList = &revertStatusList
	return r
}

// 开票平台
func (r *ApiOpenApi2QueryInvoiceSelfGetRequest) Platform(platform QueryInvoiceSelfV2Platform) *ApiOpenApi2QueryInvoiceSelfGetRequest {
	r.platform = &platform
	return r
}

func (r *ApiOpenApi2QueryInvoiceSelfGetRequest) Execute() (*QueryInvoiceSelfV2Response, *http.Response, error) {
	return r.ApiService.getExecute(r)
}

func (r *ApiOpenApi2QueryInvoiceSelfGetRequest) AccessToken(accessToken string) *ApiOpenApi2QueryInvoiceSelfGetRequest {
	r.ctx = context.WithValue(r.ctx, config.ContextAccessToken, accessToken)
	return r
}

func (r *ApiOpenApi2QueryInvoiceSelfGetRequest) WithLog(enable bool) *ApiOpenApi2QueryInvoiceSelfGetRequest {
	if enable {
		r.ctx = context.WithValue(r.ctx, config.ContextEnableLog, true)
	}
	return r
}

/*
OpenApi2QueryInvoiceSelfGet Method for OpenApi2QueryInvoiceSelfGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOpenApi2QueryInvoiceSelfGetRequest
*/
func (a *QueryInvoiceSelfV2ApiService) Get(ctx context.Context) *ApiOpenApi2QueryInvoiceSelfGetRequest {
	return &ApiOpenApi2QueryInvoiceSelfGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return QueryInvoiceSelfV2Response
func (a *QueryInvoiceSelfV2ApiService) getExecute(r *ApiOpenApi2QueryInvoiceSelfGetRequest) (*QueryInvoiceSelfV2Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           map[string]*FormFileInfo
		localVarReturnValue *QueryInvoiceSelfV2Response
	)

	r.ctx = a.client.prepareCtx(r.ctx)

	localBasePath := a.client.Cfg.GetBasePath()

	localVarPath := localBasePath + "/open_api/2/query/invoice/self/"

	localVarHeaderParams := make(map[string]string)
	formFiles = make(map[string]*FormFileInfo)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.localAccountId == nil {
		return localVarReturnValue, nil, ReportError("localAccountId is required and must be specified")
	}
	if r.pageSize == nil {
		return localVarReturnValue, nil, ReportError("pageSize is required and must be specified")
	}
	if r.page == nil {
		return localVarReturnValue, nil, ReportError("page is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "local_account_id", r.localAccountId)
	if r.statementSerials != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "statement_serials", r.statementSerials)
	}
	if r.projectSerials != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "project_serials", r.projectSerials)
	}
	if r.invoiceStatuses != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "invoice_statuses", r.invoiceStatuses)
	}
	if r.invoiceSerialList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "invoice_serial_list", r.invoiceSerialList)
	}
	if r.contractSerial != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contract_serial", r.contractSerial)
	}
	if r.submitStartTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "submit_start_time", r.submitStartTime)
	}
	if r.submitEndTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "submit_end_time", r.submitEndTime)
	}
	if r.invoiceStartDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "invoice_start_date", r.invoiceStartDate)
	}
	if r.invoiceEndDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "invoice_end_date", r.invoiceEndDate)
	}
	if r.invoiceType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "invoice_type", r.invoiceType)
	}
	if r.differenceInvoice != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "difference_invoice", r.differenceInvoice)
	}
	if r.revertStatusList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "revert_status_list", r.revertStatusList)
	}
	if r.platform != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "platform", r.platform)
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize)
	parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page)
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.call(r.ctx, req, &localVarReturnValue)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
