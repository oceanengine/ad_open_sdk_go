/*
Oceanengine Open Api

巨量引擎开放平台 Open Api


*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"context"
	"net/http"
	"net/url"

	"github.com/oceanengine/ad_open_sdk_go/config"
	. "github.com/oceanengine/ad_open_sdk_go/models"
)

// BrandOperationLogQueryV30ApiService BrandOperationLogQueryV30Api service
type BrandOperationLogQueryV30ApiService service

type ApiOpenApiV30BrandOperationLogQueryGetRequest struct {
	ctx          context.Context
	ApiService   *BrandOperationLogQueryV30ApiService
	advertiserId *int64
	objectId     *int64
	objectType   *BrandOperationLogQueryV30ObjectType
	fields       *[]*BrandOperationLogQueryV30Fields
	startDate    *string
	endDate      *string
	page         *BrandOperationLogQueryV30Page
}

// 广告主ID
func (r *ApiOpenApiV30BrandOperationLogQueryGetRequest) AdvertiserId(advertiserId int64) *ApiOpenApiV30BrandOperationLogQueryGetRequest {
	r.advertiserId = &advertiserId
	return r
}

// 查询对象ID
func (r *ApiOpenApiV30BrandOperationLogQueryGetRequest) ObjectId(objectId int64) *ApiOpenApiV30BrandOperationLogQueryGetRequest {
	r.objectId = &objectId
	return r
}

// 查询类型
func (r *ApiOpenApiV30BrandOperationLogQueryGetRequest) ObjectType(objectType BrandOperationLogQueryV30ObjectType) *ApiOpenApiV30BrandOperationLogQueryGetRequest {
	r.objectType = &objectType
	return r
}

// 查询范围
func (r *ApiOpenApiV30BrandOperationLogQueryGetRequest) Fields(fields []*BrandOperationLogQueryV30Fields) *ApiOpenApiV30BrandOperationLogQueryGetRequest {
	r.fields = &fields
	return r
}

// 开始日期
func (r *ApiOpenApiV30BrandOperationLogQueryGetRequest) StartDate(startDate string) *ApiOpenApiV30BrandOperationLogQueryGetRequest {
	r.startDate = &startDate
	return r
}

// 结束日期
func (r *ApiOpenApiV30BrandOperationLogQueryGetRequest) EndDate(endDate string) *ApiOpenApiV30BrandOperationLogQueryGetRequest {
	r.endDate = &endDate
	return r
}

// 分页
func (r *ApiOpenApiV30BrandOperationLogQueryGetRequest) Page(page BrandOperationLogQueryV30Page) *ApiOpenApiV30BrandOperationLogQueryGetRequest {
	r.page = &page
	return r
}

func (r *ApiOpenApiV30BrandOperationLogQueryGetRequest) Execute() (*BrandOperationLogQueryV30Response, *http.Response, error) {
	return r.ApiService.getExecute(r)
}

func (r *ApiOpenApiV30BrandOperationLogQueryGetRequest) AccessToken(accessToken string) *ApiOpenApiV30BrandOperationLogQueryGetRequest {
	r.ctx = context.WithValue(r.ctx, config.ContextAccessToken, accessToken)
	return r
}

func (r *ApiOpenApiV30BrandOperationLogQueryGetRequest) WithLog(enable bool) *ApiOpenApiV30BrandOperationLogQueryGetRequest {
	if enable {
		r.ctx = context.WithValue(r.ctx, config.ContextEnableLog, true)
	}
	return r
}

/*
OpenApiV30BrandOperationLogQueryGet Method for OpenApiV30BrandOperationLogQueryGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOpenApiV30BrandOperationLogQueryGetRequest
*/
func (a *BrandOperationLogQueryV30ApiService) Get(ctx context.Context) *ApiOpenApiV30BrandOperationLogQueryGetRequest {
	return &ApiOpenApiV30BrandOperationLogQueryGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return BrandOperationLogQueryV30Response
func (a *BrandOperationLogQueryV30ApiService) getExecute(r *ApiOpenApiV30BrandOperationLogQueryGetRequest) (*BrandOperationLogQueryV30Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           map[string]*FormFileInfo
		localVarReturnValue *BrandOperationLogQueryV30Response
	)

	r.ctx = a.client.prepareCtx(r.ctx)

	localBasePath := a.client.Cfg.GetBasePath()

	localVarPath := localBasePath + "/open_api/v3.0/brand/operation_log/query/"

	localVarHeaderParams := make(map[string]string)
	formFiles = make(map[string]*FormFileInfo)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.advertiserId == nil {
		return localVarReturnValue, nil, ReportError("advertiserId is required and must be specified")
	}
	if r.objectId == nil {
		return localVarReturnValue, nil, ReportError("objectId is required and must be specified")
	}
	if r.objectType == nil {
		return localVarReturnValue, nil, ReportError("objectType is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "advertiser_id", r.advertiserId)
	parameterAddToHeaderOrQuery(localVarQueryParams, "object_id", r.objectId)
	parameterAddToHeaderOrQuery(localVarQueryParams, "object_type", r.objectType)
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields)
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_date", r.startDate)
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end_date", r.endDate)
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page)
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.call(r.ctx, req, &localVarReturnValue)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
