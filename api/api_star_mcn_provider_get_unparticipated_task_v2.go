/*
Oceanengine Open Api

巨量引擎开放平台 Open Api


*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"context"
	"net/http"
	"net/url"

	"github.com/oceanengine/ad_open_sdk_go/config"
	. "github.com/oceanengine/ad_open_sdk_go/models"
)

// StarMcnProviderGetUnparticipatedTaskV2ApiService StarMcnProviderGetUnparticipatedTaskV2Api service
type StarMcnProviderGetUnparticipatedTaskV2ApiService service

type ApiOpenApi2StarMcnProviderGetUnparticipatedTaskGetRequest struct {
	ctx                 context.Context
	ApiService          *StarMcnProviderGetUnparticipatedTaskV2ApiService
	starId              *int64
	page                *int32
	pageSize            *int32
	payType             *int64
	minCreateTimeStamp  *int64
	maxCreateTimeStamp  *int64
	firstClassCategory  *int32
	secondClassCategory *int32
	productCategory     *int32
	appId               *string
	appName             *string
	demandId            *int64
	gameType            *int64
	componentType       *int64
	searchTags          *[]int64
	firstCategoryId     *int64
	secondCategoryId    *int64
}

func (r *ApiOpenApi2StarMcnProviderGetUnparticipatedTaskGetRequest) StarId(starId int64) *ApiOpenApi2StarMcnProviderGetUnparticipatedTaskGetRequest {
	r.starId = &starId
	return r
}

func (r *ApiOpenApi2StarMcnProviderGetUnparticipatedTaskGetRequest) Page(page int32) *ApiOpenApi2StarMcnProviderGetUnparticipatedTaskGetRequest {
	r.page = &page
	return r
}

func (r *ApiOpenApi2StarMcnProviderGetUnparticipatedTaskGetRequest) PageSize(pageSize int32) *ApiOpenApi2StarMcnProviderGetUnparticipatedTaskGetRequest {
	r.pageSize = &pageSize
	return r
}

func (r *ApiOpenApi2StarMcnProviderGetUnparticipatedTaskGetRequest) PayType(payType int64) *ApiOpenApi2StarMcnProviderGetUnparticipatedTaskGetRequest {
	r.payType = &payType
	return r
}

// 最小创建时间
func (r *ApiOpenApi2StarMcnProviderGetUnparticipatedTaskGetRequest) MinCreateTimeStamp(minCreateTimeStamp int64) *ApiOpenApi2StarMcnProviderGetUnparticipatedTaskGetRequest {
	r.minCreateTimeStamp = &minCreateTimeStamp
	return r
}

// 最大创建时间
func (r *ApiOpenApi2StarMcnProviderGetUnparticipatedTaskGetRequest) MaxCreateTimeStamp(maxCreateTimeStamp int64) *ApiOpenApi2StarMcnProviderGetUnparticipatedTaskGetRequest {
	r.maxCreateTimeStamp = &maxCreateTimeStamp
	return r
}

func (r *ApiOpenApi2StarMcnProviderGetUnparticipatedTaskGetRequest) FirstClassCategory(firstClassCategory int32) *ApiOpenApi2StarMcnProviderGetUnparticipatedTaskGetRequest {
	r.firstClassCategory = &firstClassCategory
	return r
}

func (r *ApiOpenApi2StarMcnProviderGetUnparticipatedTaskGetRequest) SecondClassCategory(secondClassCategory int32) *ApiOpenApi2StarMcnProviderGetUnparticipatedTaskGetRequest {
	r.secondClassCategory = &secondClassCategory
	return r
}

func (r *ApiOpenApi2StarMcnProviderGetUnparticipatedTaskGetRequest) ProductCategory(productCategory int32) *ApiOpenApi2StarMcnProviderGetUnparticipatedTaskGetRequest {
	r.productCategory = &productCategory
	return r
}

// 小程序id
func (r *ApiOpenApi2StarMcnProviderGetUnparticipatedTaskGetRequest) AppId(appId string) *ApiOpenApi2StarMcnProviderGetUnparticipatedTaskGetRequest {
	r.appId = &appId
	return r
}

// 小程序名称
func (r *ApiOpenApi2StarMcnProviderGetUnparticipatedTaskGetRequest) AppName(appName string) *ApiOpenApi2StarMcnProviderGetUnparticipatedTaskGetRequest {
	r.appName = &appName
	return r
}

func (r *ApiOpenApi2StarMcnProviderGetUnparticipatedTaskGetRequest) DemandId(demandId int64) *ApiOpenApi2StarMcnProviderGetUnparticipatedTaskGetRequest {
	r.demandId = &demandId
	return r
}

func (r *ApiOpenApi2StarMcnProviderGetUnparticipatedTaskGetRequest) GameType(gameType int64) *ApiOpenApi2StarMcnProviderGetUnparticipatedTaskGetRequest {
	r.gameType = &gameType
	return r
}

func (r *ApiOpenApi2StarMcnProviderGetUnparticipatedTaskGetRequest) ComponentType(componentType int64) *ApiOpenApi2StarMcnProviderGetUnparticipatedTaskGetRequest {
	r.componentType = &componentType
	return r
}

func (r *ApiOpenApi2StarMcnProviderGetUnparticipatedTaskGetRequest) SearchTags(searchTags []int64) *ApiOpenApi2StarMcnProviderGetUnparticipatedTaskGetRequest {
	r.searchTags = &searchTags
	return r
}

func (r *ApiOpenApi2StarMcnProviderGetUnparticipatedTaskGetRequest) FirstCategoryId(firstCategoryId int64) *ApiOpenApi2StarMcnProviderGetUnparticipatedTaskGetRequest {
	r.firstCategoryId = &firstCategoryId
	return r
}

func (r *ApiOpenApi2StarMcnProviderGetUnparticipatedTaskGetRequest) SecondCategoryId(secondCategoryId int64) *ApiOpenApi2StarMcnProviderGetUnparticipatedTaskGetRequest {
	r.secondCategoryId = &secondCategoryId
	return r
}

func (r *ApiOpenApi2StarMcnProviderGetUnparticipatedTaskGetRequest) Execute() (*StarMcnProviderGetUnparticipatedTaskV2Response, *http.Response, error) {
	return r.ApiService.getExecute(r)
}

func (r *ApiOpenApi2StarMcnProviderGetUnparticipatedTaskGetRequest) AccessToken(accessToken string) *ApiOpenApi2StarMcnProviderGetUnparticipatedTaskGetRequest {
	r.ctx = context.WithValue(r.ctx, config.ContextAccessToken, accessToken)
	return r
}

func (r *ApiOpenApi2StarMcnProviderGetUnparticipatedTaskGetRequest) WithLog(enable bool) *ApiOpenApi2StarMcnProviderGetUnparticipatedTaskGetRequest {
	if enable {
		r.ctx = context.WithValue(r.ctx, config.ContextEnableLog, true)
	}
	return r
}

/*
OpenApi2StarMcnProviderGetUnparticipatedTaskGet Method for OpenApi2StarMcnProviderGetUnparticipatedTaskGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOpenApi2StarMcnProviderGetUnparticipatedTaskGetRequest
*/
func (a *StarMcnProviderGetUnparticipatedTaskV2ApiService) Get(ctx context.Context) *ApiOpenApi2StarMcnProviderGetUnparticipatedTaskGetRequest {
	return &ApiOpenApi2StarMcnProviderGetUnparticipatedTaskGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return StarMcnProviderGetUnparticipatedTaskV2Response
func (a *StarMcnProviderGetUnparticipatedTaskV2ApiService) getExecute(r *ApiOpenApi2StarMcnProviderGetUnparticipatedTaskGetRequest) (*StarMcnProviderGetUnparticipatedTaskV2Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           map[string]*FormFileInfo
		localVarReturnValue *StarMcnProviderGetUnparticipatedTaskV2Response
	)

	r.ctx = a.client.prepareCtx(r.ctx)

	localBasePath := a.client.Cfg.GetBasePath()

	localVarPath := localBasePath + "/open_api/2/star/mcn/provider_get_unparticipated_task/"

	localVarHeaderParams := make(map[string]string)
	formFiles = make(map[string]*FormFileInfo)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.starId == nil {
		return localVarReturnValue, nil, ReportError("starId is required and must be specified")
	}
	if r.page == nil {
		return localVarReturnValue, nil, ReportError("page is required and must be specified")
	}
	if r.pageSize == nil {
		return localVarReturnValue, nil, ReportError("pageSize is required and must be specified")
	}
	if *r.pageSize < 1 {
		return localVarReturnValue, nil, ReportError("pageSize must be greater than 1")
	}
	if *r.pageSize > 10 {
		return localVarReturnValue, nil, ReportError("pageSize must be less than 10")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "star_id", r.starId)
	parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page)
	parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize)
	if r.payType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pay_type", r.payType)
	}
	if r.minCreateTimeStamp != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "min_create_time_stamp", r.minCreateTimeStamp)
	}
	if r.maxCreateTimeStamp != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "max_create_time_stamp", r.maxCreateTimeStamp)
	}
	if r.firstClassCategory != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "first_class_category", r.firstClassCategory)
	}
	if r.secondClassCategory != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "second_class_category", r.secondClassCategory)
	}
	if r.productCategory != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "product_category", r.productCategory)
	}
	if r.appId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "app_id", r.appId)
	}
	if r.appName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "app_name", r.appName)
	}
	if r.demandId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "demand_id", r.demandId)
	}
	if r.gameType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "game_type", r.gameType)
	}
	if r.componentType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "component_type", r.componentType)
	}
	if r.searchTags != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search_tags", r.searchTags)
	}
	if r.firstCategoryId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "first_category_id", r.firstCategoryId)
	}
	if r.secondCategoryId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "second_category_id", r.secondCategoryId)
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.call(r.ctx, req, &localVarReturnValue)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
