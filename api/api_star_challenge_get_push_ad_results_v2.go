/*
Oceanengine Open Api

巨量引擎开放平台 Open Api


*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"context"
	"net/http"
	"net/url"

	"github.com/oceanengine/ad_open_sdk_go/config"
	. "github.com/oceanengine/ad_open_sdk_go/models"
)

// StarChallengeGetPushAdResultsV2ApiService StarChallengeGetPushAdResultsV2Api service
type StarChallengeGetPushAdResultsV2ApiService service

type ApiOpenApi2StarChallengeGetPushAdResultsGetRequest struct {
	ctx             context.Context
	ApiService      *StarChallengeGetPushAdResultsV2ApiService
	starId          *int64
	challengeTaskId *int64
	itemIds         *[]int64
}

// 客户星图ID
func (r *ApiOpenApi2StarChallengeGetPushAdResultsGetRequest) StarId(starId int64) *ApiOpenApi2StarChallengeGetPushAdResultsGetRequest {
	r.starId = &starId
	return r
}

// 投稿任务ID
func (r *ApiOpenApi2StarChallengeGetPushAdResultsGetRequest) ChallengeTaskId(challengeTaskId int64) *ApiOpenApi2StarChallengeGetPushAdResultsGetRequest {
	r.challengeTaskId = &challengeTaskId
	return r
}

// 作品ID列表，单次最多50个
func (r *ApiOpenApi2StarChallengeGetPushAdResultsGetRequest) ItemIds(itemIds []int64) *ApiOpenApi2StarChallengeGetPushAdResultsGetRequest {
	r.itemIds = &itemIds
	return r
}

func (r *ApiOpenApi2StarChallengeGetPushAdResultsGetRequest) Execute() (*StarChallengeGetPushAdResultsV2Response, *http.Response, error) {
	return r.ApiService.getExecute(r)
}

func (r *ApiOpenApi2StarChallengeGetPushAdResultsGetRequest) AccessToken(accessToken string) *ApiOpenApi2StarChallengeGetPushAdResultsGetRequest {
	r.ctx = context.WithValue(r.ctx, config.ContextAccessToken, accessToken)
	return r
}

func (r *ApiOpenApi2StarChallengeGetPushAdResultsGetRequest) WithLog(enable bool) *ApiOpenApi2StarChallengeGetPushAdResultsGetRequest {
	if enable {
		r.ctx = context.WithValue(r.ctx, config.ContextEnableLog, true)
	}
	return r
}

/*
OpenApi2StarChallengeGetPushAdResultsGet Method for OpenApi2StarChallengeGetPushAdResultsGet

查询投稿任务广告推送结果

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOpenApi2StarChallengeGetPushAdResultsGetRequest
*/
func (a *StarChallengeGetPushAdResultsV2ApiService) Get(ctx context.Context) *ApiOpenApi2StarChallengeGetPushAdResultsGetRequest {
	return &ApiOpenApi2StarChallengeGetPushAdResultsGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return StarChallengeGetPushAdResultsV2Response
func (a *StarChallengeGetPushAdResultsV2ApiService) getExecute(r *ApiOpenApi2StarChallengeGetPushAdResultsGetRequest) (*StarChallengeGetPushAdResultsV2Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           map[string]*FormFileInfo
		localVarReturnValue *StarChallengeGetPushAdResultsV2Response
	)

	r.ctx = a.client.prepareCtx(r.ctx)

	localBasePath := a.client.Cfg.GetBasePath()

	localVarPath := localBasePath + "/open_api/2/star/challenge/get_push_ad_results/"

	localVarHeaderParams := make(map[string]string)
	formFiles = make(map[string]*FormFileInfo)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.starId == nil {
		return localVarReturnValue, nil, ReportError("starId is required and must be specified")
	}
	if r.challengeTaskId == nil {
		return localVarReturnValue, nil, ReportError("challengeTaskId is required and must be specified")
	}
	if r.itemIds == nil {
		return localVarReturnValue, nil, ReportError("itemIds is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "star_id", r.starId)
	parameterAddToHeaderOrQuery(localVarQueryParams, "challenge_task_id", r.challengeTaskId)
	parameterAddToHeaderOrQuery(localVarQueryParams, "item_ids", r.itemIds)
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.call(r.ctx, req, &localVarReturnValue)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
