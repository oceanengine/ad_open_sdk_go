/*
Oceanengine Open Api

巨量引擎开放平台 Open Api


*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"context"
	"net/http"
	"net/url"

	"github.com/oceanengine/ad_open_sdk_go/config"
	. "github.com/oceanengine/ad_open_sdk_go/models"
)

// ToolsClueLifeGetV2ApiService ToolsClueLifeGetV2Api service
type ToolsClueLifeGetV2ApiService service

type ApiOpenApi2ToolsClueLifeGetPostRequest struct {
	ctx                       context.Context
	ApiService                *ToolsClueLifeGetV2ApiService
	toolsClueLifeGetV2Request *ToolsClueLifeGetV2Request
}

func (r *ApiOpenApi2ToolsClueLifeGetPostRequest) ToolsClueLifeGetV2Request(toolsClueLifeGetV2Request ToolsClueLifeGetV2Request) *ApiOpenApi2ToolsClueLifeGetPostRequest {
	r.toolsClueLifeGetV2Request = &toolsClueLifeGetV2Request
	return r
}

func (r *ApiOpenApi2ToolsClueLifeGetPostRequest) Execute() (*ToolsClueLifeGetV2Response, *http.Response, error) {
	return r.ApiService.postExecute(r)
}

func (r *ApiOpenApi2ToolsClueLifeGetPostRequest) AccessToken(accessToken string) *ApiOpenApi2ToolsClueLifeGetPostRequest {
	r.ctx = context.WithValue(r.ctx, config.ContextAccessToken, accessToken)
	return r
}

func (r *ApiOpenApi2ToolsClueLifeGetPostRequest) WithLog(enable bool) *ApiOpenApi2ToolsClueLifeGetPostRequest {
	if enable {
		r.ctx = context.WithValue(r.ctx, config.ContextEnableLog, true)
	}
	return r
}

/*
OpenApi2ToolsClueLifeGetPost Method for OpenApi2ToolsClueLifeGetPost

该接口用于获取广告主的本地推线索列表。

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOpenApi2ToolsClueLifeGetPostRequest
*/
func (a *ToolsClueLifeGetV2ApiService) Post(ctx context.Context) *ApiOpenApi2ToolsClueLifeGetPostRequest {
	return &ApiOpenApi2ToolsClueLifeGetPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ToolsClueLifeGetV2Response
func (a *ToolsClueLifeGetV2ApiService) postExecute(r *ApiOpenApi2ToolsClueLifeGetPostRequest) (*ToolsClueLifeGetV2Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           map[string]*FormFileInfo
		localVarReturnValue *ToolsClueLifeGetV2Response
	)

	r.ctx = a.client.prepareCtx(r.ctx)

	localBasePath := a.client.Cfg.GetBasePath()

	localVarPath := localBasePath + "/open_api/2/tools/clue/life/get/"

	localVarHeaderParams := make(map[string]string)
	formFiles = make(map[string]*FormFileInfo)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// body params
	localVarPostBody = r.toolsClueLifeGetV2Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.call(r.ctx, req, &localVarReturnValue)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
