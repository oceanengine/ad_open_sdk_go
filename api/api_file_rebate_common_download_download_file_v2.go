/*
Oceanengine Open Api

巨量引擎开放平台 Open Api


*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"context"
	"net/http"
	"net/url"

	"github.com/oceanengine/ad_open_sdk_go/config"
	. "github.com/oceanengine/ad_open_sdk_go/models"
)

// FileRebateCommonDownloadDownloadFileV2ApiService FileRebateCommonDownloadDownloadFileV2Api service
type FileRebateCommonDownloadDownloadFileV2ApiService service

type ApiOpenApi2FileRebateCommonDownloadDownloadFileGetRequest struct {
	ctx        context.Context
	ApiService *FileRebateCommonDownloadDownloadFileV2ApiService
	agentId    *int64
	taskId     *string
}

// 代理商帐户ID
func (r *ApiOpenApi2FileRebateCommonDownloadDownloadFileGetRequest) AgentId(agentId int64) *ApiOpenApi2FileRebateCommonDownloadDownloadFileGetRequest {
	r.agentId = &agentId
	return r
}

// 任务ID
func (r *ApiOpenApi2FileRebateCommonDownloadDownloadFileGetRequest) TaskId(taskId string) *ApiOpenApi2FileRebateCommonDownloadDownloadFileGetRequest {
	r.taskId = &taskId
	return r
}

func (r *ApiOpenApi2FileRebateCommonDownloadDownloadFileGetRequest) Execute() (*FileRebateCommonDownloadDownloadFileV2Response, *http.Response, error) {
	return r.ApiService.getExecute(r)
}

func (r *ApiOpenApi2FileRebateCommonDownloadDownloadFileGetRequest) AccessToken(accessToken string) *ApiOpenApi2FileRebateCommonDownloadDownloadFileGetRequest {
	r.ctx = context.WithValue(r.ctx, config.ContextAccessToken, accessToken)
	return r
}

func (r *ApiOpenApi2FileRebateCommonDownloadDownloadFileGetRequest) WithLog(enable bool) *ApiOpenApi2FileRebateCommonDownloadDownloadFileGetRequest {
	if enable {
		r.ctx = context.WithValue(r.ctx, config.ContextEnableLog, true)
	}
	return r
}

/*
OpenApi2FileRebateCommonDownloadDownloadFileGet Method for OpenApi2FileRebateCommonDownloadDownloadFileGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOpenApi2FileRebateCommonDownloadDownloadFileGetRequest
*/
func (a *FileRebateCommonDownloadDownloadFileV2ApiService) Get(ctx context.Context) *ApiOpenApi2FileRebateCommonDownloadDownloadFileGetRequest {
	return &ApiOpenApi2FileRebateCommonDownloadDownloadFileGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return FileRebateCommonDownloadDownloadFileV2Response
func (a *FileRebateCommonDownloadDownloadFileV2ApiService) getExecute(r *ApiOpenApi2FileRebateCommonDownloadDownloadFileGetRequest) (*FileRebateCommonDownloadDownloadFileV2Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           map[string]*FormFileInfo
		localVarReturnValue *FileRebateCommonDownloadDownloadFileV2Response
	)

	r.ctx = a.client.prepareCtx(r.ctx)

	localBasePath := a.client.Cfg.GetBasePath()

	localVarPath := localBasePath + "/open_api/2/file/rebate/common_download/download_file/"

	localVarHeaderParams := make(map[string]string)
	formFiles = make(map[string]*FormFileInfo)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.agentId == nil {
		return localVarReturnValue, nil, ReportError("agentId is required and must be specified")
	}
	if r.taskId == nil {
		return localVarReturnValue, nil, ReportError("taskId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "agent_id", r.agentId)
	parameterAddToHeaderOrQuery(localVarQueryParams, "task_id", r.taskId)
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.call(r.ctx, req, &localVarReturnValue)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
