/*
Oceanengine Open Api

巨量引擎开放平台 Open Api


*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"context"
	"net/http"
	"net/url"

	"github.com/oceanengine/ad_open_sdk_go/config"
	. "github.com/oceanengine/ad_open_sdk_go/models"
)

// QianchuanUniPromotionProductAwemeGetV10ApiService QianchuanUniPromotionProductAwemeGetV10Api service
type QianchuanUniPromotionProductAwemeGetV10ApiService service

type ApiOpenApiV10QianchuanUniPromotionProductAwemeGetGetRequest struct {
	ctx          context.Context
	ApiService   *QianchuanUniPromotionProductAwemeGetV10ApiService
	advertiserId *int64
	awemeId      *int64
	filtering    *QianchuanUniPromotionProductAwemeGetV10Filtering
	cursor       *int64
	platform     *QianchuanUniPromotionProductAwemeGetV10Platform
}

func (r *ApiOpenApiV10QianchuanUniPromotionProductAwemeGetGetRequest) AdvertiserId(advertiserId int64) *ApiOpenApiV10QianchuanUniPromotionProductAwemeGetGetRequest {
	r.advertiserId = &advertiserId
	return r
}

// 抖音号id
func (r *ApiOpenApiV10QianchuanUniPromotionProductAwemeGetGetRequest) AwemeId(awemeId int64) *ApiOpenApiV10QianchuanUniPromotionProductAwemeGetGetRequest {
	r.awemeId = &awemeId
	return r
}

// 过滤器
func (r *ApiOpenApiV10QianchuanUniPromotionProductAwemeGetGetRequest) Filtering(filtering QianchuanUniPromotionProductAwemeGetV10Filtering) *ApiOpenApiV10QianchuanUniPromotionProductAwemeGetGetRequest {
	r.filtering = &filtering
	return r
}

// 页码游标值
func (r *ApiOpenApiV10QianchuanUniPromotionProductAwemeGetGetRequest) Cursor(cursor int64) *ApiOpenApiV10QianchuanUniPromotionProductAwemeGetGetRequest {
	r.cursor = &cursor
	return r
}

// 0-Unknown 1-PC 2-随心推 不传默认PC
func (r *ApiOpenApiV10QianchuanUniPromotionProductAwemeGetGetRequest) Platform(platform QianchuanUniPromotionProductAwemeGetV10Platform) *ApiOpenApiV10QianchuanUniPromotionProductAwemeGetGetRequest {
	r.platform = &platform
	return r
}

func (r *ApiOpenApiV10QianchuanUniPromotionProductAwemeGetGetRequest) Execute() (*QianchuanUniPromotionProductAwemeGetV10Response, *http.Response, error) {
	return r.ApiService.getExecute(r)
}

func (r *ApiOpenApiV10QianchuanUniPromotionProductAwemeGetGetRequest) AccessToken(accessToken string) *ApiOpenApiV10QianchuanUniPromotionProductAwemeGetGetRequest {
	r.ctx = context.WithValue(r.ctx, config.ContextAccessToken, accessToken)
	return r
}

func (r *ApiOpenApiV10QianchuanUniPromotionProductAwemeGetGetRequest) WithLog(enable bool) *ApiOpenApiV10QianchuanUniPromotionProductAwemeGetGetRequest {
	if enable {
		r.ctx = context.WithValue(r.ctx, config.ContextEnableLog, true)
	}
	return r
}

/*
OpenApiV10QianchuanUniPromotionProductAwemeGetGet Method for OpenApiV10QianchuanUniPromotionProductAwemeGetGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOpenApiV10QianchuanUniPromotionProductAwemeGetGetRequest
*/
func (a *QianchuanUniPromotionProductAwemeGetV10ApiService) Get(ctx context.Context) *ApiOpenApiV10QianchuanUniPromotionProductAwemeGetGetRequest {
	return &ApiOpenApiV10QianchuanUniPromotionProductAwemeGetGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return QianchuanUniPromotionProductAwemeGetV10Response
func (a *QianchuanUniPromotionProductAwemeGetV10ApiService) getExecute(r *ApiOpenApiV10QianchuanUniPromotionProductAwemeGetGetRequest) (*QianchuanUniPromotionProductAwemeGetV10Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           map[string]*FormFileInfo
		localVarReturnValue *QianchuanUniPromotionProductAwemeGetV10Response
	)

	r.ctx = a.client.prepareCtx(r.ctx)

	localBasePath := a.client.Cfg.GetBasePath()

	localVarPath := localBasePath + "/open_api/v1.0/qianchuan/uni_promotion/product/aweme/get/"

	localVarHeaderParams := make(map[string]string)
	formFiles = make(map[string]*FormFileInfo)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.advertiserId == nil {
		return localVarReturnValue, nil, ReportError("advertiserId is required and must be specified")
	}
	if r.awemeId == nil {
		return localVarReturnValue, nil, ReportError("awemeId is required and must be specified")
	}
	if *r.awemeId < 0 {
		return localVarReturnValue, nil, ReportError("awemeId must be greater than 0")
	}
	if r.filtering == nil {
		return localVarReturnValue, nil, ReportError("filtering is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "advertiser_id", r.advertiserId)
	parameterAddToHeaderOrQuery(localVarQueryParams, "aweme_id", r.awemeId)
	parameterAddToHeaderOrQuery(localVarQueryParams, "filtering", r.filtering)
	if r.cursor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cursor", r.cursor)
	}
	if r.platform != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "platform", r.platform)
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.call(r.ctx, req, &localVarReturnValue)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
