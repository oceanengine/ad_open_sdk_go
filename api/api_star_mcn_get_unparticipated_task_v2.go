/*
Oceanengine Open Api

巨量引擎开放平台 Open Api


*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"context"
	"net/http"
	"net/url"

	"github.com/oceanengine/ad_open_sdk_go/config"
	. "github.com/oceanengine/ad_open_sdk_go/models"
)

// StarMcnGetUnparticipatedTaskV2ApiService StarMcnGetUnparticipatedTaskV2Api service
type StarMcnGetUnparticipatedTaskV2ApiService service

type ApiOpenApi2StarMcnGetUnparticipatedTaskGetRequest struct {
	ctx                 context.Context
	ApiService          *StarMcnGetUnparticipatedTaskV2ApiService
	starId              *int64
	page                *int32
	pageSize            *int32
	payType             *int32
	minCreateTimeStamp  *int64
	maxCreateTimeStamp  *int64
	firstClassCategory  *int32
	secondClassCategory *int32
	keyword             *string
	settlementType      *int32
	playletCategory     *int32
	playletTheme        *[]int32
	playletGender       *int32
	playletHot          *int32
	playletFirstWeek    *int32
	playletSecondWeek   *int32
	highProfitChallenge *int32
	developerId         *int64
}

func (r *ApiOpenApi2StarMcnGetUnparticipatedTaskGetRequest) StarId(starId int64) *ApiOpenApi2StarMcnGetUnparticipatedTaskGetRequest {
	r.starId = &starId
	return r
}

func (r *ApiOpenApi2StarMcnGetUnparticipatedTaskGetRequest) Page(page int32) *ApiOpenApi2StarMcnGetUnparticipatedTaskGetRequest {
	r.page = &page
	return r
}

func (r *ApiOpenApi2StarMcnGetUnparticipatedTaskGetRequest) PageSize(pageSize int32) *ApiOpenApi2StarMcnGetUnparticipatedTaskGetRequest {
	r.pageSize = &pageSize
	return r
}

func (r *ApiOpenApi2StarMcnGetUnparticipatedTaskGetRequest) PayType(payType int32) *ApiOpenApi2StarMcnGetUnparticipatedTaskGetRequest {
	r.payType = &payType
	return r
}

func (r *ApiOpenApi2StarMcnGetUnparticipatedTaskGetRequest) MinCreateTimeStamp(minCreateTimeStamp int64) *ApiOpenApi2StarMcnGetUnparticipatedTaskGetRequest {
	r.minCreateTimeStamp = &minCreateTimeStamp
	return r
}

func (r *ApiOpenApi2StarMcnGetUnparticipatedTaskGetRequest) MaxCreateTimeStamp(maxCreateTimeStamp int64) *ApiOpenApi2StarMcnGetUnparticipatedTaskGetRequest {
	r.maxCreateTimeStamp = &maxCreateTimeStamp
	return r
}

func (r *ApiOpenApi2StarMcnGetUnparticipatedTaskGetRequest) FirstClassCategory(firstClassCategory int32) *ApiOpenApi2StarMcnGetUnparticipatedTaskGetRequest {
	r.firstClassCategory = &firstClassCategory
	return r
}

func (r *ApiOpenApi2StarMcnGetUnparticipatedTaskGetRequest) SecondClassCategory(secondClassCategory int32) *ApiOpenApi2StarMcnGetUnparticipatedTaskGetRequest {
	r.secondClassCategory = &secondClassCategory
	return r
}

func (r *ApiOpenApi2StarMcnGetUnparticipatedTaskGetRequest) Keyword(keyword string) *ApiOpenApi2StarMcnGetUnparticipatedTaskGetRequest {
	r.keyword = &keyword
	return r
}

func (r *ApiOpenApi2StarMcnGetUnparticipatedTaskGetRequest) SettlementType(settlementType int32) *ApiOpenApi2StarMcnGetUnparticipatedTaskGetRequest {
	r.settlementType = &settlementType
	return r
}

func (r *ApiOpenApi2StarMcnGetUnparticipatedTaskGetRequest) PlayletCategory(playletCategory int32) *ApiOpenApi2StarMcnGetUnparticipatedTaskGetRequest {
	r.playletCategory = &playletCategory
	return r
}

func (r *ApiOpenApi2StarMcnGetUnparticipatedTaskGetRequest) PlayletTheme(playletTheme []int32) *ApiOpenApi2StarMcnGetUnparticipatedTaskGetRequest {
	r.playletTheme = &playletTheme
	return r
}

func (r *ApiOpenApi2StarMcnGetUnparticipatedTaskGetRequest) PlayletGender(playletGender int32) *ApiOpenApi2StarMcnGetUnparticipatedTaskGetRequest {
	r.playletGender = &playletGender
	return r
}

func (r *ApiOpenApi2StarMcnGetUnparticipatedTaskGetRequest) PlayletHot(playletHot int32) *ApiOpenApi2StarMcnGetUnparticipatedTaskGetRequest {
	r.playletHot = &playletHot
	return r
}

func (r *ApiOpenApi2StarMcnGetUnparticipatedTaskGetRequest) PlayletFirstWeek(playletFirstWeek int32) *ApiOpenApi2StarMcnGetUnparticipatedTaskGetRequest {
	r.playletFirstWeek = &playletFirstWeek
	return r
}

func (r *ApiOpenApi2StarMcnGetUnparticipatedTaskGetRequest) PlayletSecondWeek(playletSecondWeek int32) *ApiOpenApi2StarMcnGetUnparticipatedTaskGetRequest {
	r.playletSecondWeek = &playletSecondWeek
	return r
}

func (r *ApiOpenApi2StarMcnGetUnparticipatedTaskGetRequest) HighProfitChallenge(highProfitChallenge int32) *ApiOpenApi2StarMcnGetUnparticipatedTaskGetRequest {
	r.highProfitChallenge = &highProfitChallenge
	return r
}

func (r *ApiOpenApi2StarMcnGetUnparticipatedTaskGetRequest) DeveloperId(developerId int64) *ApiOpenApi2StarMcnGetUnparticipatedTaskGetRequest {
	r.developerId = &developerId
	return r
}

func (r *ApiOpenApi2StarMcnGetUnparticipatedTaskGetRequest) Execute() (*StarMcnGetUnparticipatedTaskV2Response, *http.Response, error) {
	return r.ApiService.getExecute(r)
}

func (r *ApiOpenApi2StarMcnGetUnparticipatedTaskGetRequest) AccessToken(accessToken string) *ApiOpenApi2StarMcnGetUnparticipatedTaskGetRequest {
	r.ctx = context.WithValue(r.ctx, config.ContextAccessToken, accessToken)
	return r
}

func (r *ApiOpenApi2StarMcnGetUnparticipatedTaskGetRequest) WithLog(enable bool) *ApiOpenApi2StarMcnGetUnparticipatedTaskGetRequest {
	if enable {
		r.ctx = context.WithValue(r.ctx, config.ContextEnableLog, true)
	}
	return r
}

/*
OpenApi2StarMcnGetUnparticipatedTaskGet Method for OpenApi2StarMcnGetUnparticipatedTaskGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOpenApi2StarMcnGetUnparticipatedTaskGetRequest
*/
func (a *StarMcnGetUnparticipatedTaskV2ApiService) Get(ctx context.Context) *ApiOpenApi2StarMcnGetUnparticipatedTaskGetRequest {
	return &ApiOpenApi2StarMcnGetUnparticipatedTaskGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return StarMcnGetUnparticipatedTaskV2Response
func (a *StarMcnGetUnparticipatedTaskV2ApiService) getExecute(r *ApiOpenApi2StarMcnGetUnparticipatedTaskGetRequest) (*StarMcnGetUnparticipatedTaskV2Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           map[string]*FormFileInfo
		localVarReturnValue *StarMcnGetUnparticipatedTaskV2Response
	)

	r.ctx = a.client.prepareCtx(r.ctx)

	localBasePath := a.client.Cfg.GetBasePath()

	localVarPath := localBasePath + "/open_api/2/star/mcn/get_unparticipated_task/"

	localVarHeaderParams := make(map[string]string)
	formFiles = make(map[string]*FormFileInfo)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.starId == nil {
		return localVarReturnValue, nil, ReportError("starId is required and must be specified")
	}
	if r.page == nil {
		return localVarReturnValue, nil, ReportError("page is required and must be specified")
	}
	if r.pageSize == nil {
		return localVarReturnValue, nil, ReportError("pageSize is required and must be specified")
	}
	if *r.pageSize < 1 {
		return localVarReturnValue, nil, ReportError("pageSize must be greater than 1")
	}
	if *r.pageSize > 10 {
		return localVarReturnValue, nil, ReportError("pageSize must be less than 10")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "star_id", r.starId)
	parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page)
	parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize)
	if r.payType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pay_type", r.payType)
	}
	if r.minCreateTimeStamp != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "min_create_time_stamp", r.minCreateTimeStamp)
	}
	if r.maxCreateTimeStamp != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "max_create_time_stamp", r.maxCreateTimeStamp)
	}
	if r.firstClassCategory != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "first_class_category", r.firstClassCategory)
	}
	if r.secondClassCategory != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "second_class_category", r.secondClassCategory)
	}
	if r.keyword != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "keyword", r.keyword)
	}
	if r.settlementType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "settlement_type", r.settlementType)
	}
	if r.playletCategory != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "playlet_category", r.playletCategory)
	}
	if r.playletTheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "playlet_theme", r.playletTheme)
	}
	if r.playletGender != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "playlet_gender", r.playletGender)
	}
	if r.playletHot != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "playlet_hot", r.playletHot)
	}
	if r.playletFirstWeek != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "playlet_first_week", r.playletFirstWeek)
	}
	if r.playletSecondWeek != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "playlet_second_week", r.playletSecondWeek)
	}
	if r.highProfitChallenge != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "high_profit_challenge", r.highProfitChallenge)
	}
	if r.developerId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "developer_id", r.developerId)
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.call(r.ctx, req, &localVarReturnValue)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
