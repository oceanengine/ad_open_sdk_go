/*
Oceanengine Open Api

巨量引擎开放平台 Open Api


*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"context"
	"net/http"
	"net/url"

	"github.com/oceanengine/ad_open_sdk_go/config"
	. "github.com/oceanengine/ad_open_sdk_go/models"
)

// QianchuanAwemeUniPromotionReportV10ApiService QianchuanAwemeUniPromotionReportV10Api service
type QianchuanAwemeUniPromotionReportV10ApiService service

type ApiOpenApiV10QianchuanAwemeUniPromotionReportGetRequest struct {
	ctx           context.Context
	ApiService    *QianchuanAwemeUniPromotionReportV10ApiService
	advertiserId  *int64
	marketingGoal *QianchuanAwemeUniPromotionReportV10MarketingGoal
	startDate     *string
	endDate       *string
	fields        *[]string
}

func (r *ApiOpenApiV10QianchuanAwemeUniPromotionReportGetRequest) AdvertiserId(advertiserId int64) *ApiOpenApiV10QianchuanAwemeUniPromotionReportGetRequest {
	r.advertiserId = &advertiserId
	return r
}

// 按营销目标过滤, VIDEO_PROM_GOODS：商品全域
func (r *ApiOpenApiV10QianchuanAwemeUniPromotionReportGetRequest) MarketingGoal(marketingGoal QianchuanAwemeUniPromotionReportV10MarketingGoal) *ApiOpenApiV10QianchuanAwemeUniPromotionReportGetRequest {
	r.marketingGoal = &marketingGoal
	return r
}

func (r *ApiOpenApiV10QianchuanAwemeUniPromotionReportGetRequest) StartDate(startDate string) *ApiOpenApiV10QianchuanAwemeUniPromotionReportGetRequest {
	r.startDate = &startDate
	return r
}

func (r *ApiOpenApiV10QianchuanAwemeUniPromotionReportGetRequest) EndDate(endDate string) *ApiOpenApiV10QianchuanAwemeUniPromotionReportGetRequest {
	r.endDate = &endDate
	return r
}

// 需要查询的消耗指标
func (r *ApiOpenApiV10QianchuanAwemeUniPromotionReportGetRequest) Fields(fields []string) *ApiOpenApiV10QianchuanAwemeUniPromotionReportGetRequest {
	r.fields = &fields
	return r
}

func (r *ApiOpenApiV10QianchuanAwemeUniPromotionReportGetRequest) Execute() (*QianchuanAwemeUniPromotionReportV10Response, *http.Response, error) {
	return r.ApiService.getExecute(r)
}

func (r *ApiOpenApiV10QianchuanAwemeUniPromotionReportGetRequest) AccessToken(accessToken string) *ApiOpenApiV10QianchuanAwemeUniPromotionReportGetRequest {
	r.ctx = context.WithValue(r.ctx, config.ContextAccessToken, accessToken)
	return r
}

func (r *ApiOpenApiV10QianchuanAwemeUniPromotionReportGetRequest) WithLog(enable bool) *ApiOpenApiV10QianchuanAwemeUniPromotionReportGetRequest {
	if enable {
		r.ctx = context.WithValue(r.ctx, config.ContextEnableLog, true)
	}
	return r
}

/*
OpenApiV10QianchuanAwemeUniPromotionReportGet Method for OpenApiV10QianchuanAwemeUniPromotionReportGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOpenApiV10QianchuanAwemeUniPromotionReportGetRequest
*/
func (a *QianchuanAwemeUniPromotionReportV10ApiService) Get(ctx context.Context) *ApiOpenApiV10QianchuanAwemeUniPromotionReportGetRequest {
	return &ApiOpenApiV10QianchuanAwemeUniPromotionReportGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return QianchuanAwemeUniPromotionReportV10Response
func (a *QianchuanAwemeUniPromotionReportV10ApiService) getExecute(r *ApiOpenApiV10QianchuanAwemeUniPromotionReportGetRequest) (*QianchuanAwemeUniPromotionReportV10Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           map[string]*FormFileInfo
		localVarReturnValue *QianchuanAwemeUniPromotionReportV10Response
	)

	r.ctx = a.client.prepareCtx(r.ctx)

	localBasePath := a.client.Cfg.GetBasePath()

	localVarPath := localBasePath + "/open_api/v1.0/qianchuan/aweme/uni_promotion/report/"

	localVarHeaderParams := make(map[string]string)
	formFiles = make(map[string]*FormFileInfo)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.advertiserId == nil {
		return localVarReturnValue, nil, ReportError("advertiserId is required and must be specified")
	}
	if *r.advertiserId < 0 {
		return localVarReturnValue, nil, ReportError("advertiserId must be greater than 0")
	}
	if r.marketingGoal == nil {
		return localVarReturnValue, nil, ReportError("marketingGoal is required and must be specified")
	}
	if r.startDate == nil {
		return localVarReturnValue, nil, ReportError("startDate is required and must be specified")
	}
	if r.endDate == nil {
		return localVarReturnValue, nil, ReportError("endDate is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "advertiser_id", r.advertiserId)
	parameterAddToHeaderOrQuery(localVarQueryParams, "marketing_goal", r.marketingGoal)
	parameterAddToHeaderOrQuery(localVarQueryParams, "start_date", r.startDate)
	parameterAddToHeaderOrQuery(localVarQueryParams, "end_date", r.endDate)
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields)
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.call(r.ctx, req, &localVarReturnValue)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
