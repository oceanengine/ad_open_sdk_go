/*
Oceanengine Open Api

巨量引擎开放平台 Open Api

API version: 1.1.15
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"fmt"
)

// ToolsClueLifeCallbackV2ClueConvertState
type ToolsClueLifeCallbackV2ClueConvertState string

// List of tools_clue_life_callback_v2_clue_convert_state
const (
	ARRIVAL_ToolsClueLifeCallbackV2ClueConvertState             ToolsClueLifeCallbackV2ClueConvertState = "ARRIVAL"
	CLUE_CONFIRM_ToolsClueLifeCallbackV2ClueConvertState        ToolsClueLifeCallbackV2ClueConvertState = "CLUE_CONFIRM"
	CLUE_HIGH_INTENTION_ToolsClueLifeCallbackV2ClueConvertState ToolsClueLifeCallbackV2ClueConvertState = "CLUE_HIGH_INTENTION"
	CONVERSION_CLASS_ToolsClueLifeCallbackV2ClueConvertState    ToolsClueLifeCallbackV2ClueConvertState = "CONVERSION_CLASS"
	INVALID_EVENT_ToolsClueLifeCallbackV2ClueConvertState       ToolsClueLifeCallbackV2ClueConvertState = "INVALID_EVENT"
)

// All allowed values of ToolsClueLifeCallbackV2ClueConvertState enum
var AllowedToolsClueLifeCallbackV2ClueConvertStateEnumValues = []ToolsClueLifeCallbackV2ClueConvertState{
	"ARRIVAL",
	"CLUE_CONFIRM",
	"CLUE_HIGH_INTENTION",
	"CONVERSION_CLASS",
	"INVALID_EVENT",
}

// NewToolsClueLifeCallbackV2ClueConvertStateFromValue returns a pointer to a valid ToolsClueLifeCallbackV2ClueConvertState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewToolsClueLifeCallbackV2ClueConvertStateFromValue(v string) (*ToolsClueLifeCallbackV2ClueConvertState, error) {
	ev := ToolsClueLifeCallbackV2ClueConvertState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ToolsClueLifeCallbackV2ClueConvertState: valid values are %v", v, AllowedToolsClueLifeCallbackV2ClueConvertStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ToolsClueLifeCallbackV2ClueConvertState) IsValid() bool {
	for _, existing := range AllowedToolsClueLifeCallbackV2ClueConvertStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to tools_clue_life_callback_v2_clue_convert_state value
func (v ToolsClueLifeCallbackV2ClueConvertState) Ptr() *ToolsClueLifeCallbackV2ClueConvertState {
	return &v
}
