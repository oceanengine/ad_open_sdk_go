/*
Oceanengine Open Api

巨量引擎开放平台 Open Api

API version: 1.1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"fmt"
)

// DiagnosisTaskAgentCreateV2DiagnoseConfigPlatform
type DiagnosisTaskAgentCreateV2DiagnoseConfigPlatform string

// List of diagnosis_task_agent_create_v2_diagnose_config_platform
const (
	AD_DiagnosisTaskAgentCreateV2DiagnoseConfigPlatform        DiagnosisTaskAgentCreateV2DiagnoseConfigPlatform = "AD"
	QIANCHUAN_DiagnosisTaskAgentCreateV2DiagnoseConfigPlatform DiagnosisTaskAgentCreateV2DiagnoseConfigPlatform = "QIANCHUAN"
)

// All allowed values of DiagnosisTaskAgentCreateV2DiagnoseConfigPlatform enum
var AllowedDiagnosisTaskAgentCreateV2DiagnoseConfigPlatformEnumValues = []DiagnosisTaskAgentCreateV2DiagnoseConfigPlatform{
	"AD",
	"QIANCHUAN",
}

// NewDiagnosisTaskAgentCreateV2DiagnoseConfigPlatformFromValue returns a pointer to a valid DiagnosisTaskAgentCreateV2DiagnoseConfigPlatform
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDiagnosisTaskAgentCreateV2DiagnoseConfigPlatformFromValue(v string) (*DiagnosisTaskAgentCreateV2DiagnoseConfigPlatform, error) {
	ev := DiagnosisTaskAgentCreateV2DiagnoseConfigPlatform(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DiagnosisTaskAgentCreateV2DiagnoseConfigPlatform: valid values are %v", v, AllowedDiagnosisTaskAgentCreateV2DiagnoseConfigPlatformEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DiagnosisTaskAgentCreateV2DiagnoseConfigPlatform) IsValid() bool {
	for _, existing := range AllowedDiagnosisTaskAgentCreateV2DiagnoseConfigPlatformEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to diagnosis_task_agent_create_v2_diagnose_config_platform value
func (v DiagnosisTaskAgentCreateV2DiagnoseConfigPlatform) Ptr() *DiagnosisTaskAgentCreateV2DiagnoseConfigPlatform {
	return &v
}
