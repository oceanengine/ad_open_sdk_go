/*
Oceanengine Open Api

巨量引擎开放平台 Open Api

API version: 1.1.13
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"fmt"
)

// ProjectCostProtectStatusGetV30DataCompensateStatusInfoListCompensateEndReasons
type ProjectCostProtectStatusGetV30DataCompensateStatusInfoListCompensateEndReasons string

// List of project_cost_protect_status_get_v3.0_data_compensate_status_info_list_compensate_end_reasons
const (
	CONVERT_UNDER_THRESHOLD_ProjectCostProtectStatusGetV30DataCompensateStatusInfoListCompensateEndReasons ProjectCostProtectStatusGetV30DataCompensateStatusInfoListCompensateEndReasons = "CONVERT_UNDER_THRESHOLD"
	CURRENCY_PRECISION_ProjectCostProtectStatusGetV30DataCompensateStatusInfoListCompensateEndReasons      ProjectCostProtectStatusGetV30DataCompensateStatusInfoListCompensateEndReasons = "CURRENCY_PRECISION"
	ROI_REAL_EXPECTED_ProjectCostProtectStatusGetV30DataCompensateStatusInfoListCompensateEndReasons       ProjectCostProtectStatusGetV30DataCompensateStatusInfoListCompensateEndReasons = "ROI_REAL_EXPECTED"
	UN_OBERCOST_ProjectCostProtectStatusGetV30DataCompensateStatusInfoListCompensateEndReasons             ProjectCostProtectStatusGetV30DataCompensateStatusInfoListCompensateEndReasons = "UN_OBERCOST"
)

// All allowed values of ProjectCostProtectStatusGetV30DataCompensateStatusInfoListCompensateEndReasons enum
var AllowedProjectCostProtectStatusGetV30DataCompensateStatusInfoListCompensateEndReasonsEnumValues = []ProjectCostProtectStatusGetV30DataCompensateStatusInfoListCompensateEndReasons{
	"CONVERT_UNDER_THRESHOLD",
	"CURRENCY_PRECISION",
	"ROI_REAL_EXPECTED",
	"UN_OBERCOST",
}

// NewProjectCostProtectStatusGetV30DataCompensateStatusInfoListCompensateEndReasonsFromValue returns a pointer to a valid ProjectCostProtectStatusGetV30DataCompensateStatusInfoListCompensateEndReasons
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProjectCostProtectStatusGetV30DataCompensateStatusInfoListCompensateEndReasonsFromValue(v string) (*ProjectCostProtectStatusGetV30DataCompensateStatusInfoListCompensateEndReasons, error) {
	ev := ProjectCostProtectStatusGetV30DataCompensateStatusInfoListCompensateEndReasons(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProjectCostProtectStatusGetV30DataCompensateStatusInfoListCompensateEndReasons: valid values are %v", v, AllowedProjectCostProtectStatusGetV30DataCompensateStatusInfoListCompensateEndReasonsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProjectCostProtectStatusGetV30DataCompensateStatusInfoListCompensateEndReasons) IsValid() bool {
	for _, existing := range AllowedProjectCostProtectStatusGetV30DataCompensateStatusInfoListCompensateEndReasonsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to project_cost_protect_status_get_v3.0_data_compensate_status_info_list_compensate_end_reasons value
func (v ProjectCostProtectStatusGetV30DataCompensateStatusInfoListCompensateEndReasons) Ptr() *ProjectCostProtectStatusGetV30DataCompensateStatusInfoListCompensateEndReasons {
	return &v
}
